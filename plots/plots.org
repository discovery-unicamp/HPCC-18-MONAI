#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+date: 2019-09-27 sex
#+title: Graphics
#+author: Rafael Keller Tesser
#+email: rktesser@unicamp.br
#+language: en
#+tags: noexport(n) deprecated(d) ignore(i) RafaelTesser(R) EdsonBorin(E) OtatioNapoli(O) Daniel(D)
#+select_tags: export
#+exclude_tags: noexport
#+startup: overview indent
#+property: header-args:R :output-dir "./img" :session 202208-dl-cloud :datadir "./plots"
#+property: datadir "../logs"

* Pre-processing the data from the training logs

** Iteration times

The following code extracts the iteration times.

#+begin_src shell :results output :exports both
outfile="itertimes.csv"
echo exp  batch.size run start.date start.time iter.date iter.time epoch epoch.total iter iter.total > "$outfile"
for d in ../logs/*/;do
	 exp="$(basename $d)"

	 nexpbs1=0
	 nexpbs2=0
	 
	 for f in ${d}/*.log; do
	     #echo "$exp","$nexp"
	     #echo "$f"
	     start="$(grep "Engine run resuming" "$f" | cut -d " " -f -2)"
	     # All experiments finihed in the same day they started.
	     # So, we can ignore their dates when computing the timings

	     if grep -q 16/16 $f; then
		 bs=1;
		 nexpbs1=$((nexpbs1 + 1))
		 nexp=$nexpbs1
	     else
		 bs=2;
		 nexpbs2=$((nexpbs2 + 1))
		 nexp=$nexpbs2
	     fi
	     
	     egrep "Epoch.*Iter:" "$f" | sed -e "s/\(.*\) - ignite.engine.engine.DynUNetTrainer - INFO - Epoch: \([^\/]*\)\/\([^,]*\), Iter: \([^\/]*\)\/\([^ ]*\) .*/${exp} ${bs} ${nexp} ${start} \1 \2 \3 \4 \5/g" -e "s/,/\./g"
	     
	 done
done >> "$outfile"

## cat "$outfile"
head "$outfile"
#+end_src

#+RESULTS:
#+begin_example
exp batch.size run start.date start.time iter.date iter.time epoch epoch.total iter iter.total
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:39.198 1 10 1 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:41.943 1 10 2 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:44.553 1 10 3 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:47.166 1 10 4 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:49.845 1 10 5 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:52.464 1 10 6 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:55.089 1 10 7 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:57.702 1 10 8 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:12:00.409 1 10 9 16
#+end_example

** Epoch times

#+begin_src shell :results output :exports both
outfile="epochtimes.csv"
echo exp batch.size run epoch epoch.duration > "$outfile"
for d in ../logs/*/;do
	 exp="$(basename $d)"

	 nexpbs1=0
	 nexpbs2=0

	 for f in ${d}/*.log; do
	     #echo "$exp","$nexp"
	     #echo "$f"

	     if grep -q 16/16 $f; then
		 bs=1;
		 nexpbs1=$((nexpbs1 + 1))
		 nexp=$nexpbs1
	     else
		 bs=2;
		 nexpbs2=$((nexpbs2 + 1))
		 nexp=$nexpbs2
	     fi
	     
	     egrep "Epoch.*Complete" "$f" | cut -d " " -f 8- | sed -e "s/Epoch\[\(.*\)\] Complete. Time taken: \(.*\)/${exp} ${bs} ${nexp} \1 \2/g"
	     
	 done
done >> "$outfile"

## cat "$outfile"
head "$outfile"
#+end_src

#+RESULTS:
#+begin_example
exp batch.size run epoch epoch.duration
IAAS-g3s.xlarge 1 1 1 00:03:50
IAAS-g3s.xlarge 1 1 2 00:00:44
IAAS-g3s.xlarge 1 1 3 00:00:44
IAAS-g3s.xlarge 1 1 4 00:00:44
IAAS-g3s.xlarge 1 1 5 00:00:44
IAAS-g3s.xlarge 1 1 6 00:00:44
IAAS-g3s.xlarge 1 1 7 00:00:44
IAAS-g3s.xlarge 1 1 8 00:00:44
IAAS-g3s.xlarge 1 1 9 00:00:45
#+end_example


** Total training times

#+begin_src shell :results output :exports both
outfile="trainingtimes.csv"
echo exp batch.size run duration > "$outfile"
for d in ../logs/*/; do
	 exp="$(basename $d)"

	 nexpbs1=0
	 nexpbs2=0

	 for f in ${d}/*.log; do


	     if grep -q 16/16 $f; then
		 bs=1;
		 nexpbs1=$((nexpbs1 + 1))
		 nexp=$nexpbs1
	     else
		 bs=2;
		 nexpbs2=$((nexpbs2 + 1))
		 nexp=$nexpbs2
	     fi
	     
	     egrep "Engine run complete.*" "$f" | cut -d " " -f 13 | sed -e "s/\(.*\)/${exp} ${bs} ${nexp} \1/g"
	     
	 done
done >> "$outfile"
cat "$outfile"
#+end_src

#+RESULTS:
#+begin_example
exp batch.size run duration
IAAS-g3s.xlarge 1 1 00:10:29
IAAS-g3s.xlarge 1 2 00:09:39
IAAS-g3s.xlarge 1 3 00:09:34
IAAS-g4dn.xlarge 1 1 00:07:49
IAAS-g4dn.xlarge 1 2 00:07:28
IAAS-g4dn.xlarge 1 3 00:07:24
IAAS-g5.xlarge 1 1 00:03:27
IAAS-g5.xlarge 1 2 00:03:29
IAAS-g5.xlarge 1 3 00:03:29
IAAS-p2.xlarge 1 1 00:19:14
IAAS-p2.xlarge 1 2 00:19:14
IAAS-p2.xlarge 1 3 00:18:37
IAAS-p3.2xlarge 1 1 00:04:43
IAAS-p3.2xlarge 1 2 00:04:09
IAAS-p3.2xlarge 1 3 00:04:06
SAGEMAKER-ml-g4dn-xlarge 2 1 00:04:25
SAGEMAKER-ml-g4dn-xlarge 2 2 00:04:29
SAGEMAKER-ml-g4dn-xlarge 2 3 00:04:27
SAGEMAKER-ml-g4dn-xlarge 1 1 00:05:22
SAGEMAKER-ml-g4dn-xlarge 1 2 00:05:27
SAGEMAKER-ml-g4dn-xlarge 1 3 00:05:30
SAGEMAKER-ml-p3-2xlarge 2 1 00:01:50
SAGEMAKER-ml-p3-2xlarge 2 2 00:01:55
SAGEMAKER-ml-p3-2xlarge 2 3 00:01:51
SAGEMAKER-ml-p3-2xlarge 1 1 00:01:59
SAGEMAKER-ml-p3-2xlarge 1 2 00:01:57
SAGEMAKER-ml-p3-2xlarge 1 3 00:01:56
#+end_example


* Loading R packages

#+name: load-r-packages
#+begin_src R :results output :exports both :noweb no-export
suppressMessages(library(data.table))
suppressMessages(library(tidyverse))
options(crayon.enabled = FALSE)
options(dplyr.sumarise.inform = FALSE)
options(tidyverse.quiet = TRUE)
options(dplyr.summarise.inform = FALSE)
#+end_src

#+RESULTS: load-r-packages


* Reading the data into R

#+name: do-init
#+begin_src R :results output :exports both :noweb no-export
func.init <- function()
{
  <<load-r-packages>>
}

if(!exists("do.init")){
  do.init = TRUE
}

if(do.init == TRUE){
  func.init()
  do.init = FALSE
}
#+end_src

#+RESULTS: do-init

#+name: read-csv-data
#+begin_src R :results output :exports both :noweb no-export
## do.init=TRUE
<<do-init>>

read.timings.csv <- function(fn)
{
  read.table(fn, sep=" ", header=TRUE, stringsAsFactors=TRUE)
}
iter.dt   <- read.timings.csv("plots/itertimes.csv"    )
epoch.dt  <- read.timings.csv("plots/epochtimes.csv"   )
train.dt  <- read.timings.csv("plots/trainingtimes.csv")

## cat("Iterations:\n")
## head(iter.dt)
## cat("\nEpochs:\n")
## head(epoch.dt)
## cat("\nTraining:\n")
## head(train.dt)
#+end_src

#+RESULTS: read-csv-data

* Helper functions

I'll need to subtract timings in the format HH:MM:SS.mmm. For this purpose, I'll
implement functions to convert these timings to seconds or miliseconds, as shown
in the code block below.

#+name: fun-conv-timings
#+begin_src R :results output :exports both :noweb no-export
## t = "1:01:01.500"
my.tsec <- function(t.str)
{
t.spstr = unlist(strsplit(t.str, ":"))
t.spn = as.numeric(t.spstr)
t.sec = (t.spn[1] * 60 + t.spn[2]) * 60 + t.spn[3]
t.sec
}
my.tmsec <- function(t.str)
{
  my.tsec(t.str) * 1000
}

## secs = my.tsec(t)
## msecs = my.tmsec(t)

## secs
## msecs

#+end_src


* Plots

** Iteration times
*** Computing the duration of each iteration

As all training sessions finished in the same day as they started, it is safe to
ignore the dates in the log files.

Next, we will create columns for the converted timings from hour format to seconds,
the elapsed time at the end of each iteration, and their duration.

#+name: calc-iter-timings
#+begin_src R :results output :exports both :noweb no-export
<<fun-conv-timings>>

<<read-csv-data>>

exp.list <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

iter.dt %>%
  data.frame %>%
  filter(exp %in% exp.list) %>%
  mutate(start.sec = unlist(lapply(as.character(start.time), my.tsec)),
         iter.sec = unlist(lapply(as.character(iter.time), my.tsec)),
         iter.elapsed = iter.sec - start.sec) %>%
  group_by(exp, batch.size, run) %>%
  mutate(iter.dur = iter.elapsed - lag(iter.elapsed, default = 0)) %>%
  ungroup() %>% data.table -> iter.dt
  summary(iter.dt)
#+end_src

#+RESULTS: calc-iter-timings
#+begin_example
                       exp        batch.size         run         start.date  
 IAAS-g3s.xlarge         :  0   Min.   :1.000   Min.   :1   2022-07-26:  80  
 IAAS-g4dn.xlarge        :480   1st Qu.:1.000   1st Qu.:1   2022-07-27: 160  
 IAAS-g5.xlarge          :  0   Median :1.000   Median :2   2022-07-28: 240  
 IAAS-p2.xlarge          :480   Mean   :1.167   Mean   :2   2022-08-02:2400  
 IAAS-p3.2xlarge         :480   3rd Qu.:1.000   3rd Qu.:3                    
 SAGEMAKER-ml-g4dn-xlarge:720   Max.   :2.000   Max.   :3                    
 SAGEMAKER-ml-p3-2xlarge :720                                                
        start.time        iter.date           iter.time        epoch     
 10:47:41.187: 160   2022-07-26:  80   12:43:14.584:   2   Min.   : 1.0  
 10:47:41.204: 160   2022-07-27: 160   10:49:46.269:   1   1st Qu.: 3.0  
 10:47:41.206: 160   2022-07-28: 240   10:49:46.273:   1   Median : 5.5  
 11:25:52.599: 160   2022-08-02:2400   10:49:46.323:   1   Mean   : 5.5  
 11:30:12.898: 160                     10:49:48.091:   1   3rd Qu.: 8.0  
 12:01:57.830: 160                     10:49:48.200:   1   Max.   :10.0  
 (Other)     :1920                     (Other)     :2873                 
  epoch.total      iter          iter.total      start.sec        iter.sec    
 Min.   :10   Min.   : 1.000   Min.   : 8.00   Min.   :38861   Min.   :38986  
 1st Qu.:10   1st Qu.: 4.000   1st Qu.:16.00   1st Qu.:41413   1st Qu.:42183  
 Median :10   Median : 7.000   Median :16.00   Median :54135   Median :54263  
 Mean   :10   Mean   : 7.833   Mean   :14.67   Mean   :56119   Mean   :56365  
 3rd Qu.:10   3rd Qu.:12.000   3rd Qu.:16.00   3rd Qu.:70841   3rd Qu.:71088  
 Max.   :10   Max.   :16.000   Max.   :16.00   Max.   :75244   Max.   :75508  
                                                                              
  iter.elapsed         iter.dur      
 Min.   :   5.995   Min.   :  0.586  
 1st Qu.:  86.248   1st Qu.:  0.679  
 Median : 187.930   Median :  1.964  
 Mean   : 245.340   Mean   :  2.789  
 3rd Qu.: 286.957   3rd Qu.:  3.144  
 Max.   :1154.465   Max.   :188.090
#+end_example

#+begin_src R :results output :exports both :noweb no-export
write.csv(iter.dt, "iteration-times-processed.csv")
#+end_src

#+RESULTS:


*** Plots for BS=1

#+begin_src R :results output graphics file :file iteration-times.png :exports both :width 600 :height 600 :noweb no-export

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

plot.iter.times <- function(dt, scl="fixed")
{
  dt %>%
    ggplot(aes(x = iter, y = iter.dur, group = epoch, color=epoch)) +
    geom_line() +
    facet_grid(cols = vars(run), rows = vars(exp), scales=scl,
               labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Iteration number") +
    scale_y_continuous(name = "Iteration time (s)") +
    scale_color_discrete(name = "Epoch")
}

iter.dt %>%
  filter(batch.size == 1) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times() +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/iteration-times.png]]


Plot without the first iteration of the first epoch:

#+begin_src R :results output graphics file :file iteration-times-no-1st-iter.png :exports both :width 600 :height 600 :noweb no-export
iter.dt %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times() +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/iteration-times-no-1st-iter.png]]


Plot with free /y/ scale:

#+begin_src R :results output graphics file :file iteration-times-no-1st-iter-freescale.png :exports both :width 600 :height 600 :noweb no-export
iter.dt %>%
  filter(batch.size == 1) %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times(scl = "free_y") +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/iteration-times-no-1st-iter-freescale.png]]


Plotting only a few executions:
#+begin_src R :results output graphics file :file iteration-times-few-runs.png  :exports both :width 600 :height 400 :noweb no-export
plot.iter.times.v2 <- function(dt, scl = "fixed")
{
  dt %>%
    ggplot(aes(x = iter, y = iter.dur, group = epoch, color=epoch)) +
    geom_line() +
    facet_grid(cols = vars(exp), scales=scl,
               labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Iteration number") +
    scale_y_continuous(name = "Iteration time (s)") +
    scale_color_discrete(name = "Epoch")
}

# exps <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")
exps <- c("IAAS-g4dn.xlarge", "SAGEMAKER-ml-p3-2xlarge")

iter.dt %>%
  filter(batch.size == 1) %>%
  #filter(!(epoch == 1 & iter == 1) 1) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v2(scl = "free") +
  theme_bw() 
  
#+end_src

#+RESULTS:
[[file:./img/iteration-times-few-runs.png]]

Plotting only a few executions:
#+begin_src R :results output graphics file :file iteration-times-single-iaasg4dnxlarge.png  :exports both :width 600 :height 400 :noweb no-export
plot.iter.times.v3 <- function(dt, scl = "fixed")
{
  dt %>%
    ggplot(aes(x = iter, y = iter.dur, group = epoch, color=epoch)) +
    geom_line() +
    ## facet_grid(cols = vars(exp), scales=scl,
    ##            labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Iteration number") +
    scale_y_continuous(name = "Iteration time (s)") +
    scale_color_discrete(name = "Epoch")
}

# exps <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")
exps <- c("IAAS-g4dn.xlarge")

iter.dt %>%
  filter(batch.size == 1) %>%
  #filter(!(epoch == 1 & iter == 1) 1) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw() -> p1

iter.dt %>%
  filter(batch.size == 1) %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw() +
  theme(
    legend.position = "none"
    ) -> p2

p1 + annotation_custom(ggplotGrob(p2), xmin=3, xmax=16,
                       ymin = 10, ymax = 125)
#+end_src

#+RESULTS:
[[file:./img/iteration-times-single-iaasg4dnxlarge.png]]

#+begin_src R :results output graphics file :file iteration-times-single-sm-mlp3.2xlarge.png  :exports both :width 600 :height 400 :noweb no-export

# exps <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")
exps <- c("SAGEMAKER-ml-p3-2xlarge")

iter.dt %>%
  filter(batch.size == 1) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw() -> p1

iter.dt %>%
  filter(batch.size == 1) %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw() +
  theme(
    legend.position = "none"
    ) -> p2

p1 + annotation_custom(ggplotGrob(p2), xmin=3, xmax=16,
                       ymin = 1.5, ymax = 8.5)

#+end_src

#+RESULTS:
[[file:./img/iteration-times-single-sm-mlp3.2xlarge.png]]


*** Plots for BS=2

#+begin_src R :results output graphics file :file iteration-times-bs2.png :exports both :width 600 :height 400 :noweb no-export

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

plot.iter.times <- function(dt, scl="fixed")
{
  dt %>%
    ggplot(aes(x = iter, y = iter.dur, group = epoch, color=epoch)) +
    geom_line() +
    facet_grid(cols = vars(run), rows = vars(exp), scales=scl,
               labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Iteration number") +
    scale_y_continuous(name = "Iteration time (s)") +
    scale_color_discrete(name = "Epoch")
}

iter.dt %>%
  filter(batch.size == 2) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times() +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/iteration-times-bs2.png]]


Plot without the first iteration of the first epoch:

#+begin_src R :results output graphics file :file iteration-times-no-1st-iter-bs2.png :exports both :width 600 :height 400 :noweb no-export
iter.dt %>%
  filter(batch.size == 2) %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times() +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/iteration-times-no-1st-iter-bs2.png]]


Plot with free /y/ scale:

#+begin_src R :results output graphics file :file iteration-times-no-1st-iter-freescale-bs2.png :exports both :width 600 :height 400 :noweb no-export
iter.dt %>%
  filter(batch.size == 2) %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times(scl = "free_y") +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/iteration-times-no-1st-iter-freescale-bs2.png]]


Plotting only a few executions:
#+begin_src R :results output graphics file :file iteration-times-few-runs-bs2.png  :exports both :width 600 :height 400 :noweb no-export
plot.iter.times.v2 <- function(dt, scl = "fixed")
{
  dt %>%
    ggplot(aes(x = iter, y = iter.dur, group = epoch, color=epoch)) +
    geom_line() +
    facet_grid(cols = vars(exp), scales=scl,
               labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Iteration number") +
    scale_y_continuous(name = "Iteration time (s)") +
    scale_color_discrete(name = "Epoch")
}

# exps <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")
exps <- c("SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

iter.dt %>%
  filter(batch.size == 2) %>%
  #filter(!(epoch == 1 & iter == 1) 1) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v2(scl = "free") +
  theme_bw() 
  
#+end_src

#+RESULTS:
[[file:./img/iteration-times-few-runs-bs2.png]]

Plotting only a few executions:
#+begin_src R :results output graphics file :file iteration-times-single-sagemakermlg4dnxlarge-bs2.png  :exports both :width 600 :height 400 :noweb no-export
plot.iter.times.v3 <- function(dt, scl = "fixed")
{
  dt %>%
    ggplot(aes(x = iter, y = iter.dur, group = epoch, color=epoch)) +
    geom_line() +
    ## facet_grid(cols = vars(exp), scales=scl,
    ##            labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Iteration number") +
    scale_y_continuous(name = "Iteration time (s)") +
    scale_color_discrete(name = "Epoch")
}

# exps <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")
exps <- c("SAGEMAKER-ml-g4dn-xlarge")

iter.dt %>%
  filter(batch.size == 2) %>%
  #filter(!(epoch == 1 & iter == 1) 1) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw() -> p1

iter.dt %>%
  filter(batch.size == 2) %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw() +
  theme(
    legend.position = "none"
    ) -> p2

 p1 + annotation_custom(ggplotGrob(p2), xmin=2.5, xmax=8,
                       ymin = 4, ymax = 9.5)
#+end_src

#+RESULTS:
[[file:./img/iteration-times-single-sagemakermlg4dnxlarge-bs2.png]]

#+begin_src R :results output graphics file :file iteration-times-single-sagemager-mlp3.2xlarge-bs2.png  :exports both :width 600 :height 400 :noweb no-export

# exps <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")
exps <- c("SAGEMAKER-ml-p3-2xlarge")

iter.dt %>%
  filter(batch.size == 2) %>%
  #filter(!(epoch == 1 & iter == 1) 1) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw() -> p1

iter.dt %>%
  filter(batch.size == 2) %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw() +
  theme(
    legend.position = "none"
    ) -> p2

p1 + annotation_custom(ggplotGrob(p2), xmin=2.5, xmax=8,
                       ymin = 1.5, ymax = 6)

#+end_src

#+RESULTS:
[[file:./img/iteration-times-single-sagemager-mlp3.2xlarge-bs2.png]]



*** Plots for BS1 with all instances

#+name: calc-iter-timings-all
#+begin_src R :results output :exports both :noweb no-export
<<fun-conv-timings>>
<<read-csv-data>>

exp.list <- c("IAAS-g4dn.xlarge", "IAAS-g3s.xlarge", "IAAS-g5.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\ng3s.xlarge", "IaaS\ng5.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-g3s.xlarge", "IAAS-g5.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

lbl.exp.1l <- c("IaaS g4dn.xlarge", "IaaS g3s.xlarge", "IaaS g5.xlarge", "IaaS p2.xlarge", "IaaS p3.2xlarge", "SageMaker ml.g4dn.xlarge", "SageMaker ml.p3.2xlarge")
names(lbl.exp.1l) <- c("IAAS-g4dn.xlarge", "IAAS-g3s.xlarge", "IAAS-g5.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

lbl.exp.1l.short <- c("g4dn.xlarge", "g3s.xlarge", "g5.xlarge", "p2.xlarge", "p3.2xlarge", "ml.g4dn.xlarge", "ml.p3.2xlarge")
names(lbl.exp.1l.short) <- c("IAAS-g4dn.xlarge", "IAAS-g3s.xlarge", "IAAS-g5.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")


iter.dt %>%
  data.frame %>%
  filter((exp %in% exp.list) & (batch.size == 1)) %>%
    mutate(start.sec = unlist(lapply(as.character(start.time), my.tsec)),
         iter.sec = unlist(lapply(as.character(iter.time), my.tsec)),
         iter.elapsed = iter.sec - start.sec) %>%
  group_by(exp, batch.size, run) %>%
  mutate(iter.dur = iter.elapsed - lag(iter.elapsed, default = 0)) %>%
  ungroup() %>% data.table -> iter.dt
  summary(iter.dt)
#+end_src

#+RESULTS: calc-iter-timings-all
#+begin_example
                       exp        batch.size      run         start.date  
 IAAS-g3s.xlarge         :480   Min.   :1    Min.   :1   2022-07-26:   0  
 IAAS-g4dn.xlarge        :480   1st Qu.:1    1st Qu.:1   2022-07-27:   0  
 IAAS-g5.xlarge          :480   Median :1    Median :2   2022-07-28:   0  
 IAAS-p2.xlarge          :480   Mean   :1    Mean   :2   2022-08-02:3360  
 IAAS-p3.2xlarge         :480   3rd Qu.:1    3rd Qu.:3                    
 SAGEMAKER-ml-g4dn-xlarge:480   Max.   :1    Max.   :3                    
 SAGEMAKER-ml-p3-2xlarge :480                                             
        start.time        iter.date           iter.time        epoch     
 10:47:41.187: 160   2022-07-26:   0   12:43:14.584:   2   Min.   : 1.0  
 10:47:41.204: 160   2022-07-27:   0   18:36:31.149:   2   1st Qu.: 3.0  
 10:47:41.206: 160   2022-07-28:   0   18:36:31.951:   2   Median : 5.5  
 11:25:52.599: 160   2022-08-02:3360   18:36:56.912:   2   Mean   : 5.5  
 11:30:12.898: 160                     18:37:39.705:   2   3rd Qu.: 8.0  
 12:01:57.830: 160                     10:49:46.269:   1   Max.   :10.0  
 (Other)     :2400                     (Other)     :3349                 
  epoch.total      iter         iter.total   start.sec        iter.sec    
 Min.   :10   Min.   : 1.00   Min.   :16   Min.   :38861   Min.   :38986  
 1st Qu.:10   1st Qu.: 4.75   1st Qu.:16   1st Qu.:43318   1st Qu.:43738  
 Median :10   Median : 8.50   Median :16   Median :65580   Median :65864  
 Mean   :10   Mean   : 8.50   Mean   :16   Mean   :57476   Mean   :57750  
 3rd Qu.:10   3rd Qu.:12.25   3rd Qu.:16   3rd Qu.:69212   3rd Qu.:69455  
 Max.   :10   Max.   :16.00   Max.   :16   Max.   :73955   Max.   :74071  
                                                                          
  iter.elapsed         iter.dur      
 Min.   :   5.995   Min.   :  0.388  
 1st Qu.: 144.168   1st Qu.:  0.668  
 Median : 205.117   Median :  1.963  
 Mean   : 273.867   Mean   :  2.769  
 3rd Qu.: 338.182   3rd Qu.:  2.671  
 Max.   :1154.465   Max.   :189.910
#+end_example

#+name: plot-iter-time-all
#+begin_src R :results output graphics file :file iteration-times-all-instances.png :exports both :width 600 :height 800 :noweb no-export

plot.iter.times <- function(dt, scl="fixed")
{
  dt %>%
    ggplot(aes(x = iter, y = iter.dur, group = epoch, color=epoch)) +
    geom_line() +
    facet_grid(cols = vars(run), rows = vars(exp), scales=scl,
               labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Step number", limits = c(1, NA)) +
    scale_y_continuous(name = "Step time (s)",
                       ## limits = c(0, 10), # this also removes the data points that are outside the limit
                       breaks = seq(2, 10, 2)) +
    ## ylim(0, 10) + # same as setting the limits in scale_y_continuous()
    coord_cartesian(ylim = c(0, 10)) + # this limits the axis but stil includes datapoints inside the limit
    scale_color_discrete(name = "Epoch") +
    theme_bw() +
    theme(
      text = element_text(size = 14, family = "serif")
    )
}

iter.dt %>%
  filter(batch.size == 1) %>%
  ## filter(epoch == 1) %>%
  ## filter(!(epoch == 1 & iter == 1)) %>%
  mutate(epoch = factor(epoch)) %>%
  ## plot.iter.times(scl = "fixed") +
  plot.iter.times(scl = "fixed") 
#+end_src

#+RESULTS: plot-iter-time-all
[[file:./img/iteration-times-all-instances.png]]

PDF version:
#+name: plot-iter-time-all-pdf
#+begin_src R :results output graphics file :file iteration-times-all-instances.pdf :exports both :width 6 :height 8 :noweb no-export

<<plot-iter-time-all>>

#+end_src

#+RESULTS: plot-iter-time-all-pdf
[[file:./img/iteration-times-all-instances.pdf]]


Using ~coord_cartesian()~ to set the /y/ axis limits disables the free scales in the facets, and  I could not find a way to set different ~coord_cartesian()~ limits for each facet. So, instead of using facets, I will create multiple plots and assemble them using the ~patchwork~ library.

#+name: plot-iter-time-all-v2
#+begin_src R :results output graphics file :file iteration-times-all-instances-v2.png :exports both :width 600 :height 800 :noweb no-export

library(grid)
library(patchwork)

calc.ymax <- function(dt, e)
{
  dt%>%
    filter(exp == e) %>%
    filter(!(epoch == 1 & iter == 1)) %>%
    data.frame() -> dt.tmp
  ## ceiling(max(dt.tmp$iter.dur))
  max(dt.tmp$iter.dur)
}

plot.single.run <- function(dt, e, r, ymax)
{
  if(ymax < 2)
    brkspc = 0.5
  else if(ymax < 5)
    brkspc = 1
  else
    brkspc = 2
    
  dt %>%
    ggplot(aes(x = iter, y = iter.dur, group = epoch, color=epoch)) +
    geom_line() +
    scale_x_continuous(name = "Step number",
                       limits = c(1, NA)) +
    scale_y_continuous(name = "Step time (s)",
                       ## limits = c(0, 10), # this also removes the data points that are outside the limit
                       breaks = seq(0, 10, brkspc)) +
    ## ylim(0, 10) + # same as setting the limits in scale_y_continuous()
    coord_cartesian(ylim = c(0, ymax)) + # this limits the axis but stil includes datapoints inside the limit
    scale_color_discrete(name = "Epoch") +
    ggtitle(paste0(e,", Run #", r)) +
    theme_bw() +
    theme(text = element_text(size = 18, family = "serif"),
          title = element_text(size = 14),
          axis.title = element_blank()
          )
}

plot.iter.times.v2 <- function(dt)
{
  p = list()
  n = 1
  for(e in unique(iter.dt$exp)){
    ymax = calc.ymax(dt, e)
    for(r in unique(iter.dt$run)){
      dt %>%
        filter( run == r & exp == e) %>%
        plot.single.run(lbl.exp.1l.short[e], r, ymax) -> p[[n]]
      n = n + 1
    }
  }
  p
}

iter.dt %>%
  filter(batch.size == 1) %>%
  ## filter(epoch == 1) %>%
  ## filter(!(epoch == 1 & iter == 1)) %>%
  mutate(epoch = factor(epoch)) %>%
  ## plot.iter.times(scl = "fixed") +
  plot.iter.times.v2() -> p
yttl <- grid::textGrob('Step duration (s)', rot = 90,
                       gp = gpar(fontsize = 18, fontfamily = "serif"))
xttl <- grid::textGrob('Step number',
                       gp = gpar(fontsize = 18, fontfamily = "serif"))
pw <-
  ((wrap_elements(yttl) + 
   (p[[ 1]] + p[[ 2]] + p[[ 3]] +
    p[[ 4]] + p[[ 5]] + p[[ 6]] +
    p[[ 7]] + p[[ 8]] + p[[ 9]] +
    p[[10]] + p[[11]] + p[[12]] +
    p[[13]] + p[[14]] + p[[15]] +
    p[[16]] + p[[17]] + p[[18]] +
    p[[19]] + p[[20]] + p[[21]] +
    plot_layout(guides="collect", ncol = 3, nrow = 7) &
    theme(legend.title = element_text(size = 18),
          plot.margin = margin(1, 5, 1, 1, "pt"))) +
  plot_layout(ncol = 2 , nrow = 1, widths = c(0.125, 4))) /
  wrap_elements(xttl)) +
  plot_layout(nrow = 2, heights = c(7, 0.15)) ## &
  ## theme(plot.margin = margin(1, 1, 1, 1, "pt"))
  
  
## wrap_elements(grid::textGrob('Step duration (s)', rot = 90)) | pw / grid::textGrob('Step number')

pw
#+end_src

#+RESULTS: plot-iter-time-all-v2
[[file:./img/iteration-times-all-instances-v2.png]]

PDF version:
#+name: plot-iter-time-all-v2-pdf
#+begin_src R :results output graphics file :file iteration-times-all-instances-v2.pdf :exports both :width 9 :height 12 :noweb no-export
<<plot-iter-time-all-v2>>
#+end_src

#+RESULTS: plot-iter-time-all-v2-pdf
[[file:./img/iteration-times-all-instances-v2.pdf]]

#+begin_src shell :results output :exports both
pdfcrop ../img/iteration-times-all-instances-v2.pdf
#+end_src

#+RESULTS:
: PDFCROP 1.40, 2020/06/06 - Copyright (c) 2002-2020 by Heiko Oberdiek, Oberdiek Package Support Group.
: ==> 1 page written on `../img/iteration-times-all-instances-v2-crop.pdf'.


** Epoch times

*** Reading the data

#+name: read-epoch-times
#+begin_src R :results output :exports both :noweb no-export
<<fun-conv-timings>>

<<read-csv-data>>

exp.list <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

epoch.dt %>%
  data.frame %>%
  filter(exp %in% exp.list) %>%
  mutate(epoch.sec = unlist(lapply(as.character(epoch.duration), my.tsec))
           ) -> epoch.dt

glimpse(epoch.dt)
#+end_src

#+RESULTS: read-epoch-times
: Rows: 210
: Columns: 6
: $ exp            <fct> IAAS-g4dn.xlarge, IAAS-g4dn.xlarge, IAAS-g4dn.xlarge, I…
: $ batch.size     <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…
: $ run            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2…
: $ epoch          <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, …
: $ epoch.duration <fct> 00:02:34, 00:00:32, 00:00:34, 00:00:36, 00:00:36, 00:00…
: $ epoch.sec      <dbl> 154, 32, 34, 36, 36, 35, 36, 35, 36, 35, 153, 31, 32, 3…


*** Plots for BS=1

#+begin_src R :results output graphics file :file epoch-times.png :exports both :width 600 :height 400 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

plot.epoch.times <- function(dt, scl="fixed")
{
  dt %>%
    ggplot(aes(x = epoch, y = epoch.sec, group = run, color=run)) +
    geom_line() +
    ## facet_grid(cols = vars(exp), scales = scl,
    ##            labeller = labeller(exp = lbl.exp)) +
    facet_grid(rows = vars(exp), scales = scl,
               labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Epoch number", breaks = seq(0,10,1)) +
    scale_y_continuous(name = "Epoch time (s)", limits = c(0,NA)) +
    scale_color_discrete(name = "Run")
}

epoch.dt %>%
  filter(batch.size == 1) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times(scl = "fixed") +
  theme_bw()

#+end_src

#+RESULTS:
[[file:./img/epoch-times.png]]

#+begin_src R :results output graphics file :file epoch-times-free-scale.png :exports both :width 600 :height 400 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

epoch.dt %>%
  filter(batch.size == 1) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times(scl = "free") +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/epoch-times-free-scale.png]]

#+begin_src R :results output graphics file :file epoch-times-no-first-epoch.png :exports both :width 600 :height 400 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

epoch.dt %>%
  filter(batch.size == 1) %>%
  filter(epoch != 1) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times(scl = "fixed") +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/epoch-times-no-first-epoch.png]]

#+begin_src R :results output graphics file :file epoch-times-no-first-epoch-free-scale.png :exports both :width 600 :height 400 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")


epoch.dt %>%
  filter(batch.size == 1) %>%
  filter(epoch != 1) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times(scl = "free") +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/epoch-times-no-first-epoch-free-scale.png]]

**** With horizontal facets (one plot per column)

All epochs:

#+begin_src R :results output graphics file :file epoch-times-columns.png :exports both :width 600 :height 200 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

plot.epoch.times.cols <- function(dt, scl="fixed")
{
  dt %>%
    ggplot(aes(x = epoch, y = epoch.sec, group = run, color=run)) +
    geom_line() +
    facet_grid(cols = vars(exp), scales = scl,
                labeller = labeller(exp = lbl.exp)) +
    ## facet_grid(rows = vars(exp), scales = scl,
    ##            labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Epoch number", breaks = seq(0,10,1)) +
    scale_y_continuous(name = "Epoch time (s)", limits = c(0,NA)) +
    scale_color_discrete(name = "Run")
}

epoch.dt %>%
  filter(batch.size == 1) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times.cols(scl = "fixed") +
  theme_bw() +
  theme(legend.position = "top")

#+end_src

#+RESULTS:
[[file:./img/epoch-times-columns.png]]



Without the first epoch:

#+begin_src R :results output graphics file :file epoch-times-columns-no-first-epoch.png :exports both :width 600 :height 200 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

epoch.dt %>%
  filter(batch.size == 1) %>%
  filter(epoch != 1) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times.cols(scl = "fixed") +
  theme_bw() +
  theme(legend.position = "top")

#+end_src

#+RESULTS:
[[file:./img/epoch-times-columns-no-first-epoch.png]]


*** Plots for BS=2

#+begin_src R :results output graphics file :file epoch-times-bs2.png :exports both :width 600 :height 400 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

plot.epoch.times <- function(dt, scl="fixed")
{
  dt %>%
    ggplot(aes(x = epoch, y = epoch.sec, group = run, color=run)) +
    geom_line() +
    ## facet_grid(cols = vars(exp), scales = scl,
    ##            labeller = labeller(exp = lbl.exp)) +
    facet_grid(rows = vars(exp), scales = scl,
               labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Epoch number", breaks = seq(0,10,1)) +
    scale_y_continuous(name = "Epoch time (s)", limits = c(0,NA)) +
    scale_color_discrete(name = "Run")
}

epoch.dt %>%
  filter(batch.size == 2) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times(scl = "fixed") +
  theme_bw()

#+end_src

#+RESULTS:
[[file:./img/epoch-times-bs2.png]]

#+begin_src R :results output graphics file :file epoch-times-free-scale-bs2.png :exports both :width 600 :height 400 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

epoch.dt %>%
  filter(batch.size == 2) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times(scl = "free") +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/epoch-times-free-scale-bs2.png]]

#+begin_src R :results output graphics file :file epoch-times-no-first-epoch-bs2.png :exports both :width 600 :height 400 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

epoch.dt %>%
  filter(batch.size == 2) %>%
  filter(epoch != 1) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times(scl = "fixed") +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/epoch-times-no-first-epoch-bs2.png]]

#+begin_src R :results output graphics file :file epoch-times-no-first-epoch-free-scale-bs2.png :exports both :width 600 :height 400 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")


epoch.dt %>%
  filter(batch.size == 2) %>%
  filter(epoch != 1) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times(scl = "free") +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/epoch-times-no-first-epoch-free-scale-bs2.png]]

**** With horizontal facets (one plot per column)

All epochs:

#+begin_src R :results output graphics file :file epoch-times-columns-bs2.png :exports both :width 450 :height 300 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

plot.epoch.times.cols <- function(dt, scl="fixed")
{
  dt %>%
    ggplot(aes(x = epoch, y = epoch.sec, group = run, color=run)) +
    geom_line() +
    facet_grid(cols = vars(exp), scales = scl,
                labeller = labeller(exp = lbl.exp)) +
    ## facet_grid(rows = vars(exp), scales = scl,
    ##            labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Epoch number", breaks = seq(0,10,1)) +
    scale_y_continuous(name = "Epoch time (s)", limits = c(0,NA)) +
    scale_color_discrete(name = "Run")
}

epoch.dt %>%
  filter(batch.size == 2) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times.cols(scl = "fixed") +
  theme_bw() +
  theme(legend.position = "top")

#+end_src

#+RESULTS:
[[file:./img/epoch-times-columns-bs2.png]]



Without the first epoch:

#+begin_src R :results output graphics file :file epoch-times-columns-no-first-epoch-bs2.png :exports both :width 450 :height 300 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

epoch.dt %>%
  filter(batch.size == 2) %>%
  filter(epoch != 1) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times.cols(scl = "fixed") +
  theme_bw() +
  theme(legend.position = "top")

#+end_src

#+RESULTS:
[[file:./img/epoch-times-columns-no-first-epoch-bs2.png]]

** Total training times
*** Reading the data

#+name: read-training-times
#+begin_src R :results output :exports both :noweb no-export
<<fun-conv-timings>>

<<read-csv-data>>
exp.list <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

train.dt %>%
  data.frame %>%
  filter(exp %in% exp.list) %>%
  mutate(train.sec = unlist(lapply(as.character(duration), my.tsec))
         ) -> train.dt

train.dt
#+end_src

#+RESULTS: read-training-times
#+begin_example
                        exp batch.size run duration train.sec
1          IAAS-g4dn.xlarge          1   1 00:07:49       469
2          IAAS-g4dn.xlarge          1   2 00:07:28       448
3          IAAS-g4dn.xlarge          1   3 00:07:24       444
4            IAAS-p2.xlarge          1   1 00:19:14      1154
5            IAAS-p2.xlarge          1   2 00:19:14      1154
6            IAAS-p2.xlarge          1   3 00:18:37      1117
7           IAAS-p3.2xlarge          1   1 00:04:43       283
8           IAAS-p3.2xlarge          1   2 00:04:09       249
9           IAAS-p3.2xlarge          1   3 00:04:06       246
10 SAGEMAKER-ml-g4dn-xlarge          2   1 00:04:25       265
11 SAGEMAKER-ml-g4dn-xlarge          2   2 00:04:29       269
12 SAGEMAKER-ml-g4dn-xlarge          2   3 00:04:27       267
13 SAGEMAKER-ml-g4dn-xlarge          1   1 00:05:22       322
14 SAGEMAKER-ml-g4dn-xlarge          1   2 00:05:27       327
15 SAGEMAKER-ml-g4dn-xlarge          1   3 00:05:30       330
16  SAGEMAKER-ml-p3-2xlarge          2   1 00:01:50       110
17  SAGEMAKER-ml-p3-2xlarge          2   2 00:01:55       115
18  SAGEMAKER-ml-p3-2xlarge          2   3 00:01:51       111
19  SAGEMAKER-ml-p3-2xlarge          1   1 00:01:59       119
20  SAGEMAKER-ml-p3-2xlarge          1   2 00:01:57       117
21  SAGEMAKER-ml-p3-2xlarge          1   3 00:01:56       116
#+end_example

*** Plots for BS=1

#+name: plot-train-func
#+begin_src R :results output :exports both :noweb no-export
lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

lbl.exp.1l <- c("IaaS g4dn.xlarge", "IaaS p2.xlarge", "IaaS p3.2xlarge", "SageMaker ml.g4dn.xlarge", "SageMaker ml.p3.2xlarge")
names(lbl.exp.1l) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

plot.train.times <- function(dt, scl = "fixed")
{
  dt %>%
    ggplot(aes(x = run, y = train.sec, color = exp)) +
    geom_line() +
    scale_x_continuous(name = "Executions", breaks = seq(0,10,1)) +
    scale_y_continuous(name = "Training time (s)", limits = c(0,NA)) +
    scale_color_discrete(name = "Environment", labels = lbl.exp.1l)  +
    guides(color = guide_legend(nrow=3), byrow=FALSE) +
    theme_bw() +
    theme(legend.position = "top")
}

plot.train.times.col <- function(dt, scl = "fixed")
{
  dt %>%
    mutate(run = factor(run)) %>%
    ggplot(aes(x = exp, y = train.sec, fill = run)) +
    geom_col(position = position_dodge()) +
    scale_x_discrete(name = "Environment", labels = lbl.exp) +
    scale_y_continuous(name = "Training time (s)", limits = c(0,NA)) +
    scale_fill_discrete(name = "Executions") +
    theme_bw()
}

#+end_src

#+RESULTS: plot-train-func


#+begin_src R :results output graphics file :file training-times.png :exports both :width  450 :height 300 :noweb no-export

<<read-training-times>>

<<plot-train-func>>

train.dt %>%
  filter(batch.size == 1) %>%
  ## mutate(run = factor(run)) %>%
  plot.train.times(scl = "fixed") 

#+end_src

#+RESULTS:
[[file:./img/training-times.png]]


#+begin_src R :results output graphics file :file epoch-times-bars.png :exports both :width 450 :height 300 :noweb no-export

<<read-training-times>>

<<plot-train-func>>

train.dt %>%
  filter(batch.size == 1) %>%
  ## mutate(run = factor(run)) %>%
  plot.train.times.col(scl = "fixed") +
  theme(legend.position = c(0.9,0.8))

#+end_src

#+RESULTS:
[[file:./img/epoch-times-bars.png]]

*** Plots for BS=2

#+name: plot-train-func
#+begin_src R :results output :exports both :noweb no-export
lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

lbl.exp.1l <- c("IaaS g4dn.xlarge", "IaaS p2.xlarge", "IaaS p3.2xlarge", "SageMaker ml.g4dn.xlarge", "SageMaker ml.p3.2xlarge")
names(lbl.exp.1l) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

plot.train.times <- function(dt, scl = "fixed")
{
  dt %>%
    ggplot(aes(x = run, y = train.sec, color = exp)) +
    geom_line() +
    scale_x_continuous(name = "Executions", breaks = seq(0,10,1)) +
    scale_y_continuous(name = "Training time (s)", limits = c(0,NA)) +
    scale_color_discrete(name = "Environment", labels = lbl.exp.1l)  +
    guides(color = guide_legend(nrow=3), byrow=FALSE) +
    theme_bw() +
    theme(legend.position = "top")
}

plot.train.times.col <- function(dt, scl = "fixed")
{
  dt %>%
    mutate(run = factor(run)) %>%
    ggplot(aes(x = exp, y = train.sec, fill = run)) +
    geom_col(position = position_dodge()) +
    scale_x_discrete(name = "Environment", labels = lbl.exp) +
    scale_y_continuous(name = "Training time (s)", limits = c(0,NA)) +
    scale_fill_discrete(name = "Executions") +
    theme_bw()
}

#+end_src

#+RESULTS: plot-train-func


#+begin_src R :results output graphics file :file training-times-bs2.png :exports both :width  450 :height 300 :noweb no-export

<<read-training-times>>

<<plot-train-func>>

train.dt %>%
  filter(batch.size == 2) %>%
  ## mutate(run = factor(run)) %>%
  plot.train.times(scl = "fixed") 

#+end_src

#+RESULTS:
[[file:./img/training-times-bs2.png]]


#+begin_src R :results output graphics file :file epoch-times-bars-bs2.png :exports both :width 450 :height 300 :noweb no-export

<<read-training-times>>

<<plot-train-func>>

train.dt %>%
  filter(batch.size == 2) %>%
  ## mutate(run = factor(run)) %>%
  plot.train.times.col(scl = "fixed") +
  theme(legend.position = c(0.9,0.8))

#+end_src

#+RESULTS:
[[file:./img/epoch-times-bars-bs2.png]]

** Billed time and costs

*** Reading the data

#+name: read-billing-data
#+begin_src R :results output :exports both :noweb no-export
<<do-init>>

temp.dt <- read.table("logs/summary.csv", sep = ",", header = TRUE,
                         stringsAsFactors = TRUE)

temp.dt %>%
  rename(price = pricing,
         boot.t = boot.time.in.seconds,
         train.t = training.time.in.seconds,
         total.t = total.time.in.seconds) %>%
  group_by(instance, type, batch.size) %>%
  mutate(run = row_number()) %>% ungroup() %>%
mutate(cost = total.t / 60 * price          
         ) -> bill.dt
bill.dt
#+end_src

#+RESULTS: read-billing-data
#+begin_example
# A tibble: 21 × 10
   instance       type   region price batch…¹ boot.t train.t total.t   run  cost
   <fct>          <fct>  <fct>  <dbl>   <int>  <int>   <int>   <int> <int> <dbl>
 1 g4dn.xlarge    IaaS   us-ea… 0.526       1    474     469     943     1  8.27
 2 g4dn.xlarge    IaaS   us-ea… 0.526       1    474     448     922     2  8.08
 3 g4dn.xlarge    IaaS   us-ea… 0.526       1    474     444     918     3  8.05
 4 p3.2xlarge     IaaS   us-ea… 3.06        1    449     283     732     1 37.3 
 5 p3.2xlarge     IaaS   us-ea… 3.06        1    449     249     698     2 35.6 
 6 p3.2xlarge     IaaS   us-ea… 3.06        1    449     246     695     3 35.4 
 7 p2.xlarge      IaaS   us-ea… 0.9         1    608    1117    1725     1 25.9 
 8 p2.xlarge      IaaS   us-ea… 0.9         1    398    1154    1552     2 23.3 
 9 p2.xlarge      IaaS   us-ea… 0.9         1    436    1117    1553     3 23.3 
10 ml.g4dn.xlarge SageM… us-ea… 0.736       2    248     265     513     1  6.29
# … with 11 more rows, and abbreviated variable name ¹​batch.size
# ℹ Use `print(n = ...)` to see more rows
#+end_example


*** Plotting the billed times for both BS=1 and BS=2

#+begin_src R :results output graphics file :file billed-times.png :exports both :width 600 :height 300 :noweb no-export

<<read-billing-data>>

plot.bill.times <- function(dt)
{
  dt %>%
    mutate(run = factor(run),
           type.inst = paste0(type, "\nbatch size = ", batch.size, "\n", instance)) %>%
    ggplot(aes(x = type.inst)) +
    geom_col(aes(y = total.t, fill = run, group = run),
             position = position_dodge2(padding = 0.3)) +
    geom_col(aes(y = train.t, fill = run, group = run),
             position = position_dodge()) + 
    scale_fill_discrete(name = "Run") +
    scale_x_discrete(name = "Instance type") +
    scale_y_continuous(name = "Training time and Billable time (s)") +
    theme_bw()
}

bill.dt %>%
  plot.bill.times()

#+end_src

#+RESULTS:
[[file:./img/billed-times.png]]

*** Training time relative to the total billed time  for both BS=1 and BS=2

#+begin_src R :results output graphics file :file training-rel-billed-times.png :exports both :width 600 :height 300 :noweb no-export

<<read-billing-data>>

plot.rel.train.times <- function(dt)
{
  dt %>%
    mutate(run = factor(run),
           rel.train.t = train.t / total.t, 
           type.inst = paste0(type, "\nbatch size = ", batch.size, "\n", instance)) %>%
    ggplot(aes(x = type.inst)) +
    geom_col(aes(y = rel.train.t, fill = run, group = run),
             position = position_dodge()) +
        scale_fill_discrete(name = "Run") +
    scale_x_discrete(name = "Instance type") +
    scale_y_continuous(name = "Proportion of the billable time spent on training") +
    theme_bw()
}

bill.dt %>%
  plot.rel.train.times()

#+end_src

#+RESULTS:
[[file:./img/training-rel-billed-times.png]]


*** Plotting the total costs for both BS=1 and BS=2

#+begin_src R :results output graphics file :file total-costs.png :exports both :width 600 :height 300 :noweb no-export

<<read-billing-data>>

plot.costs <- function(dt)
{
  dt %>%
    mutate(run = factor(run),
           type.inst = paste0(type, "\nbatch size = ", batch.size, "\n", instance)) %>%
    ggplot(aes(x = type.inst, y = cost, fill = run)) +
    geom_col(position = position_dodge()) +
    scale_fill_discrete(name = "Run") +
    scale_x_discrete(name = "Instance type") +
    scale_y_continuous(name = "Total cost (USD)") +
    theme_bw()
}

bill.dt %>%
  plot.costs()

#+end_src

#+RESULTS:
[[file:./img/total-costs.png]]

** Cost in stacked bars with errorbars
*** Reading the data

#+name: read-billing-data-v2
#+begin_src R :results output :exports both :noweb no-export
<<do-init>>

bill.dt <- read.table("logs/summary.csv", sep = ",", header = TRUE,
                         stringsAsFactors = TRUE)
## head(bill.dt)
#+end_src

#+RESULTS: read-billing-data-v2

It seems that the total time is always the sum of the training time and the boot
time. But I'll take a look at the logs to make sure the data in the table is
correct.

#+name: prepare-billing-data
#+begin_src R :results output :exports both :noweb no-export
<<read-billing-data-v2>>


bill.dt %>%
  rename(price = pricing,
         boot.t = boot.time.in.seconds,
         train.t = training.time.in.seconds,
         total.t = total.time.in.seconds) %>%
  mutate(rem.t = total.t - boot.t - train.t,
         total.c = total.t * price / 3600,
         boot.c = boot.t * price / 3600,
         train.c = train.t * price / 3600,
         rem.c = rem.t * price / 3600) %>%
  data.frame() -> bill.dt


bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(total.c),
            min = min(total.c),
            max = max(total.c)) %>%
  ungroup() %>%
  mutate(metric = "Total cost") %>% data.frame -> total.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(boot.c),
            min = min(boot.c),
            max = max(boot.c)) %>%
  ungroup() %>%
  mutate(metric = "Initialization cost")  %>% data.frame -> boot.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(train.c),
            min = min(train.c),
            max = max(train.c)) %>%
  ungroup() %>%
  mutate(metric = "Training cost") %>% data.frame  -> train.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(rem.c),
            min = min(rem.c),
            max = max(rem.c)) %>%
  ungroup() %>%
  mutate(metric = "Remaining cost") %>% data.frame  -> rem.c


costs <- rbind(boot.c, train.c, rem.c, total.c)
costs$metric <- factor(costs$metric, levels = c("Initialization cost", "Training cost", "Remaining cost", "Total cost"))

glimpse(costs)
#+end_src

#+RESULTS: prepare-billing-data
: Rows: 48
: Columns: 7
: $ instance   <fct> g3.16xlarge, g3.8xlarge, g3s.xlarge, g4dn.12xlarge, g4dn.xl…
: $ type       <fct> IaaS, IaaS, IaaS, IaaS, IaaS, IaaS, SageMaker, SageMaker, S…
: $ batch.size <int> 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,…
: $ med        <dbl> 0.40533333, 0.18430000, 0.09533508, 0.29774667, 0.06925667,…
: $ min        <dbl> 0.40406667, 0.18176667, 0.09447508, 0.29774667, 0.06925667,…
: $ max        <dbl> 0.40660000, 0.18493333, 0.11992557, 0.33904000, 0.06925667,…
: $ metric     <fct> Initialization cost, Initialization cost, Initialization co…



*** Plotting

#+name: plot-costs-stacked
#+begin_src R :results output graphics file :file costs-stacked.png :exports both :width 800 :height 400 :noweb no-export

<<prepare-billing-data>>

plot.costs <- function(dt)
{
  dt %>%
    ## mutate(type.inst = paste0(type, "\nbatch size = ", batch.size, "\n", instance)) %>%
    mutate(type.inst = paste0(type, "\n", instance)) %>%
    ggplot(aes(x = type.inst, y = med, ymin = min, ymax = max, fill = metric)) +
    geom_col() +
    geom_errorbar(# aes(linetype = metric),
                  width = 0.25, show.legend = FALSE) +
    ## geom_point() +
    geom_point(aes(y = medsum), size = 1, show.legend = FALSE) +
    scale_fill_discrete(name = "") +
    scale_x_discrete(name = "Configuration") +
    scale_y_continuous(name = "Costs (USD)", breaks=seq(0, 1, 0.1)) +
    theme_bw() +
    theme(text = element_text(size = 16, family = "serif"),
          plot.margin = margin(1, 1, 1, 1, "pt"),
          axis.title.x = element_blank(),
          legend.position = c(0.9, 0.85),
          legend.title = element_blank(),
          legend.text = element_text(size = 14),
          legend.margin = margin(2, 2, 2, 2, "pt"),
          )
}

## As the error bars can't be stacked, I'll have to adjust the training
## cost to account for the stacking:
costs$min[costs$metric == "Initialization cost"] <-
  costs$min[costs$metric == "Training cost"] +
  costs$med[costs$metric == "Initialization cost"]

costs$max[costs$metric == "Initialization cost"] <-
  costs$max[costs$metric == "Training cost"] +
  costs$med[costs$metric == "Initialization cost"] 

costs$medsum[costs$metric == "Initialization cost"] <-
  costs$med[costs$metric == "Training cost"] +
  costs$med[costs$metric == "Initialization cost"]
costs$medsum[costs$metric == "Training cost"] <-
  costs$med[costs$metric == "Training cost"]

## Now we call the plot function.
costs %>%
  filter(batch.size == 1) %>%
  filter(metric %in% c("Initialization cost", "Training cost")) %>%
  plot.costs() +
  theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1))

#+end_src

#+RESULTS: plot-costs-stacked
[[file:./img/costs-stacked.png]]


#+name: plot-costs-stacked-pdf
#+begin_src R :results output graphics file :file costs-stacked.pdf :exports both :width 8 :height 4 :noweb no-export

costs %>%
  filter(batch.size == 1) %>%
  filter(metric %in% c("Initialization cost", "Training cost")) %>%
  plot.costs() -> p
p + theme(text = element_text(size = 16),
          axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
          ## legend.box.margin = margin(0, 0, 0, 0, "pt"),
          legend.margin = margin(2, 2, 2, 2, "pt"),
          legend.position = c(0.55, 0.85))

#+end_src

#+RESULTS: plot-costs-stacked-pdf
[[file:./img/costs-stacked.pdf]]

** Estimate cost for 1000 epochs (stacked bars)

#+name: prepare-billing-data-est
#+begin_src R :results output :exports both :noweb no-export
<<read-billing-data-v2>>

est.epochs <- 1000

bill.dt %>%
  rename(price = pricing,
         boot.t = boot.time.in.seconds,
         train.t = training.time.in.seconds,
         total.t = total.time.in.seconds,
         first.iter.t = first.iter.sec,
         fist.epoch.t = first.epoch.sec) %>%
  mutate(rem.t = total.t - boot.t - train.t,
         price.sec = price / 3600,
         total.c = total.t * price.sec,
         boot.c = boot.t * price.sec,
         train.c = train.t * price.sec,
         rem.c = rem.t * price.sec,
         total.iter = iter.per.task * epochs,
         est.iter = iter.per.task * est.epochs,
         est.iter.t = (train.t - first.iter.t) / (total.iter - 1),
         est.train.t = first.iter.t + est.iter.t * (est.iter - 1),
         est.train.c = est.train.t * price.sec) %>%
  data.frame() -> bill.dt


bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(total.c),
            min = min(total.c),
            max = max(total.c)) %>%
  ungroup() %>%
  mutate(metric = "Total cost") %>% data.frame -> total.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(boot.c),
            min = min(boot.c),
            max = max(boot.c)) %>%
  ungroup() %>%
  mutate(metric = "Initialization cost")  %>% data.frame -> boot.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(est.train.c),
            min = min(est.train.c),
            max = max(est.train.c)) %>%
  ungroup() %>%
  mutate(metric = "Estimated training cost") %>% data.frame  -> train.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(rem.c),
            min = min(rem.c),
            max = max(rem.c)) %>%
  ungroup() %>%
  mutate(metric = "Remaining cost") %>% data.frame  -> rem.c


costs <- rbind(boot.c, train.c, rem.c, total.c)
costs$metric <- factor(costs$metric, levels = c("Initialization cost", "Estimated training cost", "Remaining cost", "Total cost"))

glimpse(bill.dt)
glimpse(costs)
#+end_src

#+RESULTS: prepare-billing-data-est
#+begin_example
Rows: 36
Columns: 24
$ instance      <fct> g4dn.xlarge, g4dn.xlarge, g4dn.xlarge, p3.2xlarge, p3.2x…
$ type          <fct> IaaS, IaaS, IaaS, IaaS, IaaS, IaaS, IaaS, IaaS, IaaS, Sa…
$ region        <fct> us-east-1, us-east-1, us-east-1, us-east-1, us-east-1, u…
$ price         <dbl> 0.526, 0.526, 0.526, 3.060, 3.060, 3.060, 0.900, 0.900, …
$ batch.size    <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1,…
$ boot.t        <dbl> 474.000, 474.000, 474.000, 449.000, 449.000, 449.000, 60…
$ train.t       <dbl> 469.000, 448.000, 444.000, 283.000, 249.000, 246.000, 11…
$ total.t       <dbl> 943.000, 922.000, 918.000, 732.000, 698.000, 695.000, 17…
$ tasks         <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…
$ iter.per.task <int> 16, 16, 16, 16, 16, 16, 16, 16, 16, 8, 8, 8, 16, 16, 16,…
$ epochs        <int> 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, …
$ fist.epoch.t  <int> 154, 153, 153, 184, 146, 146, 273, 239, 275, 32, 30, 31,…
$ first.iter.t  <dbl> 125.117, 125.065, 125.086, 173.926, 136.521, 136.409, 18…
$ rem.t         <dbl> 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, …
$ price.sec     <dbl> 0.0001461111, 0.0001461111, 0.0001461111, 0.0008500000, …
$ total.c       <dbl> 0.1377828, 0.1347144, 0.1341300, 0.6222000, 0.5933000, 0…
$ boot.c        <dbl> 0.06925667, 0.06925667, 0.06925667, 0.38165000, 0.381650…
$ train.c       <dbl> 0.06852611, 0.06545778, 0.06487333, 0.24055000, 0.211650…
$ rem.c         <dbl> 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, …
$ total.iter    <int> 160, 160, 160, 160, 160, 160, 160, 160, 160, 80, 80, 80,…
$ est.iter      <dbl> 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, …
$ est.iter.t    <dbl> 2.1627862, 2.0310377, 2.0057484, 0.6860000, 0.7074151, 0…
$ est.train.t   <dbl> 34727.533, 32619.638, 32215.055, 11149.240, 11454.455, 1…
$ est.train.c   <dbl> 5.074078, 4.766092, 4.706977, 9.476854, 9.736287, 9.4891…
Rows: 48
Columns: 7
$ instance   <fct> g3.16xlarge, g3.8xlarge, g3s.xlarge, g4dn.12xlarge, g4dn.xl…
$ type       <fct> IaaS, IaaS, IaaS, IaaS, IaaS, IaaS, SageMaker, SageMaker, S…
$ batch.size <int> 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,…
$ med        <dbl> 0.40533333, 0.18430000, 0.09533508, 0.29774667, 0.06925667,…
$ min        <dbl> 0.40406667, 0.18176667, 0.09447508, 0.29774667, 0.06925667,…
$ max        <dbl> 0.40660000, 0.18493333, 0.11992557, 0.33904000, 0.06925667,…
$ metric     <fct> Initialization cost, Initialization cost, Initialization co…
#+end_example

#+begin_src R :results output :exports both :noweb no-export
bill.dt %>%
   mutate(est.by.real = est.train.c / train.c,
     train.by.boot = train.c / boot.c,
     est.train.by.boot = est.train.c / boot.c) -> tmp
summary(tmp$est.by.real)
summary(tmp$train.by.boot)
summary(tmp$est.train.by.boot)
#+end_src

#+RESULTS:
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:   37.83   68.51   76.51   75.55   94.61   98.60
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:  0.3895  0.5121  0.7835  0.9611  1.1401  2.8995
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:   22.24   34.80   59.26   76.36  105.44  254.58


#+name: plot-estimated-costs-stacked
#+begin_src R :results output graphics file :file estimated-costs-stacked.png :exports both :width 800 :height 400 :noweb no-export

<<prepare-billing-data-est>>
plot.costs <- function(dt)
{
  dt %>%
    ## mutate(type.inst = paste0(type, "\nbatch size = ", batch.size, "\n", instance)) %>%
    mutate(type.inst = paste0(type, "\n", instance)) %>%
    ggplot(aes(x = type.inst, y = med, ymin = min, ymax = max, fill = metric)) +
    geom_col() +
    ## geom_errorbar(aes(linetype = metric),
    ##              width = 0.25, show.legend = FALSE) +
    ## geom_point(aes(y = medsum), size = 1, show.legend = FALSE) +
    scale_fill_discrete(name = "") +
    scale_x_discrete(name = "Configuration") +
    scale_y_continuous(name = "Costs (USD)", breaks = seq(0, 100, 5)
                       ) +
    theme_bw() +
    theme(text = element_text(size = 16, family = "serif"),
          plot.margin = margin(1, 1, 1, 1, "pt"),
          axis.title.x = element_blank(),
          legend.position = c(0.85, 0.85),
          legend.title = element_blank(),
          legend.text = element_text(size = 14),
          legend.margin = margin(2, 2, 2, 2, "pt"),
          )
}

## As the error bars can't be stacked, I'll have to adjust the training
## cost to account for the stacking:
costs$min[costs$metric == "Initialization cost"] <-
  costs$min[costs$metric == "Estimated training cost"] +
  costs$med[costs$metric == "Initialization cost"]

costs$max[costs$metric == "Initialization cost"] <-
  costs$max[costs$metric == "Estimated training cost"] +
  costs$med[costs$metric == "Initialization cost"] 

costs$medsum[costs$metric == "Initialization cost"] <-
  costs$med[costs$metric == "Estimated training cost"] +
  costs$med[costs$metric == "Initialization cost"]
costs$medsum[costs$metric == "Estimated training cost"] <-
  costs$med[costs$metric == "Estimated training cost"]

## Now we call the plot function.
costs %>%
  filter(batch.size == 1) %>%
  filter(metric %in% c("Initialization cost", "Estimated training cost")) %>%
  plot.costs() +
  theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1))

#+end_src

#+RESULTS: plot-estimated-costs-stacked
[[file:./img/estimated-costs-stacked.png]]

#+name: plot-estimated-costs-stacked-pdf
#+begin_src R :results output graphics file :file estimated-costs-stacked.pdf :exports both :width 8 :height 4 :noweb no-export

costs %>%
  filter(batch.size == 1) %>%
  filter(metric %in% c("Initialization cost", "Estimated training cost")) %>%
  plot.costs() -> p
p + theme(text = element_text(size = 16),
          axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
          ## legend.box.margin = margin(0, 0, 0, 0, "pt"),
          legend.margin = margin(2, 2, 2, 2, "pt"),
          legend.position = c(0.85, 0.85))

#+end_src

#+RESULTS: plot-estimated-costs-stacked-pdf
[[file:./img/estimated-costs-stacked.pdf]]



** Cost in stacked bars with errorbars showing the first step 
*** Reading the data

#+name: read-billing-data-v3
#+begin_src R :results output :exports both :noweb no-export
<<do-init>>

bill.dt <- read.table("logs/summary.csv", sep = ",", header = TRUE,
                         stringsAsFactors = TRUE)
##head(bill.dt)
#+end_src

#+RESULTS: read-billing-data-v3

#+RESULTS: read-billing-data-v2

It seems that the total time is always the sum of the training time and the boot
time. But I'll take a look at the logs to make sure the data in the table is
correct.

#+name: prepare-billing-data-v3
#+begin_src R :results output :exports both :noweb no-export
<<read-billing-data-v3>>

## inst.sel <- c("g3.16xlarge", "g3.8xlarge", "g4dn.xlarge", "g3s.xlarge", "g4dn.12xlarge", "g5.xlarge", "p2.xlarge", "p3.2xlarge", "ml.g4dn.xlarge", "ml.p3.2xlarge")
inst.sel <- c("g4dn.xlarge", "g3s.xlarge", "g5.xlarge", "p2.xlarge", "p3.2xlarge", "ml.g4dn.xlarge", "ml.p3.2xlarge")


bill.dt %>%
  filter(instance %in% inst.sel) %>%
  rename(price = pricing,
         boot.t = boot.time.in.seconds,
         train.t = training.time.in.seconds,
         total.t = total.time.in.seconds,
         first.iter.t = first.iter.sec) %>%
  mutate(rem.t = train.t - first.iter.t, # remaining training time
         total.c = total.t * price / 3600,
         boot.c = boot.t * price / 3600,
         train.c = train.t * price / 3600,
         rem.c = rem.t * price / 3600, # remaining training cost
         first.iter.c = first.iter.t * price / 3600) %>%
  data.frame() -> bill.dt


bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(total.c),
            min = min(total.c),
            max = max(total.c)) %>%
  ungroup() %>%
  mutate(metric = "Total cost") %>% data.frame -> total.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(boot.c),
            min = min(boot.c),
            max = max(boot.c)) %>%
  ungroup() %>%
  mutate(metric = "Initialization cost")  %>% data.frame -> boot.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(train.c),
            min = min(train.c),
            max = max(train.c)) %>%
  ungroup() %>%
  mutate(metric = "Training cost") %>% data.frame  -> train.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(first.iter.c),
            min = min(first.iter.c),
            max = max(first.iter.c)) %>%
  ungroup() %>%
  mutate(metric = "First step cost") %>% data.frame  -> first.step.c


bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(rem.c),
            min = min(rem.c),
            max = max(rem.c)) %>%
  ungroup() %>%
  mutate(metric = "Remaining training cost") %>% data.frame  -> rem.c


costs <- rbind(boot.c, train.c, first.step.c, rem.c, total.c)
costs$metric <- factor(costs$metric, levels = c("Initialization cost", "Training cost", "First step cost", "Remaining training cost", "Total cost"))

## In order to print the errorbars, we need to adjust the values of the
## median, minimum and maximum to account for the stacking of the bars:
costs$medsum <- 0

costs$medsum[costs$metric == "Remaining training cost"] <-
  costs$med[costs$metric == "Remaining training cost"]

costs$medsum[costs$metric == "First step cost"] <-
  costs$med[costs$metric == "First step cost"] +
  costs$medsum[costs$metric == "Remaining training cost"]

costs$medsum[costs$metric == "Initialization cost"] <-
   costs$med[costs$metric == "Initialization cost"] +
   costs$medsum[costs$metric == "First step cost"]


costs$min[costs$metric == "First step cost"] <-
  costs$min[costs$metric == "First step cost"] +
  costs$medsum[costs$metric == "Remaining training cost"]

costs$min[costs$metric == "Initialization cost"] <-
  costs$min[costs$metric == "Initialization cost"] +
  costs$medsum[costs$metric == "First step cost"]


costs$max[costs$metric == "First step cost"] <-
  costs$max[costs$metric == "First step cost"] +
  costs$medsum[costs$metric == "Remaining training cost"]

costs$max[costs$metric == "Initialization cost"] <-
  costs$max[costs$metric == "Initialization cost"] +
  costs$medsum[costs$metric == "First step cost"]


glimpse(costs)
#+end_src

#+RESULTS: prepare-billing-data-v3
#+begin_example
Rows: 45
Columns: 8
$ instance   <fct> g3s.xlarge, g4dn.xlarge, g5.xlarge, ml.g4dn.xlarge, ml.g4dn…
$ type       <fct> IaaS, IaaS, IaaS, SageMaker, SageMaker, SageMaker, SageMake…
$ batch.size <int> 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1,…
$ med        <dbl> 0.095335075, 0.069256667, 0.098226678, 0.047840000, 0.05070…
$ min        <dbl> 0.24362977, 0.13471751, 0.15658837, 0.11319823, 0.10528889,…
$ max        <dbl> 0.26908026, 0.13471751, 0.15670769, 0.11646934, 0.10569778,…
$ metric     <fct> Initialization cost, Initialization cost, Initialization co…
$ medsum     <dbl> 0.24448977, 0.13471751, 0.15658893, 0.11483379, 0.10528889,…
#+end_example

*** Plotting

#+name: plot-costs-stacked-v2
#+begin_src R :results output graphics file :file costs-stacked-v2.png :exports both :width 400 :height 400 :noweb no-export

<<prepare-billing-data-v3>>

plot.costs <- function(dt)
{
  lbl.costs <- c("Initialization", "First step", "Remaining steps")
  names(lbl.costs) <- c("Initialization cost", "First step cost", "Remaining training cost")
  
  dt %>%
    ## mutate(type.inst = paste0(type, "\nbatch size = ", batch.size, "\n", instance)) %>%
    mutate(type.inst = paste0(type, "\n", instance)) %>%
    ggplot(aes(x = type.inst, y = med, ymin = min, ymax = max, fill = metric)) +
    geom_col() +
    geom_errorbar(# aes(linetype = metric),
                  width = 0.25, show.legend = FALSE) +
    geom_point(aes(y = medsum), size = 1, show.legend = FALSE) +
    scale_fill_discrete(name = "Costs", label = lbl.costs) +
    scale_x_discrete(name = "Configuration") +
    scale_y_continuous(name = "Cost (USD)", breaks=seq(0, 1, 0.1)) +
    theme_bw() +
    theme(text = element_text(size = 14, family = "serif"),
          plot.margin = margin(1, 1, 1, 1, "pt"),
          axis.title.x = element_blank(),
          legend.position = c(0.2, 0.85),
          ## legend.title = element_blank(),
          legend.text = element_text(size = 12),
          legend.margin = margin(2, 2, 2, 2, "pt"),
          )
}


## Now we call the plot function.
costs %>%
  filter(batch.size == 1) %>%
  filter(metric %in% c("Initialization cost", "First step cost", "Remaining training cost")) %>%
  plot.costs() +
  theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1))

#+end_src

#+RESULTS: plot-costs-stacked-v2
[[file:./img/costs-stacked-v2.png]]


#+name: plot-costs-stacked-v2-pdf
#+begin_src R :results output graphics file :file costs-stacked-v2.pdf :exports both :width 4 :height 4 :noweb no-export

costs %>%
  filter(batch.size == 1) %>%
  filter(metric %in% c("Initialization cost", "First step cost", "Remaining training cost")) %>%
  plot.costs() -> p
p + theme(text = element_text(size = 14),
          axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
          ## legend.box.margin = margin(0, 0, 0, 0, "pt"),
          legend.margin = margin(2, 2, 2, 2, "pt"),
          legend.text = element_text(size = 12),
          legend.position = c(0.22, 0.825))

#+end_src

#+RESULTS: plot-costs-stacked-v2-pdf
[[file:./img/costs-stacked-v2.pdf]]



** Estimated cost in stacked bars with errorbars showing the first step 
*** Reading the data

#+name: read-billing-data-v3
#+begin_src R :results output :exports both :noweb no-export
<<do-init>>

bill.dt <- read.table("logs/summary.csv", sep = ",", header = TRUE,
                         stringsAsFactors = TRUE)
##head(bill.dt)
#+end_src

#+RESULTS: read-billing-data-v3
#+begin_example
     instance type    region pricing batch.size boot.time.in.seconds
1 g4dn.xlarge IaaS us-east-1   0.526          1                  474
2 g4dn.xlarge IaaS us-east-1   0.526          1                  474
3 g4dn.xlarge IaaS us-east-1   0.526          1                  474
4  p3.2xlarge IaaS us-east-1   3.060          1                  449
5  p3.2xlarge IaaS us-east-1   3.060          1                  449
6  p3.2xlarge IaaS us-east-1   3.060          1                  449
  training.time.in.seconds total.time.in.seconds tasks iter.per.task epochs
1                      469                   943     1            16     10
2                      448                   922     1            16     10
3                      444                   918     1            16     10
4                      283                   732     1            16     10
5                      249                   698     1            16     10
6                      246                   695     1            16     10
  first.epoch.sec first.iter.sec number.of.nodes
1             154        125.117               1
2             153        125.065               1
3             153        125.086               1
4             184        173.926               1
5             146        136.521               1
6             146        136.409               1
#+end_example

#+RESULTS: read-billing-data-v2

It seems that the total time is always the sum of the training time and the boot
time. But I'll take a look at the logs to make sure the data in the table is
correct.


*** Computing the real costs

#+name: prepare-billing-data-v3.2
#+begin_src R :results output :exports both :noweb no-export
<<read-billing-data-v3>>

## inst.sel <- c("g3.16xlarge", "g3.8xlarge", "g4dn.xlarge", "g3s.xlarge", "g4dn.12xlarge", "g5.xlarge", "p2.xlarge", "p3.2xlarge", "ml.g4dn.xlarge", "ml.p3.2xlarge")
inst.sel <- c("g4dn.xlarge", "g3s.xlarge", "g5.xlarge", "p2.xlarge", "p3.2xlarge", "ml.g4dn.xlarge", "ml.p3.2xlarge")

bill.dt %>%
  filter(instance %in% inst.sel) %>%
  rename(price = pricing,
         boot.t = boot.time.in.seconds,
         train.t = training.time.in.seconds,
         total.t = total.time.in.seconds,
         first.iter.t = first.iter.sec) %>%
  mutate(rem.t = train.t - first.iter.t, # remaining training time
         total.c = total.t * price / 3600,
         boot.c = boot.t * price / 3600,
         train.c = train.t * price / 3600,
         rem.c = rem.t * price / 3600, # remaining training cost
         first.iter.c = first.iter.t * price / 3600) %>%
  data.frame() -> bill.dt


bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(total.c),
            min = min(total.c),
            max = max(total.c)) %>%
  ungroup() %>%
  mutate(metric = "Total cost") %>% data.frame -> total.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(boot.c),
            min = min(boot.c),
            max = max(boot.c)) %>%
  ungroup() %>%
  mutate(metric = "Initialization cost")  %>% data.frame -> boot.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(train.c),
            min = min(train.c),
            max = max(train.c)) %>%
  ungroup() %>%
  mutate(metric = "Training cost") %>% data.frame  -> train.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(first.iter.c),
            min = min(first.iter.c),
            max = max(first.iter.c)) %>%
  ungroup() %>%
  mutate(metric = "First step cost") %>% data.frame  -> first.step.c


bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(rem.c),
            min = min(rem.c),
            max = max(rem.c)) %>%
  ungroup() %>%
  mutate(metric = "Remaining training cost") %>% data.frame  -> rem.c


costs <- rbind(boot.c, train.c, first.step.c, rem.c, total.c)
costs$metric <- factor(costs$metric, levels = c("Initialization cost", "Training cost", "First step cost", "Remaining training cost", "Total cost"))

## In order to print the errorbars, we need to adjust the values of the
## median, minimum and maximum to account for the stacking of the bars:
costs$medsum <- 0

costs$medsum[costs$metric == "Remaining training cost"] <-
  costs$med[costs$metric == "Remaining training cost"]

costs$medsum[costs$metric == "First step cost"] <-
  costs$med[costs$metric == "First step cost"] +
  costs$medsum[costs$metric == "Remaining training cost"]

costs$medsum[costs$metric == "Initialization cost"] <-
   costs$med[costs$metric == "Initialization cost"] +
   costs$medsum[costs$metric == "First step cost"]


costs$min[costs$metric == "First step cost"] <-
  costs$min[costs$metric == "First step cost"] +
  costs$medsum[costs$metric == "Remaining training cost"]

costs$min[costs$metric == "Initialization cost"] <-
  costs$min[costs$metric == "Initialization cost"] +
  costs$medsum[costs$metric == "First step cost"]


costs$max[costs$metric == "First step cost"] <-
  costs$max[costs$metric == "First step cost"] +
  costs$medsum[costs$metric == "Remaining training cost"]

costs$max[costs$metric == "Initialization cost"] <-
  costs$max[costs$metric == "Initialization cost"] +
  costs$medsum[costs$metric == "First step cost"]


glimpse(costs)
#+end_src

#+RESULTS: prepare-billing-data-v3.2
#+begin_example
Rows: 45
Columns: 8
$ instance   <fct> g3s.xlarge, g4dn.xlarge, g5.xlarge, ml.g4dn.xlarge, ml.g4dn…
$ type       <fct> IaaS, IaaS, IaaS, SageMaker, SageMaker, SageMaker, SageMake…
$ batch.size <int> 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1,…
$ med        <dbl> 0.095335075, 0.069256667, 0.098226678, 0.047840000, 0.05070…
$ min        <dbl> 0.24362977, 0.13471751, 0.15658837, 0.11319823, 0.10528889,…
$ max        <dbl> 0.26908026, 0.13471751, 0.15670769, 0.11646934, 0.10569778,…
$ metric     <fct> Initialization cost, Initialization cost, Initialization co…
$ medsum     <dbl> 0.24448977, 0.13471751, 0.15658893, 0.11483379, 0.10528889,…
#+end_example


*** Plotting the real costs

#+name: plot-costs-stacked-v3
#+begin_src R :results output graphics file :file costs-stacked-v3.png :exports both :width 400 :height 400 :noweb no-export

<<prepare-billing-data-v3.2>>

plot.costs <- function(dt)
{
  lbl.costs <- c("Initialization", "First step", "Remaining steps")
  names(lbl.costs) <- c("Initialization cost", "First step cost", "Remaining training cost")
  
  dt %>%
    ## mutate(type.inst = paste0(type, "\nbatch size = ", batch.size, "\n", instance)) %>%
    mutate(type.inst = paste0(type, "\n", instance)) %>%
    ggplot(aes(x = type.inst, y = med, ymin = min, ymax = max, fill = metric)) +
    geom_col() +
    geom_errorbar(# aes(linetype = metric),
                  width = 0.25, show.legend = FALSE) +
    geom_point(aes(y = medsum), size = 1, show.legend = FALSE) +
    scale_fill_discrete(name = "Costs", labels = lbl.costs) +
    scale_x_discrete(name = "Configuration") +
    scale_y_continuous(name = "Cost (USD)", breaks=seq(0, 100, 0.05)) +
    theme_bw() +
    theme(text = element_text(size = 14, family = "serif"),
          plot.margin = margin(1, 1, 1, 1, "pt"),
          axis.title.x = element_blank(),
          legend.position = c(0.2, 0.85),
          ## legend.title = element_blank(),
          legend.text = element_text(size = 12),
          legend.margin = margin(2, 2, 2, 2, "pt"),
          )
}


## Now we call the plot function.
costs %>%
  filter(batch.size == 1) %>%
  filter(metric %in% c("Initialization cost", "First step cost", "Remaining training cost")) %>%
  plot.costs() +
  theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1))

#+end_src

#+RESULTS: plot-costs-stacked-v3
[[file:./img/costs-stacked-v3.png]]


#+name: plot-costs-stacked-v3-pdf
#+begin_src R :results output graphics file :file costs-stacked-v3.pdf :exports both :width 4 :height 4 :noweb no-export

costs %>%
  filter(batch.size == 1) %>%
  filter(metric %in% c("Initialization cost", "First step cost", "Remaining training cost")) %>%
  plot.costs() -> p
p + theme(text = element_text(size = 14),
          axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
          ## legend.box.margin = margin(0, 0, 0, 0, "pt"),
          legend.margin = margin(2, 2, 2, 2, "pt"),
          legend.text = element_text(size = 12),
          legend.position = c(0.22, 0.825))

#+end_src

#+RESULTS: plot-costs-stacked-v3-pdf
[[file:./img/costs-stacked-v3.pdf]]



*** Computing the estimations for 1000 epochs

#+name: prep-est-billing-data-1000-epochs
#+begin_src R :results output :exports both :noweb no-export
<<read-billing-data-v3>>

## inst.sel <- c("g3.16xlarge", "g3.8xlarge", "g4dn.xlarge", "g3s.xlarge", "g4dn.12xlarge", "g5.xlarge", "p2.xlarge", "p3.2xlarge", "ml.g4dn.xlarge", "ml.p3.2xlarge")
inst.sel <- c("g4dn.xlarge", "g3s.xlarge", "g5.xlarge", "p2.xlarge", "p3.2xlarge", "ml.g4dn.xlarge", "ml.p3.2xlarge")

est.epochs <- 1000

bill.dt %>%
  filter(instance %in% inst.sel) %>%
  rename(price = pricing,
         boot.t = boot.time.in.seconds,
         train.t = training.time.in.seconds,
         total.t = total.time.in.seconds,
         first.iter.t = first.iter.sec) %>%
  mutate(rem.t = train.t - first.iter.t, # remaining training time
         total.c = total.t * price / 3600,
         boot.c = boot.t * price / 3600,
         train.c = train.t * price / 3600,
         rem.c = rem.t * price / 3600, # remaining training cost
         first.iter.c = first.iter.t * price / 3600,

         # Computing the estimated times and costs:
         total.iter = iter.per.task * epochs, # number of real steps
         est.iter = iter.per.task * est.epochs, # n. of estimated steps
         est.iter.t = (train.t - first.iter.t) / (total.iter - 1),
         est.rem.t = est.iter.t * (est.iter - 1),
         est.rem.c = est.rem.t * price / 3600) %>%
  data.frame() -> bill.dt


bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(total.c),
            min = min(total.c),
            max = max(total.c)) %>%
  ungroup() %>%
  mutate(metric = "Total cost") %>% data.frame -> total.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(boot.c),
            min = min(boot.c),
            max = max(boot.c)) %>%
  ungroup() %>%
  mutate(metric = "Initialization cost")  %>% data.frame -> boot.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(train.c),
            min = min(train.c),
            max = max(train.c)) %>%
  ungroup() %>%
  mutate(metric = "Training cost") %>% data.frame  -> train.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(first.iter.c),
            min = min(first.iter.c),
            max = max(first.iter.c)) %>%
  ungroup() %>%
  mutate(metric = "First step cost") %>% data.frame  -> first.step.c


bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(est.rem.c),
            min = min(est.rem.c),
            max = max(est.rem.c)) %>%
  ungroup() %>%
  mutate(metric = "Remaining training cost") %>% data.frame  -> rem.c


costs <- rbind(boot.c, train.c, first.step.c, rem.c, total.c)
costs$metric <- factor(costs$metric, levels = c("Initialization cost", "Training cost", "First step cost", "Remaining training cost", "Total cost"))

## In order to print the errorbars, we need to adjust the values of the
## median, minimum and maximum to account for the stacking of the bars:
costs$medsum <- 0

costs$medsum[costs$metric == "Remaining training cost"] <-
  costs$med[costs$metric == "Remaining training cost"]

costs$medsum[costs$metric == "First step cost"] <-
  costs$med[costs$metric == "First step cost"] +
  costs$medsum[costs$metric == "Remaining training cost"]

costs$medsum[costs$metric == "Initialization cost"] <-
   costs$med[costs$metric == "Initialization cost"] +
   costs$medsum[costs$metric == "First step cost"]


costs$min[costs$metric == "First step cost"] <-
  costs$min[costs$metric == "First step cost"] +
  costs$medsum[costs$metric == "Remaining training cost"]

costs$min[costs$metric == "Initialization cost"] <-
  costs$min[costs$metric == "Initialization cost"] +
  costs$medsum[costs$metric == "First step cost"]


costs$max[costs$metric == "First step cost"] <-
  costs$max[costs$metric == "First step cost"] +
  costs$medsum[costs$metric == "Remaining training cost"]

costs$max[costs$metric == "Initialization cost"] <-
  costs$max[costs$metric == "Initialization cost"] +
  costs$medsum[costs$metric == "First step cost"]


glimpse(costs)
#+end_src

#+RESULTS: prep-est-billing-data-1000-epochs
#+begin_example
Rows: 45
Columns: 8
$ instance   <fct> g3s.xlarge, g4dn.xlarge, g5.xlarge, ml.g4dn.xlarge, ml.g4dn…
$ type       <fct> IaaS, IaaS, IaaS, SageMaker, SageMaker, SageMaker, SageMake…
$ batch.size <int> 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1,…
$ med        <dbl> 0.095335075, 0.069256667, 0.098226678, 0.047840000, 0.05070…
$ min        <dbl> 11.54146162, 4.83535125, 2.30600924, 6.63808542, 5.39638357…
$ max        <dbl> 11.56691211, 4.83535125, 2.30612856, 6.64135653, 5.39679246…
$ metric     <fct> Initialization cost, Initialization cost, Initialization co…
$ medsum     <dbl> 11.542322, 4.835351, 2.306010, 6.639721, 5.396384, 12.05086…
#+end_example



*** Plotting the estimations for 1000 epochs

#+name: plot-estimated-costs-stacked-v2
#+begin_src R :results output graphics file :file estimated-costs-stacked-v2.png :exports both :width 400 :height 400 :noweb no-export

<<prep-est-billing-data-1000-epochs>>

plot.costs <- function(dt)
{
  lbl.costs <- c("Initialization", "First step", "Remaining steps")
  names(lbl.costs) <- c("Initialization cost", "First step cost", "Remaining training cost")
  
  dt %>%
    ## mutate(type.inst = paste0(type, "\nbatch size = ", batch.size, "\n", instance)) %>%
    mutate(type.inst = paste0(type, "\n", instance)) %>%
    ggplot(aes(x = type.inst, y = med, ymin = min, ymax = max, fill = metric)) +
    geom_col() +
    geom_errorbar(# aes(linetype = metric),
                  width = 0.25, show.legend = FALSE) +
    geom_point(aes(y = medsum), size = 1, show.legend = FALSE) +
    scale_fill_discrete(name = "Costs", labels = lbl.costs) +
    scale_x_discrete(name = "Configuration") +
    scale_y_continuous(name = "Cost (USD)", breaks=seq(0, 100, 5)) +
    theme_bw() +
    theme(text = element_text(size = 14, family = "serif"),
          plot.margin = margin(1, 1, 1, 1, "pt"),
          axis.title.x = element_blank(),
          legend.position = c(0.2, 0.85),
          ## legend.title = element_blank(),
          legend.text = element_text(size = 12),
          legend.margin = margin(2, 2, 2, 2, "pt"),
          )
}


## Now we call the plot function.
costs %>%
  filter(batch.size == 1) %>%
  filter(metric %in% c("Initialization cost", "First step cost", "Remaining training cost")) %>%
  plot.costs() +
  theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1))

#+end_src

#+RESULTS: plot-estimated-costs-stacked-v2
[[file:./img/estimated-costs-stacked-v2.png]]



#+name: plot-estimated-costs-stacked-v2-pdf
#+begin_src R :results output graphics file :file estimated-costs-stacked-v2.pdf :exports both :width 4 :height 4 :noweb no-export
<<prep-est-billing-data-1000-epochs>>

costs %>%
  filter(batch.size == 1) %>%
  filter(metric %in% c("Initialization cost", "First step cost", "Remaining training cost")) %>%
  plot.costs() -> p
p + theme(text = element_text(size = 14),
          axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
          ## legend.box.margin = margin(0, 0, 0, 0, "pt"),
          legend.margin = margin(2, 2, 2, 2, "pt"),
          legend.text = element_text(size = 12),
          legend.position = c(0.22, 0.825))

#+end_src

#+RESULTS: plot-estimated-costs-stacked-v2-pdf
[[file:./img/estimated-costs-stacked-v2.pdf]]



*** Computing the estimations for 3000 epochs

#+name: prep-est-billing-data-3000-epochs
#+begin_src R :results output :exports both :noweb no-export
<<read-billing-data-v3>>

## inst.sel <- c("g3.16xlarge", "g3.8xlarge", "g4dn.xlarge", "g3s.xlarge", "g4dn.12xlarge", "g5.xlarge", "p2.xlarge", "p3.2xlarge", "ml.g4dn.xlarge", "ml.p3.2xlarge")
inst.sel <- c("g4dn.xlarge", "g3s.xlarge", "g5.xlarge", "p2.xlarge", "p3.2xlarge", "ml.g4dn.xlarge", "ml.p3.2xlarge")

est.epochs <- 3000

bill.dt %>%
  filter(instance %in% inst.sel) %>%
  rename(price = pricing,
         boot.t = boot.time.in.seconds,
         train.t = training.time.in.seconds,
         total.t = total.time.in.seconds,
         first.iter.t = first.iter.sec) %>%
  mutate(rem.t = train.t - first.iter.t, # remaining training time
         total.c = total.t * price / 3600,
         boot.c = boot.t * price / 3600,
         train.c = train.t * price / 3600,
         rem.c = rem.t * price / 3600, # remaining training cost
         first.iter.c = first.iter.t * price / 3600,

         # Computing the estimated times and costs:
         total.iter = iter.per.task * epochs, # number of real steps
         est.iter = iter.per.task * est.epochs, # n. of estimated steps
         est.iter.t = (train.t - first.iter.t) / (total.iter - 1),
         est.rem.t = est.iter.t * (est.iter - 1),
         est.rem.c = est.rem.t * price / 3600) %>%
  data.frame() -> bill.dt


bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(total.c),
            min = min(total.c),
            max = max(total.c)) %>%
  ungroup() %>%
  mutate(metric = "Total cost") %>% data.frame -> total.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(boot.c),
            min = min(boot.c),
            max = max(boot.c)) %>%
  ungroup() %>%
  mutate(metric = "Initialization cost")  %>% data.frame -> boot.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(train.c),
            min = min(train.c),
            max = max(train.c)) %>%
  ungroup() %>%
  mutate(metric = "Training cost") %>% data.frame  -> train.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(first.iter.c),
            min = min(first.iter.c),
            max = max(first.iter.c)) %>%
  ungroup() %>%
  mutate(metric = "First step cost") %>% data.frame  -> first.step.c


bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(est.rem.c),
            min = min(est.rem.c),
            max = max(est.rem.c)) %>%
  ungroup() %>%
  mutate(metric = "Remaining training cost") %>% data.frame  -> rem.c


costs <- rbind(boot.c, train.c, first.step.c, rem.c, total.c)
costs$metric <- factor(costs$metric, levels = c("Initialization cost", "Training cost", "First step cost", "Remaining training cost", "Total cost"))

## In order to print the errorbars, we need to adjust the values of the
## median, minimum and maximum to account for the stacking of the bars:
costs$medsum <- 0

costs$medsum[costs$metric == "Remaining training cost"] <-
  costs$med[costs$metric == "Remaining training cost"]

costs$medsum[costs$metric == "First step cost"] <-
  costs$med[costs$metric == "First step cost"] +
  costs$medsum[costs$metric == "Remaining training cost"]

costs$medsum[costs$metric == "Initialization cost"] <-
   costs$med[costs$metric == "Initialization cost"] +
   costs$medsum[costs$metric == "First step cost"]


costs$min[costs$metric == "First step cost"] <-
  costs$min[costs$metric == "First step cost"] +
  costs$medsum[costs$metric == "Remaining training cost"]

costs$min[costs$metric == "Initialization cost"] <-
  costs$min[costs$metric == "Initialization cost"] +
  costs$medsum[costs$metric == "First step cost"]


costs$max[costs$metric == "First step cost"] <-
  costs$max[costs$metric == "First step cost"] +
  costs$medsum[costs$metric == "Remaining training cost"]

costs$max[costs$metric == "Initialization cost"] <-
  costs$max[costs$metric == "Initialization cost"] +
  costs$medsum[costs$metric == "First step cost"]


glimpse(costs)
#+end_src

#+RESULTS: prep-est-billing-data-3000-epochs
#+begin_example
Rows: 45
Columns: 8
$ instance   <fct> g3s.xlarge, g4dn.xlarge, g5.xlarge, ml.g4dn.xlarge, ml.g4dn…
$ type       <fct> IaaS, IaaS, IaaS, SageMaker, SageMaker, SageMaker, SageMake…
$ batch.size <int> 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1,…
$ med        <dbl> 0.095335075, 0.069256667, 0.098226678, 0.047840000, 0.05070…
$ min        <dbl> 34.36536435, 14.33158102, 6.64827361, 19.81967569, 16.08546…
$ max        <dbl> 34.39081483, 14.33158102, 6.64839293, 19.82294680, 16.08587…
$ metric     <fct> Initialization cost, Initialization cost, Initialization co…
$ medsum     <dbl> 34.366224, 14.331581, 6.648274, 19.821311, 16.085464, 35.66…
#+end_example

#+begin_src R :results output :exports both :noweb no-export
bill.dt %>%
  mutate(est.train.c = first.iter.c + est.rem.c,
         est.by.real.c = est.train.c / train.c) %>%
  select(instance, train.c, est.train.c, est.by.real.c) -> rel.c

rel.c$est.by.real.c %>% summary()
#+end_src

#+RESULTS:
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:   112.2   214.1   253.0   232.7   286.5   295.8



*** Plotting the estimations for 3000 epochs

#+name: plot-estimated-costs-stacked-v3
#+begin_src R :results output graphics file :file estimated-costs-stacked-v3.png :exports both :width 400 :height 400 :noweb no-export

<<prep-est-billing-data-3000-epochs>>

plot.costs <- function(dt)
{
  lbl.costs <- c("Initialization", "First step", "Remaining steps")
  names(lbl.costs) <- c("Initialization cost", "First step cost", "Remaining training cost")
  
  dt %>%
    ## mutate(type.inst = paste0(type, "\nbatch size = ", batch.size, "\n", instance)) %>%
    mutate(type.inst = paste0(type, "\n", instance)) %>%
    ggplot(aes(x = type.inst, y = med, ymin = min, ymax = max, fill = metric)) +
    geom_col() +
    geom_errorbar(# aes(linetype = metric),
                  width = 0.25, show.legend = FALSE) +
    geom_point(aes(y = medsum), size = 1, show.legend = FALSE) +
    scale_fill_discrete(name = "Costs", labels = lbl.costs) +
    scale_x_discrete(name = "Configuration") +
    scale_y_continuous(name = "Cost (USD)", breaks=seq(0, 100, 5)) +
    theme_bw() +
    theme(text = element_text(size = 14, family = "serif"),
          plot.margin = margin(1, 1, 1, 1, "pt"),
          axis.title.x = element_blank(),
          legend.position = c(0.2, 0.85),
          ## legend.title = element_blank(),
          legend.text = element_text(size = 12),
          legend.margin = margin(2, 2, 2, 2, "pt"),
          )
}


## Now we call the plot function.
costs %>%
  filter(batch.size == 1) %>%
  filter(metric %in% c("Initialization cost", "First step cost", "Remaining training cost")) %>%
  plot.costs() +
  theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1))

#+end_src

#+RESULTS: plot-estimated-costs-stacked-v3
[[file:./img/estimated-costs-stacked-v3.png]]



#+name: plot-estimated-costs-stacked-v3-pdf
#+begin_src R :results output graphics file :file estimated-costs-stacked-v3.pdf :exports both :width 4 :height 4 :noweb no-export
<<prep-est-billing-data-3000-epochs>>

costs %>%
  filter(batch.size == 1) %>%
  filter(metric %in% c("Initialization cost", "First step cost", "Remaining training cost")) %>%
  plot.costs() -> p
p + theme(text = element_text(size = 14),
          axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
          ## legend.box.margin = margin(0, 0, 0, 0, "pt"),
          legend.margin = margin(2, 2, 2, 2, "pt"),
          legend.text = element_text(size = 12),
          legend.position = c(0.22, 0.825))

#+end_src

#+RESULTS: plot-estimated-costs-stacked-v3-pdf
[[file:./img/estimated-costs-stacked-v3.pdf]]


* Iteration and estimated times and costs

We will need to to the pre-processing again.since now we have executions with multiple tasks.

We will only use the data for the one-node executions with batch size 1.

To facilitate selecting the correct files we listed them in a file called ~bs1flist.txt~.

** Pre-processing

The following code extracts the iteration times.

#+begin_src shell :results output :exports both
outfile="itertimes-20220812.csv"

echo exp instance batch.size run start.date start.time iter.date iter.time epoch epoch.total iter iter.total > "$outfile"

logdir=../logs
exp=""
nexp=""
bs="1"


for f in $(cat ../logs/bs1flist.txt); do

    # '$exp' will be the identifier of the experiment, and is the same as the
    # name of the directory that contains the log file
    expaux="$(echo "$f" | cut -d '/' -f 1)"

    if [ "$expaux" != "$exp" ] ; then
	    exp="$expaux"
	    nexp=1
	else
	    nexp=$((nexp + 1))
	fi

    ## echo "$exp $expaux $nexp"

    # The instance name will be taken from '$exp' which is the name of the
    # directory that contains the logs, but, the ml instances have hyphens
    # in the directory names instead of points, so we will use ~sed~ to
    # substitute these.
    instance=$(echo "$exp" | cut -d "-" -f 2- | sed -e 's/-/\./g') 

    start="$(grep "Engine run resuming" "${logdir}/${f}" | cut -d " " -f -2)"

    ## echo "$f $exp $expaux $nexp $start" 
   
    egrep "Epoch.*Iter:" "${logdir}/${f}" | sed -e "s/\(.*\) - ignite.engine.engine.DynUNetTrainer - INFO - Epoch: \([^\/]*\)\/\([^,]*\), Iter: \([^\/]*\)\/\([^ ]*\) .*/${exp} ${instance} ${bs} ${nexp} ${start} \1 \2 \3 \4 \5/g" -e "s/,/\./g"
    
done >> $outfile

head "$outfile"
#+end_src

#+RESULTS:
#+begin_example
exp instance batch.size run start.date start.time iter.date iter.time epoch epoch.total iter iter.total
IAAS-g3s.xlarge g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:39.198 1 10 1 16
IAAS-g3s.xlarge g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:41.943 1 10 2 16
IAAS-g3s.xlarge g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:44.553 1 10 3 16
IAAS-g3s.xlarge g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:47.166 1 10 4 16
IAAS-g3s.xlarge g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:49.845 1 10 5 16
IAAS-g3s.xlarge g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:52.464 1 10 6 16
IAAS-g3s.xlarge g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:55.089 1 10 7 16
IAAS-g3s.xlarge g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:57.702 1 10 8 16
IAAS-g3s.xlarge g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:12:00.409 1 10 9 16
#+end_example

** Reading the csv data into R

#+name: read-csv-data-v2
#+begin_src R :results output :exports both :noweb no-export
## do.init=TRUE
<<do-init>>

read.timings.csv <- function(fn)
{
  read.table(fn, sep=" ", header=TRUE, stringsAsFactors=TRUE)
}
iter.dt   <- read.timings.csv("plots/itertimes-20220812.csv"    )
#epoch.dt  <- read.timings.csv("plots/epochtimes.csv"   )
#train.dt  <- read.timings.csv("plots/trainingtimes.csv")

## cat("Iterations:\n")
## head(iter.dt)
## cat("\nEpochs:\n")
## head(epoch.dt)
## cat("\nTraining:\n")
## head(train.dt)
#+end_src

#+RESULTS: read-csv-data-v2

** Computing the iteratinon timings in seconds

#+name: calc-iter-timings-all-v2
#+begin_src R :results output :exports both :noweb no-export
<<fun-conv-timings>>
<<read-csv-data-v2>>

exp.list <- c("IAAS-g3.16xlarge", "IAAS-g3.8xlarge", "IAAS-g4dn.xlarge", "IAAS-g3s.xlarge", "IAAS-g4dn.12xlarge", "IAAS-g5.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

lbl.exp <- c("IaaS\ng3.16xlarge", "IaaS\ng3.8xlarge", "IaaS\ng4dn.xlarge", "IaaS\ng3s.xlarge", "IaaS\ng4dn.12xlarge", "IaaS\ng5.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- exp.list


iter.dt %>%
  data.frame %>%
  filter(exp %in% exp.list) %>%
    mutate(start.sec = unlist(lapply(as.character(start.time), my.tsec)),
         iter.sec = unlist(lapply(as.character(iter.time), my.tsec)),
         iter.elapsed = iter.sec - start.sec) %>%
  group_by(exp, batch.size, run) %>%
  mutate(iter.dur = iter.elapsed - lag(iter.elapsed, default = 0)) %>%
  ungroup() %>%
  select(!c(ends_with(c("date","time")), "batch.size")) %>%
  data.table -> iter.dt

write.csv(iter.dt, "plots/itersecondsbs1.csv")
summary(iter.dt)
#+end_src

#+RESULTS: calc-iter-timings-all-v2
#+begin_example
                       exp                instance        run        epoch     
 IAAS-g3s.xlarge         :480   g3s.xlarge    :480   Min.   :1   Min.   : 1.0  
 IAAS-g4dn.xlarge        :480   g4dn.xlarge   :480   1st Qu.:1   1st Qu.: 3.0  
 IAAS-g5.xlarge          :480   g5.xlarge     :480   Median :2   Median : 5.5  
 IAAS-p2.xlarge          :480   ml.g4dn.xlarge:480   Mean   :2   Mean   : 5.5  
 IAAS-p3.2xlarge         :480   ml.p3.2xlarge :480   3rd Qu.:3   3rd Qu.: 8.0  
 SAGEMAKER-ml-g4dn-xlarge:480   p2.xlarge     :480   Max.   :3   Max.   :10.0  
 (Other)                 :960   (Other)       :960                             
  epoch.total      iter          iter.total      start.sec        iter.sec    
 Min.   :10   Min.   : 1.000   Min.   : 4.00   Min.   :38861   Min.   :38986  
 1st Qu.:10   1st Qu.: 4.000   1st Qu.:16.00   1st Qu.:44621   1st Qu.:44954  
 Median :10   Median : 7.500   Median :16.00   Median :56924   Median :57101  
 Mean   :10   Mean   : 7.875   Mean   :14.75   Mean   :56200   Mean   :56458  
 3rd Qu.:10   3rd Qu.:12.000   3rd Qu.:16.00   3rd Qu.:67449   3rd Qu.:67606  
 Max.   :10   Max.   :16.000   Max.   :16.00   Max.   :73955   Max.   :74071  
                                                                              
  iter.elapsed         iter.dur      
 Min.   :   5.995   Min.   :  0.388  
 1st Qu.: 132.899   1st Qu.:  0.672  
 Median : 196.381   Median :  1.989  
 Mean   : 257.753   Mean   :  2.894  
 3rd Qu.: 307.676   3rd Qu.:  2.728  
 Max.   :1154.465   Max.   :189.910
#+end_example

** Real times an estimated times for 1000 epochs
*** Computing the real (10 epoch) and estimated timings (1000 epochs) based on 10 iterations

*Do not forget to execute the code in the previous section before executing this
one!*

#+name: comp-total-t
#+begin_src R :results output :exports both :noweb no-export
n.PI = 10
est.epochs = 1000

iter.dt %>%
  group_by(exp, run) %>%
  arrange(epoch, iter) %>%
  mutate(iter.idx = row_number()) %>%
  summarize(
    instance = first(instance),
    epoch.total = first(epoch.total),
    iter.total = first(iter.total),
    real.t = max(iter.elapsed),
    first.t = min(iter.elapsed),
    PI.t = sum(iter.dur[2:(n.PI+1)])) %>%
  ungroup() %>%
  mutate(
    PI.mean.t = PI.t / n.PI,
    real.niter = epoch.total * iter.total,
    est.niter = est.epochs * iter.total,
    # Estimations based on 10 steps for 'est.epochs' epochs
    est.t = PI.mean.t * est.niter, 
    est2.t = first.t + PI.mean.t * (est.niter - 1),
    # Estimations based on 10 steps for the original # of epochs
    est.real.t = PI.mean.t * real.niter,
    est2.real.t = first.t + PI.mean.t * (real.niter - 1),
    # Estimations based on all remaining iterations (only the first step of the first step is excluded)
    r.t = (real.t - first.t),
    r.mean.t = r.t / (real.niter - 1),
    r.est.t = r.mean.t * est.niter,
    r.est2.t = first.t + r.mean.t * (est.niter - 1),
    r.est.real.t = r.mean.t * real.niter,
    r.est2.real.t = first.t + r.mean.t * (real.niter - 1)) %>%
  select(!c(epoch.total, iter.total, first.t, real.niter, est.niter, r.mean.t)) %>%
  data.table() -> est.dt

summary(est.dt)
#+end_src

#+RESULTS: comp-total-t
#+begin_example
                 exp          run             instance      real.t      
 IAAS-g3.16xlarge  : 3   Min.   :1   g3.16xlarge  : 3   Min.   : 116.1  
 IAAS-g3.8xlarge   : 3   1st Qu.:1   g3.8xlarge   : 3   1st Qu.: 163.5  
 IAAS-g3s.xlarge   : 3   Median :2   g3s.xlarge   : 3   Median : 290.1  
 IAAS-g4dn.12xlarge: 3   Mean   :2   g4dn.12xlarge: 3   Mean   : 370.4  
 IAAS-g4dn.xlarge  : 3   3rd Qu.:3   g4dn.xlarge  : 3   3rd Qu.: 446.7  
 IAAS-g5.xlarge    : 3   Max.   :3   g5.xlarge    : 3   Max.   :1154.5  
 (Other)           :12               (Other)      :12                   
      PI.t          PI.mean.t          est.t           est2.t     
 Min.   : 4.204   Min.   :0.4204   Min.   : 6726   Min.   : 6856  
 1st Qu.: 6.678   1st Qu.:0.6677   1st Qu.:10441   1st Qu.:10576  
 Median :19.881   Median :1.9881   Median :16984   Median :17043  
 Mean   :22.001   Mean   :2.2001   Mean   :26904   Mean   :26995  
 3rd Qu.:28.176   3rd Qu.:2.8176   3rd Qu.:30147   3rd Qu.:30179  
 Max.   :60.601   Max.   :6.0601   Max.   :96962   Max.   :97137  
                                                                  
   est.real.t      est2.real.t          r.t            r.est.t      
 Min.   : 67.26   Min.   : 112.0   Min.   :  76.5   Min.   :  7698  
 1st Qu.:104.41   1st Qu.: 163.3   1st Qu.: 109.5   1st Qu.: 11024  
 Median :169.84   Median : 286.0   Median : 168.8   Median : 17169  
 Mean   :269.04   Mean   : 360.0   Mean   : 277.2   Mean   : 27948  
 3rd Qu.:301.47   3rd Qu.: 422.2   3rd Qu.: 322.9   3rd Qu.: 32491  
 Max.   :969.62   Max.   :1145.1   Max.   :1006.0   Max.   :101228  
                                                                    
    r.est2.t       r.est.real.t     r.est2.real.t   
 Min.   :  7827   Min.   :  76.98   Min.   : 116.1  
 1st Qu.: 11121   1st Qu.: 110.24   1st Qu.: 163.5  
 Median : 17229   Median : 171.69   Median : 290.1  
 Mean   : 28039   Mean   : 279.48   Mean   : 370.4  
 3rd Qu.: 32571   3rd Qu.: 324.91   3rd Qu.: 446.7  
 Max.   :101370   Max.   :1012.28   Max.   :1154.5
#+end_example

*** Integrating the price data

Reading the instance prices from out summary table (~../logs/summary.csv~):
#+begin_src R :results output :exports both :noweb no-export
inst.list <- c("g3.16xlarge", "g3.8xlarge", "g4dn.xlarge", "g3s.xlarge", "g4dn.12xlarge", "g5.xlarge", "p2.xlarge", "p3.2xlarge", "ml.g4dn.xlarge", "ml.p3.2xlarge")

# This wil read the data from the csv file and filter in only the data we
# actually need:
read.table("logs/summary.csv", sep = ",", header = TRUE,
                         stringsAsFactors = TRUE) %>%
  select(instance, pricing) %>% unique() %>%
  rename("price.hour" = "pricing") %>%
  mutate(price.sec = price.hour / 3600) %>%
  filter(instance %in% inst.list) %>%
  data.table() -> price.dt

price.dt
#+end_src

#+RESULTS:
#+begin_example
          instance price.hour    price.sec
 1:    g4dn.xlarge      0.526 0.0001461111
 2:     p3.2xlarge      3.060 0.0008500000
 3:      p2.xlarge      0.900 0.0002500000
 4: ml.g4dn.xlarge      0.736 0.0002044444
 5:  ml.p3.2xlarge      3.825 0.0010625000
 6:     g3s.xlarge      0.930 0.0002583333
 7:      g5.xlarge      1.006 0.0002794444
 8:  g4dn.12xlarge      3.912 0.0010866667
 9:     g3.8xlarge      2.280 0.0006333333
10:    g3.16xlarge      4.560 0.0012666667
#+end_example


Now, we will join the estimation table (~est.dt)~ with the prices
table (~price.dt)~.
#+begin_src R :results output :exports both :noweb no-export
est.dt[price.dt, on = .(instance)] %>%
  select(exp, run, instance, real.t, PI.t, PI.mean.t, est.t, price.sec) %>%
  data.table() -> est.join.dt
glimpse(est.join.dt)
#+end_src

#+RESULTS:
#+begin_example
Rows: 30
Columns: 8
$ exp       <fct> IAAS-g4dn.xlarge, IAAS-g4dn.xlarge, IAAS-g4dn.xlarge, IAAS-p…
$ run       <int> 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, …
$ instance  <fct> g4dn.xlarge, g4dn.xlarge, g4dn.xlarge, p3.2xlarge, p3.2xlarg…
$ real.t    <dbl> 468.840, 447.736, 443.714, 283.359, 249.475, 246.010, 1154.0…
$ PI.t      <dbl> 19.301, 18.611, 18.710, 6.481, 6.659, 6.188, 60.601, 60.341,…
$ PI.mean.t <dbl> 1.9301, 1.8611, 1.8710, 0.6481, 0.6659, 0.6188, 6.0601, 6.03…
$ est.t     <dbl> 30881.6, 29777.6, 29936.0, 10369.6, 10654.4, 9900.8, 96961.6…
$ price.sec <dbl> 0.0001461111, 0.0001461111, 0.0001461111, 0.0008500000, 0.00…
#+end_example

*** Re-structuring the table to prepare for ~ggplot~             :deprecated:

*DEPRECATED! DO NOT EXECUTE!*
*Since we are plotting the real vs the estimated, we don't really need to
restructure the data.*


ggplot2/ expects the values to be in rows instead of columns, so we have to restructure our data.

#+begin_src R :results output :exports both :noweb no-export
est.join.dt %>%
  pivot_longer(cols=c(real.t, est.t), names_to = "type",
               values_to = "time")  %>%
  data.table ->  aux.plot.dt
aux.plot.dt %>% glimpse
#+end_src

#+RESULTS:
: Rows: 60
: Columns: 6
: $ exp       <fct> IAAS-g4dn.xlarge, IAAS-g4dn.xlarge, IAAS-g4dn.xlarge, IAAS-g…
: $ run       <int> 1, 1, 2, 2, 3, 3, 1, 1, 2, 2, 3, 3, 1, 1, 2, 2, 3, 3, 1, 1, …
: $ instance  <fct> g4dn.xlarge, g4dn.xlarge, g4dn.xlarge, g4dn.xlarge, g4dn.xla…
: $ price.sec <dbl> 0.0001461111, 0.0001461111, 0.0001461111, 0.0001461111, 0.00…
: $ type      <chr> "real.t", "est.t", "real.t", "est.t", "real.t", "est.t", "re…
: $ time      <dbl> 468.840, 30881.600, 447.736, 29777.600, 443.714, 29936.000, …

**** Computing the costs                                      :deprecated:

*DEPRECATED! DO NOT EXECUTE!*

#+begin_src R :results output :exports both :noweb no-export
aux.plot.dt %>%
  mutate(cost = time * price.sec) -> plot.dt
glimpse(plot.dt)
#+end_src

#+RESULTS:
: Rows: 60
: Columns: 7
: $ exp       <fct> IAAS-g4dn.xlarge, IAAS-g4dn.xlarge, IAAS-g4dn.xlarge, IAAS-g…
: $ run       <int> 1, 1, 2, 2, 3, 3, 1, 1, 2, 2, 3, 3, 1, 1, 2, 2, 3, 3, 1, 1, …
: $ instance  <fct> g4dn.xlarge, g4dn.xlarge, g4dn.xlarge, g4dn.xlarge, g4dn.xla…
: $ price.sec <dbl> 0.0001461111, 0.0001461111, 0.0001461111, 0.0001461111, 0.00…
: $ type      <chr> "real.t", "est.t", "real.t", "est.t", "real.t", "est.t", "re…
: $ time      <dbl> 468.840, 30881.600, 447.736, 29777.600, 443.714, 29936.000, …
: $ cost      <dbl> 0.06850273, 4.51214489, 0.06541920, 4.35083822, 0.06483155, …

*** Computing the costs
#+begin_src R :results output :exports both :noweb no-export
est.join.dt %>%
  mutate(real.c = real.t * price.sec,
         PI.c = PI.t * price.sec,
         PI.mean.c = PI.mean.t * price.sec,
         est.c = est.t * price.sec) %>%
  group_by(instance) %>%
  summarize(med.real.t = median(real.t),
            min.real.t = min(real.t),
            max.real.t = max(real.t),
            med.PI.t = median(PI.t),
            min.PI.t = min(PI.t),
            max.PI.t = max(PI.t),
            med.PI.mean.t = median(PI.mean.t),
            min.PI.mean.t = min(PI.mean.t),
            max.PI.mean.t = max(PI.mean.t),
            med.est.t = median(est.t),
            min.est.t = min(est.t),
            max.est.t = max(est.t),
            med.real.c = median(real.c),
            min.real.c = min(real.c),
            max.real.c = max(real.c),
            med.PI.c = median(PI.c),
            min.PI.c = min(PI.c),
            max.PI.c = max(PI.c),
            med.PI.mean.c = median(PI.mean.c),
            min.PI.mean.c = min(PI.mean.c),
            max.PI.mean.c = max(PI.mean.c),
            med.est.c = median(est.c),
            min.est.c = min(est.c),
            max.est.c = max(est.c)) %>%
    ungroup() -> plot.dt

# We need to keep only the single-GPU results, which all have 16 steps
# per epoch. Even tough the single- and multi-GPU executions ran for the
# same number of epochs, the number of steps per epoch varies, which
# causes the total number of both real and estimated steps also vary.
# As the estimations are obtained by multipliyng the total number of
# iterations by the mean time or cost of a small set of iterations,
# the resulting charts would no longer be similar.
inst.sel <- c("g4dn.xlarge", "g3s.xlarge", "g5.xlarge", "p2.xlarge", "p3.2xlarge", "ml.g4dn.xlarge", "ml.p3.2xlarge")

plot.dt %>%
  filter(instance %in% inst.sel) -> plot.dt

plot.dt %>% glimpse
#+end_src

#+RESULTS:
#+begin_example
Rows: 7
Columns: 25
$ instance      <fct> g3s.xlarge, g4dn.xlarge, g5.xlarge, ml.g4dn.xlarge, ml.p…
$ med.real.t    <dbl> 578.594, 447.736, 208.850, 327.084, 116.800, 1154.030, 2…
$ min.real.t    <dbl> 574.484, 443.714, 206.713, 322.417, 116.067, 1116.779, 2…
$ max.real.t    <dbl> 628.902, 468.840, 209.130, 330.277, 118.892, 1154.465, 2…
$ med.PI.t      <dbl> 26.623, 18.710, 4.235, 18.719, 6.675, 60.341, 6.481
$ min.PI.t      <dbl> 26.580, 18.611, 4.204, 18.704, 6.668, 57.664, 6.188
$ max.PI.t      <dbl> 27.204, 19.301, 4.680, 18.883, 6.685, 60.601, 6.659
$ med.PI.mean.t <dbl> 2.6623, 1.8710, 0.4235, 1.8719, 0.6675, 6.0341, 0.6481
$ min.PI.mean.t <dbl> 2.6580, 1.8611, 0.4204, 1.8704, 0.6668, 5.7664, 0.6188
$ max.PI.mean.t <dbl> 2.7204, 1.9301, 0.4680, 1.8883, 0.6685, 6.0601, 0.6659
$ med.est.t     <dbl> 42596.8, 29936.0, 6776.0, 29950.4, 10680.0, 96545.6, 103…
$ min.est.t     <dbl> 42528.0, 29777.6, 6726.4, 29926.4, 10668.8, 92262.4, 990…
$ max.est.t     <dbl> 43526.4, 30881.6, 7488.0, 30212.8, 10696.0, 96961.6, 106…
$ med.real.c    <dbl> 0.14947012, 0.06541920, 0.05836197, 0.06687051, 0.124100…
$ min.real.c    <dbl> 0.14840837, 0.06483155, 0.05776480, 0.06591636, 0.123321…
$ max.real.c    <dbl> 0.16246635, 0.06850273, 0.05844022, 0.06752330, 0.126322…
$ med.PI.c      <dbl> 0.006877608, 0.002733739, 0.001183447, 0.003826996, 0.00…
$ min.PI.c      <dbl> 0.006866500, 0.002719274, 0.001174784, 0.003823929, 0.00…
$ max.PI.c      <dbl> 0.007027700, 0.002820091, 0.001307800, 0.003860524, 0.00…
$ med.PI.mean.c <dbl> 0.0006877608, 0.0002733739, 0.0001183447, 0.0003826996, …
$ min.PI.mean.c <dbl> 0.0006866500, 0.0002719274, 0.0001174784, 0.0003823929, …
$ max.PI.mean.c <dbl> 0.0007027700, 0.0002820091, 0.0001307800, 0.0003860524, …
$ med.est.c     <dbl> 11.004173, 4.373982, 1.893516, 6.123193, 11.347500, 24.1…
$ min.est.c     <dbl> 10.986400, 4.350838, 1.879655, 6.118286, 11.335600, 23.0…
$ max.est.c     <dbl> 11.244320, 4.512145, 2.092480, 6.176839, 11.364500, 24.2…
#+end_example

*** Plotting

*Before running this code you must run all code blocks in the previous*
*subsections, in the order they appear.*

#+begin_src R :results output graphics file :file real-vs-estimated.png :exports both :width 800 :height 350 :noweb no-export
library(patchwork)
ps <- 2

plot.dt %>%
  ggplot(aes(x = med.real.t, y = med.real.c, color=instance)) +
  geom_point(size = ps) +
  scale_x_continuous(name="Real time for 10 epochs (s)", limits = c(0, NA)) +
  scale_y_continuous(name="Real cost for 10 epochs (USD)", limits = c(0, NA)) +
  theme_bw() +
  theme(plot.margin = margin(1, 1, 1, 1, "pt"))  -> p1

plot.dt %>%
  ggplot(aes(x = med.est.t, y = med.est.c, color=instance)) +
  geom_point(size = ps) +
  scale_x_continuous(name="Estimated time 1000 epochs (s)", limits = c(0, NA)) +
  scale_y_continuous(name="Estimated cost for 1000 epochs (USD)", limits = c(0, NA)) +
  theme_bw() +
  theme(plot.margin = margin(1, 1, 1, 15, "pt")) -> p2


p1 + p2 + plot_layout(guides = "collect", nrow = 1 , ncol = 2) &
  scale_color_discrete(name = "Instance") &
  theme(text = element_text(size = 18, family = "serif"))
#+end_src

#+RESULTS:
[[file:./img/real-vs-estimated.png]]


#+begin_src R :results output graphics file :file PI-vs-estimated.png :exports both :width 800 :height 350 :noweb no-export
library(patchwork)
ps = 2

plot.dt %>%
  ggplot(aes(x = med.PI.t, y = med.PI.c, color=instance)) +
  geom_point(size = ps) +
  scale_x_continuous(name="Real time for 10 steps (s)", limits = c(0, NA)) +
  scale_y_continuous(name="Real cost for 10 steps (s)", limits = c(0, NA)) +
  theme_bw() +
  theme(plot.margin = margin(1, 1, 1, 1, "pt")) -> p1

plot.dt %>%
  ggplot(aes(x = med.est.t, y = med.est.c, color=instance)) +
  geom_point(size = ps) +
  scale_x_continuous(name="Estimated time for 1000 epochs (USD)", limits = c(0, NA)) +
  scale_y_continuous(name="Estimated cost for 1000 epochs (USD)", limits = c(0, NA)) +
  theme_bw() +
  theme(plot.margin = margin(1, 1, 1, 15, "pt")) -> p2


p1 + p2 + plot_layout(guides = "collect", nrow = 1 , ncol = 2) &
  scale_color_discrete(name = "Instance") &
  theme(text = element_text(size = 18, family = "serif"))
#+end_src

#+RESULTS:
[[file:./img/PI-vs-estimated.png]]


#+name: plot-mean-PI-vs-estimated
#+begin_src R :results output graphics file :file meanPI-vs-estimated.png :exports both :width 800 :height 350 :noweb no-export
library(patchwork)
ps = 2

plot.dt %>%
  ggplot(aes(x = med.PI.mean.t, y = med.PI.mean.c, color = instance)) +
  geom_point(size = ps) +
  scale_x_continuous(name="Mean time for 10 steps (s)", limits = c(0, NA)) +
  scale_y_continuous(name="Mean cost for 10 steps (USD)", limits = c(0, NA)) +
  theme_bw() +
  theme(plot.margin = margin(1, 1, 1, 1, "pt")) -> p1

plot.dt %>%
  ggplot(aes(x = med.est.t, y = med.est.c, color = instance)) +
  geom_point(size = ps) +
  scale_x_continuous(name="Estimated time for 1000 epochs (s)", limits = c(0, NA)) +
  scale_y_continuous(name="Estimated cost for 1000 epochs (USD)", limits = c(0, NA)) +
  theme_bw() +
  theme(plot.margin = margin(1, 1, 1, 15, "pt")) -> p2


p1 + p2 + plot_layout(guides = "collect", nrow = 1 , ncol = 2) &
  scale_color_discrete(name = "Instance") &
  theme(text = element_text(size = 14, family = "serif"))

#+end_src

#+RESULTS: plot-mean-PI-vs-estimated
[[file:./img/meanPI-vs-estimated.png]]


#+name: plot-meanPI-vs-estimated-v2
#+begin_src R :results output graphics file :file meanPI-vs-estimated-v2.png :exports both :width 800 :height 350 :noweb no-export
library(patchwork)
ps = 3

plot.dt %>%
  ggplot(aes(x = med.PI.mean.t, y = med.est.t)) +
  geom_line(show.legend = FALSE) +
  geom_point(aes(color = instance), size = ps) +
  scale_x_continuous(name="Mean time for 10 steps (s)", limits = c(0, NA)) +
  scale_y_continuous(name="Estimated time 1000 epochs (s)", limits = c(0, NA)) +
  theme_bw() +
  theme(plot.margin = margin(1, 1, 1, 1, "pt")) -> p1

plot.dt %>%
  ggplot(aes(x = med.PI.mean.c, y = med.est.c)) +
  geom_line(show.legend = FALSE) +
  geom_point(aes(color = instance), size = ps) +
  scale_x_continuous(name="Mean cost for 10 steps (USD)", limits = c(0, NA)) +
  scale_y_continuous(name="Estimated cost for 1000 epochs (USD)", limits = c(0, NA)) +
  theme_bw() +
  theme(plot.margin = margin(1, 1, 1, 15, "pt")) -> p2


p1 + p2 + plot_layout(guides = "collect", nrow = 1 , ncol = 2) &
  scale_color_discrete(name = "Instance") &
  theme(text = element_text(size = 14, family = "serif"))
#+end_src

#+RESULTS: plot-meanPI-vs-estimated-v2
[[file:./img/meanPI-vs-estimated-v2.png]]


#+begin_src R :results output graphics file :file PI-vs-estimated-v2.png :exports both :width 800 :height 350 :noweb no-export
library(patchwork)
ps = 3

plot.dt %>%
  ggplot(aes(x = med.PI.t, y = med.est.t)) +
  geom_line(show.legend = FALSE) +
  geom_point(aes(color = instance), size = ps) +
  scale_x_continuous(name="Time for 10 steps (s)", limits = c(0, NA)) +
  scale_y_continuous(name="Estimated time 1000 epochs (s)", limits = c(0, NA)) +
  theme_bw() +
  theme(plot.margin = margin(1, 1, 1, 1, "pt")) -> p1

plot.dt %>%
  ggplot(aes(x = med.PI.c, y = med.est.c)) +
  geom_line(show.legend = FALSE) +
  geom_point(aes(color = instance), size = ps) +
  scale_x_continuous(name="Cost for 10 steps (USD)", limits = c(0, NA)) +
  scale_y_continuous(name="Estimated cost for 1000 epochs (USD)", limits = c(0, NA)) +
  theme_bw() +
  theme(plot.margin = margin(1, 1, 1, 15, "pt")) -> p2


p1 + p2 + plot_layout(guides = "collect", nrow = 1 , ncol = 2) &
  scale_color_discrete(name = "Instance") &
  theme(text = element_text(size = 18, family = "serif"))
#+end_src

#+RESULTS:
[[file:./img/PI-vs-estimated-v2.png]]

**** PDF versions

#+name: plot-mean-PI-vs-estimated-pdf
#+begin_src R :results output graphics file :file meanPI-vs-estimated.pdf :exports both :width 8 :height 3.5 :noweb no-export
<<plot-mean-PI-vs-estimated>>
#+end_src

#+RESULTS: plot-mean-PI-vs-estimated-pdf
[[file:./img/meanPI-vs-estimated.pdf]]


#+name: plot-meanPI-vs-estimated-v2-pdf
#+begin_src R :results output graphics file :file meanPI-vs-estimated-v2.pdf :exports both :width 8 :height 3.5 :noweb no-export
<<plot-meanPI-vs-estimated-v2>>
#+end_src

#+RESULTS: plot-meanPI-vs-estimated-v2-pdf
[[file:./img/meanPI-vs-estimated-v2.pdf]]


** Real times an estimated times for 3000 epochs
**** Computing the real (10 epoch) and estimated timings (3000 epochs) based on 10 iterations

*Do not forget to execute the code in [[*Reading the csv data into R][Reading the csv data into R]] and*
*[[*Computing the iteratinon timings in seconds][Computing the iteratinon timings in seconds]]  before executing this one!*

#+name: comp-total-t-v2
#+begin_src R :results output :exports both :noweb no-export
n.PI = 10
est.epochs = 3000

iter.dt %>%
  group_by(exp, run) %>%
  arrange(epoch, iter) %>%
  mutate(iter.idx = row_number()) %>%
  summarize(
    instance = first(instance),
    epoch.total = first(epoch.total),
    iter.total = first(iter.total),
    real.t = max(iter.elapsed),
    first.t = min(iter.elapsed),
    PI.t = sum(iter.dur[2:(n.PI+1)])) %>%
  ungroup() %>%
  mutate(
    PI.mean.t = PI.t / n.PI,
    real.niter = epoch.total * iter.total,
    est.niter = est.epochs * iter.total,
    # Estimations based on 10 steps for 'est.epochs' epochs
    est.t = PI.mean.t * est.niter, 
    est2.t = first.t + PI.mean.t * (est.niter - 1),
    # Estimations based on 10 steps for the original # of epochs
    est.real.t = PI.mean.t * real.niter,
    est2.real.t = first.t + PI.mean.t * (real.niter - 1),
    # Estimations based on all remaining iterations (only the first step of the first step is excluded)
    r.t = (real.t - first.t),
    r.mean.t = r.t / (real.niter - 1),
    r.est.t = r.mean.t * est.niter,
    r.est2.t = first.t + r.mean.t * (est.niter - 1),
    r.est.real.t = r.mean.t * real.niter,
    r.est2.real.t = first.t + r.mean.t * (real.niter - 1)) %>%
  select(!c(epoch.total, iter.total, first.t, real.niter, est.niter, r.mean.t)) %>%
  data.table() -> est.dt

summary(est.dt)
#+end_src

#+RESULTS: comp-total-t-v2
#+begin_example
                 exp          run             instance      real.t      
 IAAS-g3.16xlarge  : 3   Min.   :1   g3.16xlarge  : 3   Min.   : 116.1  
 IAAS-g3.8xlarge   : 3   1st Qu.:1   g3.8xlarge   : 3   1st Qu.: 163.5  
 IAAS-g3s.xlarge   : 3   Median :2   g3s.xlarge   : 3   Median : 290.1  
 IAAS-g4dn.12xlarge: 3   Mean   :2   g4dn.12xlarge: 3   Mean   : 370.4  
 IAAS-g4dn.xlarge  : 3   3rd Qu.:3   g4dn.xlarge  : 3   3rd Qu.: 446.7  
 IAAS-g5.xlarge    : 3   Max.   :3   g5.xlarge    : 3   Max.   :1154.5  
 (Other)           :12               (Other)      :12                   
      PI.t          PI.mean.t          est.t            est2.t      
 Min.   : 4.204   Min.   :0.4204   Min.   : 20179   Min.   : 20309  
 1st Qu.: 6.678   1st Qu.:0.6677   1st Qu.: 31322   1st Qu.: 31464  
 Median :19.881   Median :1.9881   Median : 50952   Median : 51011  
 Mean   :22.001   Mean   :2.2001   Mean   : 80711   Mean   : 80802  
 3rd Qu.:28.176   3rd Qu.:2.8176   3rd Qu.: 90442   3rd Qu.: 90466  
 Max.   :60.601   Max.   :6.0601   Max.   :290885   Max.   :291060  
                                                                    
   est.real.t      est2.real.t          r.t            r.est.t      
 Min.   : 67.26   Min.   : 112.0   Min.   :  76.5   Min.   : 23093  
 1st Qu.:104.41   1st Qu.: 163.3   1st Qu.: 109.5   1st Qu.: 33072  
 Median :169.84   Median : 286.0   Median : 168.8   Median : 51508  
 Mean   :269.04   Mean   : 360.0   Mean   : 277.2   Mean   : 83845  
 3rd Qu.:301.47   3rd Qu.: 422.2   3rd Qu.: 322.9   3rd Qu.: 97474  
 Max.   :969.62   Max.   :1145.1   Max.   :1006.0   Max.   :303683  
                                                                    
    r.est2.t       r.est.real.t     r.est2.real.t   
 Min.   : 23223   Min.   :  76.98   Min.   : 116.1  
 1st Qu.: 33213   1st Qu.: 110.24   1st Qu.: 163.5  
 Median : 51567   Median : 171.69   Median : 290.1  
 Mean   : 83936   Mean   : 279.48   Mean   : 370.4  
 3rd Qu.: 97525   3rd Qu.: 324.91   3rd Qu.: 446.7  
 Max.   :303826   Max.   :1012.28   Max.   :1154.5
#+end_example

**** Integrating the price data

Reading the instance prices from out summary table (~../logs/summary.csv~):

#+begin_src R :results output :exports both :noweb no-export
inst.list <- c("g3.16xlarge", "g3.8xlarge", "g4dn.xlarge", "g3s.xlarge", "g4dn.12xlarge", "g5.xlarge", "p2.xlarge", "p3.2xlarge", "ml.g4dn.xlarge", "ml.p3.2xlarge")

# This wil read the data from the csv file and filter in only the data we
# actually need:
read.table("logs/summary.csv", sep = ",", header = TRUE,
                         stringsAsFactors = TRUE) %>%
  select(instance, pricing) %>% unique() %>%
  rename("price.hour" = "pricing") %>%
  mutate(price.sec = price.hour / 3600) %>%
  filter(instance %in% inst.list) %>%
  data.table() -> price.dt

price.dt
#+end_src

#+RESULTS:
#+begin_example
          instance price.hour    price.sec
 1:    g4dn.xlarge      0.526 0.0001461111
 2:     p3.2xlarge      3.060 0.0008500000
 3:      p2.xlarge      0.900 0.0002500000
 4: ml.g4dn.xlarge      0.736 0.0002044444
 5:  ml.p3.2xlarge      3.825 0.0010625000
 6:     g3s.xlarge      0.930 0.0002583333
 7:      g5.xlarge      1.006 0.0002794444
 8:  g4dn.12xlarge      3.912 0.0010866667
 9:     g3.8xlarge      2.280 0.0006333333
10:    g3.16xlarge      4.560 0.0012666667
#+end_example


Now, we will join the estimation table (~est.dt)~ with the prices
table (~price.dt)~.
#+begin_src R :results output :exports both :noweb no-export
est.dt[price.dt, on = .(instance)] %>%
  select(exp, run, instance, real.t, PI.t, PI.mean.t, est.t, price.sec) %>%
  data.table() -> est.join.dt
glimpse(est.join.dt)
#+end_src

#+RESULTS:
#+begin_example
Rows: 30
Columns: 8
$ exp       <fct> IAAS-g4dn.xlarge, IAAS-g4dn.xlarge, IAAS-g4dn.xlarge, IAAS-p…
$ run       <int> 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, …
$ instance  <fct> g4dn.xlarge, g4dn.xlarge, g4dn.xlarge, p3.2xlarge, p3.2xlarg…
$ real.t    <dbl> 468.840, 447.736, 443.714, 283.359, 249.475, 246.010, 1154.0…
$ PI.t      <dbl> 19.301, 18.611, 18.710, 6.481, 6.659, 6.188, 60.601, 60.341,…
$ PI.mean.t <dbl> 1.9301, 1.8611, 1.8710, 0.6481, 0.6659, 0.6188, 6.0601, 6.03…
$ est.t     <dbl> 92644.8, 89332.8, 89808.0, 31108.8, 31963.2, 29702.4, 290884…
$ price.sec <dbl> 0.0001461111, 0.0001461111, 0.0001461111, 0.0008500000, 0.00…
#+end_example

**** Computing the costs

#+begin_src R :results output :exports both :noweb no-export
est.join.dt %>%
  mutate(real.c = real.t * price.sec,
         PI.c = PI.t * price.sec,
         PI.mean.c = PI.mean.t * price.sec,
         est.c = est.t * price.sec) %>%
  group_by(instance) %>%
  summarize(med.real.t = median(real.t),
            min.real.t = min(real.t),
            max.real.t = max(real.t),
            med.PI.t = median(PI.t),
            min.PI.t = min(PI.t),
            max.PI.t = max(PI.t),
            med.PI.mean.t = median(PI.mean.t),
            min.PI.mean.t = min(PI.mean.t),
            max.PI.mean.t = max(PI.mean.t),
            med.est.t = median(est.t),
            min.est.t = min(est.t),
            max.est.t = max(est.t),
            med.real.c = median(real.c),
            min.real.c = min(real.c),
            max.real.c = max(real.c),
            med.PI.c = median(PI.c),
            min.PI.c = min(PI.c),
            max.PI.c = max(PI.c),
            med.PI.mean.c = median(PI.mean.c),
            min.PI.mean.c = min(PI.mean.c),
            max.PI.mean.c = max(PI.mean.c),
            med.est.c = median(est.c),
            min.est.c = min(est.c),
            max.est.c = max(est.c)) %>%
    ungroup() -> plot.dt

# We need to keep only the single-GPU results, which all have 16 steps
# per epoch. Even tough the single- and multi-GPU executions ran for the
# same number of epochs, the number of steps per epoch varies, which
# causes the total number of both real and estimated steps also vary.
# As the estimations are obtained by multipliyng the total number of
# iterations by the mean time or cost of a small set of iterations,
# the resulting charts would no longer be similar.
inst.sel <- c("g4dn.xlarge", "g3s.xlarge", "g5.xlarge", "p2.xlarge", "p3.2xlarge", "ml.g4dn.xlarge", "ml.p3.2xlarge")

plot.dt %>%
  filter(instance %in% inst.sel) -> plot.dt

plot.dt %>% glimpse
#+end_src

#+RESULTS:
#+begin_example
Rows: 7
Columns: 25
$ instance      <fct> g3s.xlarge, g4dn.xlarge, g5.xlarge, ml.g4dn.xlarge, ml.p…
$ med.real.t    <dbl> 578.594, 447.736, 208.850, 327.084, 116.800, 1154.030, 2…
$ min.real.t    <dbl> 574.484, 443.714, 206.713, 322.417, 116.067, 1116.779, 2…
$ max.real.t    <dbl> 628.902, 468.840, 209.130, 330.277, 118.892, 1154.465, 2…
$ med.PI.t      <dbl> 26.623, 18.710, 4.235, 18.719, 6.675, 60.341, 6.481
$ min.PI.t      <dbl> 26.580, 18.611, 4.204, 18.704, 6.668, 57.664, 6.188
$ max.PI.t      <dbl> 27.204, 19.301, 4.680, 18.883, 6.685, 60.601, 6.659
$ med.PI.mean.t <dbl> 2.6623, 1.8710, 0.4235, 1.8719, 0.6675, 6.0341, 0.6481
$ min.PI.mean.t <dbl> 2.6580, 1.8611, 0.4204, 1.8704, 0.6668, 5.7664, 0.6188
$ max.PI.mean.t <dbl> 2.7204, 1.9301, 0.4680, 1.8883, 0.6685, 6.0601, 0.6659
$ med.est.t     <dbl> 127790.4, 89808.0, 20328.0, 89851.2, 32040.0, 289636.8, …
$ min.est.t     <dbl> 127584.0, 89332.8, 20179.2, 89779.2, 32006.4, 276787.2, …
$ max.est.t     <dbl> 130579.2, 92644.8, 22464.0, 90638.4, 32088.0, 290884.8, …
$ med.real.c    <dbl> 0.14947012, 0.06541920, 0.05836197, 0.06687051, 0.124100…
$ min.real.c    <dbl> 0.14840837, 0.06483155, 0.05776480, 0.06591636, 0.123321…
$ max.real.c    <dbl> 0.16246635, 0.06850273, 0.05844022, 0.06752330, 0.126322…
$ med.PI.c      <dbl> 0.006877608, 0.002733739, 0.001183447, 0.003826996, 0.00…
$ min.PI.c      <dbl> 0.006866500, 0.002719274, 0.001174784, 0.003823929, 0.00…
$ max.PI.c      <dbl> 0.007027700, 0.002820091, 0.001307800, 0.003860524, 0.00…
$ med.PI.mean.c <dbl> 0.0006877608, 0.0002733739, 0.0001183447, 0.0003826996, …
$ min.PI.mean.c <dbl> 0.0006866500, 0.0002719274, 0.0001174784, 0.0003823929, …
$ max.PI.mean.c <dbl> 0.0007027700, 0.0002820091, 0.0001307800, 0.0003860524, …
$ med.est.c     <dbl> 33.012520, 13.121947, 5.680547, 18.369579, 34.042500, 72…
$ min.est.c     <dbl> 32.959200, 13.052515, 5.638965, 18.354859, 34.006800, 69…
$ max.est.c     <dbl> 33.73296, 13.53643, 6.27744, 18.53052, 34.09350, 72.7212…
#+end_example

**** Plotting

*Before running this code you must run all code blocks in the previous*
*subsections, in the order they appear.*

#+name: plot-mean-PI-vs-estimated-v2.1
#+begin_src R :results output graphics file :file meanPI-vs-estimated-v2.1.png :exports both :width 800 :height 350 :noweb no-export
library(patchwork)
ps = 3

plot.dt %>%
  ggplot(aes(x = med.PI.mean.t, y = med.PI.mean.c, color = instance)) +
  geom_point(size = ps) +
  scale_x_continuous(name="Mean time for 10 steps (s)", limits = c(0, NA)) +
  scale_y_continuous(name="Mean cost for 10 steps (USD)", limits = c(0, NA)) +
  theme_bw() +
  theme(plot.margin = margin(1, 1, 1, 1, "pt")) -> p1

plot.dt %>%
  ggplot(aes(x = med.est.t, y = med.est.c, color = instance)) +
  geom_point(size = ps) +
  scale_x_continuous(name="Estimated time for 3000 epochs (s)", limits = c(0, NA)) +
  scale_y_continuous(name="Estimated cost for 3000 epochs (USD)", limits = c(0, NA)) +
  theme_bw() +
  theme(plot.margin = margin(1, 1, 1, 15, "pt")) -> p2


p1 + p2 + plot_layout(guides = "collect", nrow = 1 , ncol = 2) &
  scale_color_discrete(name = "Instance") &
  theme(text = element_text(size = 14, family = "serif"))

#+end_src

#+RESULTS: plot-mean-PI-vs-estimated-v2.1
[[file:./img/meanPI-vs-estimated-v2.1.png]]


#+name: plot-meanPI-vs-estimated-v2.2
#+begin_src R :results output graphics file :file meanPI-vs-estimated-v2.2.png :exports both :width 800 :height 350 :noweb no-export
library(patchwork)
ps = 3

plot.dt %>%
  ggplot(aes(x = med.PI.mean.t, y = med.est.t)) +
  geom_line(show.legend = FALSE) +
  geom_point(aes(color = instance), size = ps) +
  scale_x_continuous(name="Mean time for 10 steps (s)", limits = c(0, NA)) +
  scale_y_continuous(name="Estimated time 3000 epochs (s)", limits = c(0, NA)) +
  theme_bw() +
  theme(plot.margin = margin(1, 1, 1, 1, "pt")) -> p1

plot.dt %>%
  ggplot(aes(x = med.PI.mean.c, y = med.est.c)) +
  geom_line(show.legend = FALSE) +
  geom_point(aes(color = instance), size = ps) +
  scale_x_continuous(name="Mean cost for 10 steps (USD)", limits = c(0, NA)) +
  scale_y_continuous(name="Estimated cost for 3000 epochs (USD)", limits = c(0, NA)) +
  theme_bw() +
  theme(plot.margin = margin(1, 1, 1, 15, "pt")) -> p2


p1 + p2 + plot_layout(guides = "collect", nrow = 1 , ncol = 2) &
  scale_color_discrete(name = "Instance") &
  theme(text = element_text(size = 14, family = "serif"))
#+end_src

#+RESULTS: plot-meanPI-vs-estimated-v2.2
[[file:./img/meanPI-vs-estimated-v2.2.png]]



***** PDF versions

#+name: plot-mean-PI-vs-estimated-v2.1-pdf
#+begin_src R :results output graphics file :file meanPI-vs-estimated-v2.1.pdf :exports both :width 8 :height 3.5 :noweb no-export
<<plot-mean-PI-vs-estimated-v2.1>>
#+end_src

#+RESULTS: plot-mean-PI-vs-estimated-v2.1-pdf
[[file:./img/meanPI-vs-estimated-v2.1.pdf]]



#+name: plot-meanPI-vs-estimated-v2.2-pdf
#+begin_src R :results output graphics file :file meanPI-vs-estimated-v2.2.pdf :exports both :width 8 :height 3.5 :noweb no-export
<<plot-meanPI-vs-estimated-v2.2>>
#+end_src

#+RESULTS: plot-meanPI-vs-estimated-v2.2-pdf
[[file:./img/meanPI-vs-estimated-v2.2.pdf]]




* Scratchpad


#+begin_src R :results output :exports both :noweb no-export
iter.dt %>% filter(epoch==1 & iter==1) %>% select(exp, run, epoch, iter, iter.elapsed, iter.dur)
#+end_src

#+RESULTS:
#+begin_example
                     exp run epoch iter iter.elapsed  iter.dur
1       IAAS-g4dn.xlarge   1     1    1      125.117   125.117
2       IAAS-g4dn.xlarge   2     1    1      125.065  -343.775
3       IAAS-g4dn.xlarge   3     1    1      125.086  -322.650
4         IAAS-p2.xlarge   1     1    1      181.529  -262.185
5         IAAS-p2.xlarge   2     1    1      148.514 -1005.516
6         IAAS-p2.xlarge   3     1    1      188.090  -966.375
7  SAGEMAKER-g4dn-xlarge   1     1    1        9.497 -1107.282
8  SAGEMAKER-g4dn-xlarge   2     1    1        8.680  -255.928
9  SAGEMAKER-g4dn-xlarge   3     1    1        8.850  -259.802
10  SAGEMAKER-p3-2xlarge   1     1    1        6.290  -260.866
11  SAGEMAKER-p3-2xlarge   2     1    1       10.952   -99.409
12  SAGEMAKER-p3-2xlarge   3     1    1        7.507  -107.943
#+end_example

#+begin_src R :results output :exports both :noweb no-export
iter.dt %>% filter(epoch==1 & iter==1) %>% select(exp, run, epoch, iter, iter.elapsed, iter.dur)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 15 × 6
   exp                        run epoch  iter iter.elapsed iter.dur
   <fct>                    <int> <int> <int>        <dbl>    <dbl>
 1 IAAS-g4dn.xlarge             1     1     1       125.     125.  
 2 IAAS-g4dn.xlarge             2     1     1       125.     125.  
 3 IAAS-g4dn.xlarge             3     1     1       125.     125.  
 4 IAAS-p2.xlarge               1     1     1       182.     182.  
 5 IAAS-p2.xlarge               2     1     1       149.     149.  
 6 IAAS-p2.xlarge               3     1     1       188.     188.  
 7 IAAS-p3.2xlarge              1     1     1       174.     174.  
 8 IAAS-p3.2xlarge              2     1     1       137.     137.  
 9 IAAS-p3.2xlarge              3     1     1       136.     136.  
10 SAGEMAKER-ml-g4dn-xlarge     1     1     1         9.50     9.50
11 SAGEMAKER-ml-g4dn-xlarge     2     1     1         8.68     8.68
12 SAGEMAKER-ml-g4dn-xlarge     3     1     1         8.85     8.85
13 SAGEMAKER-ml-p3-2xlarge      1     1     1         6.29     6.29
14 SAGEMAKER-ml-p3-2xlarge      2     1     1        11.0     11.0 
15 SAGEMAKER-ml-p3-2xlarge      3     1     1         7.51     7.51
#+end_example

#+begin_src R :results output :exports both :noweb no-export
lbl.exp
#+end_src

#+RESULTS:
:           IaaS g4dn.xlarge             IaaS p2.xlarge 
:         "IAAS-g4dn.xlarge"           "IAAS-p2.xlarge" 
:            IaaS p3.2xlarge   SageMaker ml.g4dn.xlarge 
:          "IAAS-p3.2xlarge" "SAGEMAKER-ml-g4dn-xlarge" 
:    SageMaker ml.p3.2xlarge 
:  "SAGEMAKER-ml-p3-2xlarge"


#+begin_src R :results output :exports both :noweb no-export
p = data.frame()
n = 1
for(i in unique(iter.dt$exp)){
  for(r in unique(iter.dt$run)){
    p[i,r] = n
    n = n + 1
    print(paste(i, r, p[i,r]))
  }
}

#+end_src

#+RESULTS:
#+begin_example
[1] "IAAS-g3s.xlarge 1 1"
[1] "IAAS-g3s.xlarge 2 2"
[1] "IAAS-g3s.xlarge 3 3"
[1] "IAAS-g4dn.xlarge 1 4"
[1] "IAAS-g4dn.xlarge 2 5"
[1] "IAAS-g4dn.xlarge 3 6"
[1] "IAAS-g5.xlarge 1 7"
[1] "IAAS-g5.xlarge 2 8"
[1] "IAAS-g5.xlarge 3 9"
[1] "IAAS-p2.xlarge 1 10"
[1] "IAAS-p2.xlarge 2 11"
[1] "IAAS-p2.xlarge 3 12"
[1] "IAAS-p3.2xlarge 1 13"
[1] "IAAS-p3.2xlarge 2 14"
[1] "IAAS-p3.2xlarge 3 15"
[1] "SAGEMAKER-ml-g4dn-xlarge 1 16"
[1] "SAGEMAKER-ml-g4dn-xlarge 2 17"
[1] "SAGEMAKER-ml-g4dn-xlarge 3 18"
[1] "SAGEMAKER-ml-p3-2xlarge 1 19"
[1] "SAGEMAKER-ml-p3-2xlarge 2 20"
[1] "SAGEMAKER-ml-p3-2xlarge 3 21"
#+end_example

#+begin_src R :results output :exports both :noweb no-export
iter.dt %>%
  filter(batch.size == 1) %>%
  mutate(epoch = factor(epoch)) %>%
  select(exp, run, epoch, iter, iter.dur) %>%
  filter( run == 2 & exp == "SAGEMAKER-ml-g4dn-xlarge") %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  data.frame() -> dt.tmp

max(dt.tmp$iter.dur)
#+end_src

#+RESULTS:
: [1] 2.473

#+begin_src R :results output :exports both :noweb no-export
lbl.exp["SAGEMAKER-ml-g4dn-xlarge"]
#+end_src

#+RESULTS:
:    SAGEMAKER-ml-g4dn-xlarge 
: "SageMaker\nml.g4dn.xlarge"
