#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+date: 2019-09-27 sex
#+title: Graphics
#+author: Rafael Keller Tesser
#+email: rktesser@unicamp.br
#+language: en
#+tags: noexport(n) deprecated(d) ignore(i) RafaelTesser(R) EdsonBorin(E) OtatioNapoli(O) Daniel(D)
#+select_tags: export
#+exclude_tags: noexport
#+startup: overview indent
#+property: header-args:R :output-dir "./img" :session 202208-dl-cloud :datadir "./plots"
#+property: datadir "../logs"



* Pre-processing the data from the training logs

** Iteration times

The following code extracts the iteration times.

#+begin_src shell :results output :exports both
outfile="itertimes.csv"
echo exp run start.date start.time iter.date iter.time epoch epoch.total iter iter.total > "$outfile"
for d in ../logs/*/;do
	 exp="$(basename $d)"
	 nexp=1
	 for f in ${d}/*.log; do
	     #echo "$exp","$nexp"
	     #echo "$f"
	     start="$(grep "Engine run resuming" "$f" | cut -d " " -f -2)"
	     # All experiments finihed in the same day they started.
	     # So, we can ignore their dates when computing the timings
	
	     egrep "Epoch.*Iter:" "$f" | sed -e "s/\(.*\) - ignite.engine.engine.DynUNetTrainer - INFO - Epoch: \([^\/]*\)\/\([^,]*\), Iter: \([^\/]*\)\/\([^ ]*\) .*/${exp} ${nexp} ${start} \1 \2 \3 \4 \5/g" -e "s/,/\./g"
	     nexp=$((nexp + 1))
	 done
done >> "$outfile"

## cat "$outfile"
head "$outfile"
#+end_src

#+RESULTS:
#+begin_example
exp run start.date start.time iter.date iter.time epoch epoch.total iter iter.total
IAAS-g4dn.xlarge 1 2022-08-02 10:47:41.206 2022-08-02 10:49:46.323 1 10 1 16
IAAS-g4dn.xlarge 1 2022-08-02 10:47:41.206 2022-08-02 10:49:48.200 1 10 2 16
IAAS-g4dn.xlarge 1 2022-08-02 10:47:41.206 2022-08-02 10:49:50.078 1 10 3 16
IAAS-g4dn.xlarge 1 2022-08-02 10:47:41.206 2022-08-02 10:49:52.121 1 10 4 16
IAAS-g4dn.xlarge 1 2022-08-02 10:47:41.206 2022-08-02 10:49:54.010 1 10 5 16
IAAS-g4dn.xlarge 1 2022-08-02 10:47:41.206 2022-08-02 10:49:55.910 1 10 6 16
IAAS-g4dn.xlarge 1 2022-08-02 10:47:41.206 2022-08-02 10:49:57.816 1 10 7 16
IAAS-g4dn.xlarge 1 2022-08-02 10:47:41.206 2022-08-02 10:49:59.759 1 10 8 16
IAAS-g4dn.xlarge 1 2022-08-02 10:47:41.206 2022-08-02 10:50:01.708 1 10 9 16
#+end_example

** Epoch times

#+begin_src shell :results output :exports both
outfile="epochtimes.csv"
echo exp run epoch epoch.duration > "$outfile"
for d in ../logs/*/;do
	 exp="$(basename $d)"
	 nexp=1
	 for f in ${d}/*.log; do
	     #echo "$exp","$nexp"
	     #echo "$f"
	     
	     egrep "Epoch.*Complete" "$f" | cut -d " " -f 8- | sed -e "s/Epoch\[\(.*\)\] Complete. Time taken: \(.*\)/${exp} ${nexp} \1 \2/g"
	     
	     nexp=$((nexp + 1))
	 done
done >> "$outfile"

cat "$outfile"
## head "$outfile"
#+end_src

#+RESULTS:
#+begin_example
exp run epoch epoch.duration
IAAS-g4dn.xlarge 1 1 00:02:34
IAAS-g4dn.xlarge 1 2 00:00:32
IAAS-g4dn.xlarge 1 3 00:00:34
IAAS-g4dn.xlarge 1 4 00:00:36
IAAS-g4dn.xlarge 1 5 00:00:36
IAAS-g4dn.xlarge 1 6 00:00:35
IAAS-g4dn.xlarge 1 7 00:00:36
IAAS-g4dn.xlarge 1 8 00:00:35
IAAS-g4dn.xlarge 1 9 00:00:36
IAAS-g4dn.xlarge 1 10 00:00:35
IAAS-g4dn.xlarge 2 1 00:02:33
IAAS-g4dn.xlarge 2 2 00:00:31
IAAS-g4dn.xlarge 2 3 00:00:32
IAAS-g4dn.xlarge 2 4 00:00:33
IAAS-g4dn.xlarge 2 5 00:00:33
IAAS-g4dn.xlarge 2 6 00:00:33
IAAS-g4dn.xlarge 2 7 00:00:34
IAAS-g4dn.xlarge 2 8 00:00:33
IAAS-g4dn.xlarge 2 9 00:00:33
IAAS-g4dn.xlarge 2 10 00:00:33
IAAS-g4dn.xlarge 3 1 00:02:33
IAAS-g4dn.xlarge 3 2 00:00:31
IAAS-g4dn.xlarge 3 3 00:00:32
IAAS-g4dn.xlarge 3 4 00:00:32
IAAS-g4dn.xlarge 3 5 00:00:33
IAAS-g4dn.xlarge 3 6 00:00:33
IAAS-g4dn.xlarge 3 7 00:00:33
IAAS-g4dn.xlarge 3 8 00:00:32
IAAS-g4dn.xlarge 3 9 00:00:32
IAAS-g4dn.xlarge 3 10 00:00:33
IAAS-p2.xlarge 1 1 00:04:33
IAAS-p2.xlarge 1 2 00:01:38
IAAS-p2.xlarge 1 3 00:01:38
IAAS-p2.xlarge 1 4 00:01:38
IAAS-p2.xlarge 1 5 00:01:38
IAAS-p2.xlarge 1 6 00:01:38
IAAS-p2.xlarge 1 7 00:01:38
IAAS-p2.xlarge 1 8 00:01:38
IAAS-p2.xlarge 1 9 00:01:38
IAAS-p2.xlarge 1 10 00:01:38
IAAS-p2.xlarge 2 1 00:03:59
IAAS-p2.xlarge 2 2 00:01:38
IAAS-p2.xlarge 2 3 00:01:38
IAAS-p2.xlarge 2 4 00:01:39
IAAS-p2.xlarge 2 5 00:01:39
IAAS-p2.xlarge 2 6 00:01:39
IAAS-p2.xlarge 2 7 00:02:06
IAAS-p2.xlarge 2 8 00:01:41
IAAS-p2.xlarge 2 9 00:01:38
IAAS-p2.xlarge 2 10 00:01:38
IAAS-p2.xlarge 3 1 00:04:35
IAAS-p2.xlarge 3 2 00:01:34
IAAS-p2.xlarge 3 3 00:01:34
IAAS-p2.xlarge 3 4 00:01:34
IAAS-p2.xlarge 3 5 00:01:33
IAAS-p2.xlarge 3 6 00:01:34
IAAS-p2.xlarge 3 7 00:01:33
IAAS-p2.xlarge 3 8 00:01:34
IAAS-p2.xlarge 3 9 00:01:33
IAAS-p2.xlarge 3 10 00:01:33
IAAS-p3.2xlarge 1 1 00:03:04
IAAS-p3.2xlarge 1 2 00:00:11
IAAS-p3.2xlarge 1 3 00:00:11
IAAS-p3.2xlarge 1 4 00:00:11
IAAS-p3.2xlarge 1 5 00:00:11
IAAS-p3.2xlarge 1 6 00:00:11
IAAS-p3.2xlarge 1 7 00:00:11
IAAS-p3.2xlarge 1 8 00:00:11
IAAS-p3.2xlarge 1 9 00:00:11
IAAS-p3.2xlarge 1 10 00:00:11
IAAS-p3.2xlarge 2 1 00:02:26
IAAS-p3.2xlarge 2 2 00:00:12
IAAS-p3.2xlarge 2 3 00:00:11
IAAS-p3.2xlarge 2 4 00:00:11
IAAS-p3.2xlarge 2 5 00:00:11
IAAS-p3.2xlarge 2 6 00:00:12
IAAS-p3.2xlarge 2 7 00:00:11
IAAS-p3.2xlarge 2 8 00:00:11
IAAS-p3.2xlarge 2 9 00:00:11
IAAS-p3.2xlarge 2 10 00:00:11
IAAS-p3.2xlarge 3 1 00:02:26
IAAS-p3.2xlarge 3 2 00:00:11
IAAS-p3.2xlarge 3 3 00:00:11
IAAS-p3.2xlarge 3 4 00:00:11
IAAS-p3.2xlarge 3 5 00:00:11
IAAS-p3.2xlarge 3 6 00:00:11
IAAS-p3.2xlarge 3 7 00:00:11
IAAS-p3.2xlarge 3 8 00:00:11
IAAS-p3.2xlarge 3 9 00:00:11
IAAS-p3.2xlarge 3 10 00:00:11
SAGEMAKER-ml-g4dn-xlarge 1 1 00:00:32
SAGEMAKER-ml-g4dn-xlarge 1 2 00:00:26
SAGEMAKER-ml-g4dn-xlarge 1 3 00:00:26
SAGEMAKER-ml-g4dn-xlarge 1 4 00:00:26
SAGEMAKER-ml-g4dn-xlarge 1 5 00:00:26
SAGEMAKER-ml-g4dn-xlarge 1 6 00:00:26
SAGEMAKER-ml-g4dn-xlarge 1 7 00:00:26
SAGEMAKER-ml-g4dn-xlarge 1 8 00:00:26
SAGEMAKER-ml-g4dn-xlarge 1 9 00:00:26
SAGEMAKER-ml-g4dn-xlarge 1 10 00:00:27
SAGEMAKER-ml-g4dn-xlarge 2 1 00:00:30
SAGEMAKER-ml-g4dn-xlarge 2 2 00:00:26
SAGEMAKER-ml-g4dn-xlarge 2 3 00:00:26
SAGEMAKER-ml-g4dn-xlarge 2 4 00:00:26
SAGEMAKER-ml-g4dn-xlarge 2 5 00:00:26
SAGEMAKER-ml-g4dn-xlarge 2 6 00:00:26
SAGEMAKER-ml-g4dn-xlarge 2 7 00:00:27
SAGEMAKER-ml-g4dn-xlarge 2 8 00:00:27
SAGEMAKER-ml-g4dn-xlarge 2 9 00:00:27
SAGEMAKER-ml-g4dn-xlarge 2 10 00:00:27
SAGEMAKER-ml-g4dn-xlarge 3 1 00:00:31
SAGEMAKER-ml-g4dn-xlarge 3 2 00:00:26
SAGEMAKER-ml-g4dn-xlarge 3 3 00:00:27
SAGEMAKER-ml-g4dn-xlarge 3 4 00:00:26
SAGEMAKER-ml-g4dn-xlarge 3 5 00:00:26
SAGEMAKER-ml-g4dn-xlarge 3 6 00:00:26
SAGEMAKER-ml-g4dn-xlarge 3 7 00:00:26
SAGEMAKER-ml-g4dn-xlarge 3 8 00:00:26
SAGEMAKER-ml-g4dn-xlarge 3 9 00:00:26
SAGEMAKER-ml-g4dn-xlarge 3 10 00:00:27
SAGEMAKER-ml-p3-2xlarge 1 1 00:00:15
SAGEMAKER-ml-p3-2xlarge 1 2 00:00:10
SAGEMAKER-ml-p3-2xlarge 1 3 00:00:11
SAGEMAKER-ml-p3-2xlarge 1 4 00:00:11
SAGEMAKER-ml-p3-2xlarge 1 5 00:00:10
SAGEMAKER-ml-p3-2xlarge 1 6 00:00:11
SAGEMAKER-ml-p3-2xlarge 1 7 00:00:11
SAGEMAKER-ml-p3-2xlarge 1 8 00:00:11
SAGEMAKER-ml-p3-2xlarge 1 9 00:00:11
SAGEMAKER-ml-p3-2xlarge 1 10 00:00:11
SAGEMAKER-ml-p3-2xlarge 2 1 00:00:20
SAGEMAKER-ml-p3-2xlarge 2 2 00:00:11
SAGEMAKER-ml-p3-2xlarge 2 3 00:00:11
SAGEMAKER-ml-p3-2xlarge 2 4 00:00:11
SAGEMAKER-ml-p3-2xlarge 2 5 00:00:11
SAGEMAKER-ml-p3-2xlarge 2 6 00:00:11
SAGEMAKER-ml-p3-2xlarge 2 7 00:00:11
SAGEMAKER-ml-p3-2xlarge 2 8 00:00:10
SAGEMAKER-ml-p3-2xlarge 2 9 00:00:11
SAGEMAKER-ml-p3-2xlarge 2 10 00:00:11
SAGEMAKER-ml-p3-2xlarge 3 1 00:00:16
SAGEMAKER-ml-p3-2xlarge 3 2 00:00:11
SAGEMAKER-ml-p3-2xlarge 3 3 00:00:10
SAGEMAKER-ml-p3-2xlarge 3 4 00:00:10
SAGEMAKER-ml-p3-2xlarge 3 5 00:00:11
SAGEMAKER-ml-p3-2xlarge 3 6 00:00:11
SAGEMAKER-ml-p3-2xlarge 3 7 00:00:10
SAGEMAKER-ml-p3-2xlarge 3 8 00:00:10
SAGEMAKER-ml-p3-2xlarge 3 9 00:00:11
SAGEMAKER-ml-p3-2xlarge 3 10 00:00:11
#+end_example

** Total training times

#+begin_src shell :results output :exports both
outfile="trainingtimes.csv"
echo exp run duration > "$outfile"
for d in ../logs/*/;do
	 exp="$(basename $d)"
	 nexp=1
	 for f in ${d}/*.log; do
	     
	     egrep "Engine run complete.*" "$f" | cut -d " " -f 13 | sed -e "s/\(.*\)/${exp} ${nexp} \1/g"
	     
	     nexp=$((nexp + 1))
	 done
done >> "$outfile"
cat "$outfile"
#+end_src

#+RESULTS:
#+begin_example
exp run duration
IAAS-g4dn.xlarge 1 00:07:49
IAAS-g4dn.xlarge 2 00:07:28
IAAS-g4dn.xlarge 3 00:07:24
IAAS-p2.xlarge 1 00:19:14
IAAS-p2.xlarge 2 00:19:14
IAAS-p2.xlarge 3 00:18:37
IAAS-p3.2xlarge 1 00:04:43
IAAS-p3.2xlarge 2 00:04:09
IAAS-p3.2xlarge 3 00:04:06
SAGEMAKER-ml-g4dn-xlarge 1 00:04:25
SAGEMAKER-ml-g4dn-xlarge 2 00:04:29
SAGEMAKER-ml-g4dn-xlarge 3 00:04:27
SAGEMAKER-ml-p3-2xlarge 1 00:01:50
SAGEMAKER-ml-p3-2xlarge 2 00:01:55
SAGEMAKER-ml-p3-2xlarge 3 00:01:51
#+end_example


* Loading R packages

#+name: load-r-packages
#+begin_src R :results output :exports both :noweb no-export
suppressMessages(library(data.table))
suppressMessages(library(tidyverse))
options(crayon.enabled = FALSE)
options(dplyr.sumarise.inform = FALSE)
options(tidyverse.quiet = TRUE)
options(dplyr.summarise.inform = FALSE)
#+end_src

#+RESULTS: load-r-packages


* Reading the data into R

#+name: do-init
#+begin_src R :results output :exports both :noweb no-export
func.init <- function()
{
  <<load-r-packages>>
}

if(!exists("do.init")){
  do.init = TRUE
}

if(do.init == TRUE){
  func.init()
  do.init = FALSE
}
#+end_src

#+RESULTS: do-init

#+name: read-csv-data
#+begin_src R :results output :exports both :noweb no-export
## do.init=TRUE
<<do-init>>

read.timings.csv <- function(fn)
{
  read.table(fn, sep=" ", header=TRUE, stringsAsFactors=TRUE)
}
iter.dt   <- read.timings.csv("plots/itertimes.csv"    )
epoch.dt  <- read.timings.csv("plots/epochtimes.csv"   )
train.dt  <- read.timings.csv("plots/trainingtimes.csv")

# glimpse(iter.dt)
# glimpse(epoch.dt)
# glimpse(train.dt)
#+end_src

#+RESULTS: read-csv-data

#+RESULTS:


* Helper functions

I'll need to subtract timings in the format HH:MM:SS.mmm. For this purpose, I'll
implement functions to convert these timings to seconds or miliseconds, as shown
in the code block below.

#+name: fun-conv-timings
#+begin_src R :results output :exports both :noweb no-export
## t = "1:01:01.500"
my.tsec <- function(t.str)
{
t.spstr = unlist(strsplit(t.str, ":"))
t.spn = as.numeric(t.spstr)
t.sec = (t.spn[1] * 60 + t.spn[2]) * 60 + t.spn[3]
t.sec
}
my.tmsec <- function(t.str)
{
  my.tsec(t.str) * 1000
}

## secs = my.tsec(t)
## msecs = my.tmsec(t)

## secs
## msecs

#+end_src


* Plots

** Iteration times
*** Computing the duration of each iteration

As all training sessions finished in the same day as they started, it is safe to
ignore the dates in the log files.

Next, we will create columns for the converted timings from hour format to seconds,
the elapsed time at the end of each iteration, and their duration.

#+name: calc-iter-timings
#+begin_src R :results output :exports both :noweb no-export
<<fun-conv-timings>>

<<read-csv-data>>

iter.dt %>%
  data.frame %>%
  mutate(start.sec = unlist(lapply(as.character(start.time), my.tsec)),
         iter.sec = unlist(lapply(as.character(iter.time), my.tsec)),
         iter.elapsed = iter.sec - start.sec) %>%
  group_by(exp, run) %>%
  mutate(iter.dur = iter.elapsed - lag(iter.elapsed, default = 0)) %>%
  ungroup() -> iter.dt
  head(iter.dt)
#+end_src

#+RESULTS: calc-iter-timings
#+begin_example
# A tibble: 6 × 14
  exp            run start…¹ start…² iter.…³ iter.…⁴ epoch epoch…⁵  iter iter.…⁶
  <fct>        <int> <fct>   <fct>   <fct>   <fct>   <int>   <int> <int>   <int>
1 IAAS-g4dn.x…     1 2022-0… 10:47:… 2022-0… 10:49:…     1      10     1      16
2 IAAS-g4dn.x…     1 2022-0… 10:47:… 2022-0… 10:49:…     1      10     2      16
3 IAAS-g4dn.x…     1 2022-0… 10:47:… 2022-0… 10:49:…     1      10     3      16
4 IAAS-g4dn.x…     1 2022-0… 10:47:… 2022-0… 10:49:…     1      10     4      16
5 IAAS-g4dn.x…     1 2022-0… 10:47:… 2022-0… 10:49:…     1      10     5      16
6 IAAS-g4dn.x…     1 2022-0… 10:47:… 2022-0… 10:49:…     1      10     6      16
# … with 4 more variables: start.sec <dbl>, iter.sec <dbl>, iter.elapsed <dbl>,
#   iter.dur <dbl>, and abbreviated variable names ¹​start.date, ²​start.time,
#   ³​iter.date, ⁴​iter.time, ⁵​epoch.total, ⁶​iter.total
# ℹ Use `colnames()` to see all variable names
#+end_example

#+begin_src R :results output :exports both :noweb no-export
write.csv(iter.dt, "iteration-times-processed.csv")
#+end_src

#+RESULTS:



*** Plotting

Before running this code, you should run the code in

#+begin_src R :results output graphics file :file iteration-times.png :exports both :width 600 :height 600 :noweb no-export

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

plot.iter.times <- function(dt, scl="fixed")
{
  dt %>%
    ggplot(aes(x = iter, y = iter.dur, group = epoch, color=epoch)) +
    geom_line() +
    facet_grid(cols = vars(run), rows = vars(exp), scales=scl,
               labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Iteration number") +
    scale_y_continuous(name = "Iteration time (s)") +
    scale_color_discrete(name = "Epoch")
}

iter.dt %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times() +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/iteration-times.png]]


Plot without the first iteration of the first epoch:

#+begin_src R :results output graphics file :file iteration-times-no-1st-iter.png :exports both :width 600 :height 600 :noweb no-export
iter.dt %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times() +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/iteration-times-no-1st-iter.png]]


Plot with free /y/ scale:

#+begin_src R :results output graphics file :file iteration-times-no-1st-iter-freescale.png :exports both :width 600 :height 600 :noweb no-export
iter.dt %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times(scl = "free_y") +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/iteration-times-no-1st-iter-freescale.png]]


Plotting only a few executions:
#+begin_src R :results output graphics file :file iteration-times-few-runs.png  :exports both :width 600 :height 400 :noweb no-export
plot.iter.times.v2 <- function(dt, scl = "fixed")
{
  dt %>%
    ggplot(aes(x = iter, y = iter.dur, group = epoch, color=epoch)) +
    geom_line() +
    facet_grid(cols = vars(exp), scales=scl,
               labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Iteration number") +
    scale_y_continuous(name = "Iteration time (s)") +
    scale_color_discrete(name = "Epoch")
}

# exps <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")
exps <- c("IAAS-g4dn.xlarge", "SAGEMAKER-ml-p3-2xlarge")

iter.dt %>%
  #filter(!(epoch == 1 & iter == 1) 1) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v2(scl = "free") +
  theme_bw() 
  
#+end_src

#+RESULTS:
[[file:./img/iteration-times-few-runs.png]]

Plotting only a few executions:
#+begin_src R :results output graphics file :file iteration-times-single-iaasg4dnxlarge.png  :exports both :width 600 :height 400 :noweb no-export
plot.iter.times.v3 <- function(dt, scl = "fixed")
{
  dt %>%
    ggplot(aes(x = iter, y = iter.dur, group = epoch, color=epoch)) +
    geom_line() +
    ## facet_grid(cols = vars(exp), scales=scl,
    ##            labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Iteration number") +
    scale_y_continuous(name = "Iteration time (s)") +
    scale_color_discrete(name = "Epoch")
}

# exps <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")
exps <- c("IAAS-g4dn.xlarge")

iter.dt %>%
  #filter(!(epoch == 1 & iter == 1) 1) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw() -> p1

iter.dt %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw() +
  theme(
    legend.position = "none"
    ) -> p2

p1 + annotation_custom(ggplotGrob(p2), xmin=3, xmax=16,
                       ymin = 10, ymax = 125)
#+end_src

#+RESULTS:
[[file:./img/iteration-times-single-iaasg4dnxlarge.png]]

#+begin_src R :results output graphics file :file iteration-times-single-sm-mlp3.2xlarge.png  :exports both :width 600 :height 400 :noweb no-export

# exps <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")
exps <- c("SAGEMAKER-ml-p3-2xlarge")

iter.dt %>%
  #filter(!(epoch == 1 & iter == 1) 1) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw()

iter.dt %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw() +
  theme(
    legend.position = "none"
    ) -> p2

p1 + annotation_custom(ggplotGrob(p2), xmin=3, xmax=16,
                       ymin = 10, ymax = 125)

#+end_src

#+RESULTS:
[[file:./img/iteration-times-single-sm-mlp3.2xlarge.png]]


** Epoch times

** Training times

* Scratchpad


#+begin_src R :results output :exports both :noweb no-export
iter.dt %>% filter(epoch==1 & iter==1) %>% select(exp, run, epoch, iter, iter.elapsed, iter.dur)
#+end_src

#+RESULTS:
#+begin_example
                     exp run epoch iter iter.elapsed  iter.dur
1       IAAS-g4dn.xlarge   1     1    1      125.117   125.117
2       IAAS-g4dn.xlarge   2     1    1      125.065  -343.775
3       IAAS-g4dn.xlarge   3     1    1      125.086  -322.650
4         IAAS-p2.xlarge   1     1    1      181.529  -262.185
5         IAAS-p2.xlarge   2     1    1      148.514 -1005.516
6         IAAS-p2.xlarge   3     1    1      188.090  -966.375
7  SAGEMAKER-g4dn-xlarge   1     1    1        9.497 -1107.282
8  SAGEMAKER-g4dn-xlarge   2     1    1        8.680  -255.928
9  SAGEMAKER-g4dn-xlarge   3     1    1        8.850  -259.802
10  SAGEMAKER-p3-2xlarge   1     1    1        6.290  -260.866
11  SAGEMAKER-p3-2xlarge   2     1    1       10.952   -99.409
12  SAGEMAKER-p3-2xlarge   3     1    1        7.507  -107.943
#+end_example

#+begin_src R :results output :exports both :noweb no-export
iter.dt %>% filter(epoch==1 & iter==1) %>% select(exp, run, epoch, iter, iter.elapsed, iter.dur)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 15 × 6
   exp                        run epoch  iter iter.elapsed iter.dur
   <fct>                    <int> <int> <int>        <dbl>    <dbl>
 1 IAAS-g4dn.xlarge             1     1     1       125.     125.  
 2 IAAS-g4dn.xlarge             2     1     1       125.     125.  
 3 IAAS-g4dn.xlarge             3     1     1       125.     125.  
 4 IAAS-p2.xlarge               1     1     1       182.     182.  
 5 IAAS-p2.xlarge               2     1     1       149.     149.  
 6 IAAS-p2.xlarge               3     1     1       188.     188.  
 7 IAAS-p3.2xlarge              1     1     1       174.     174.  
 8 IAAS-p3.2xlarge              2     1     1       137.     137.  
 9 IAAS-p3.2xlarge              3     1     1       136.     136.  
10 SAGEMAKER-ml-g4dn-xlarge     1     1     1         9.50     9.50
11 SAGEMAKER-ml-g4dn-xlarge     2     1     1         8.68     8.68
12 SAGEMAKER-ml-g4dn-xlarge     3     1     1         8.85     8.85
13 SAGEMAKER-ml-p3-2xlarge      1     1     1         6.29     6.29
14 SAGEMAKER-ml-p3-2xlarge      2     1     1        11.0     11.0 
15 SAGEMAKER-ml-p3-2xlarge      3     1     1         7.51     7.51
#+end_example

#+begin_src R :results output :exports both :noweb no-export
lbl.exp
#+end_src

#+RESULTS:
:           IaaS g4dn.xlarge             IaaS p2.xlarge 
:         "IAAS-g4dn.xlarge"           "IAAS-p2.xlarge" 
:            IaaS p3.2xlarge   SageMaker ml.g4dn.xlarge 
:          "IAAS-p3.2xlarge" "SAGEMAKER-ml-g4dn-xlarge" 
:    SageMaker ml.p3.2xlarge 
:  "SAGEMAKER-ml-p3-2xlarge"
