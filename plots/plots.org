#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+date: 2019-09-27 sex
#+title: Graphics
#+author: Rafael Keller Tesser
#+email: rktesser@unicamp.br
#+language: en
#+tags: noexport(n) deprecated(d) ignore(i) RafaelTesser(R) EdsonBorin(E) OtatioNapoli(O) Daniel(D)
#+select_tags: export
#+exclude_tags: noexport
#+startup: overview indent
#+property: header-args:R :output-dir "./img" :session 202208-dl-cloud :datadir "./plots"
#+property: datadir "../logs"

* Pre-processing the data from the training logs

** Iteration times

The following code extracts the iteration times.

#+begin_src shell :results output :exports both
outfile="itertimes.csv"
echo exp  batch.size run start.date start.time iter.date iter.time epoch epoch.total iter iter.total > "$outfile"
for d in ../logs/*/;do
	 exp="$(basename $d)"

	 nexpbs1=0
	 nexpbs2=0
	 
	 for f in ${d}/*.log; do
	     #echo "$exp","$nexp"
	     #echo "$f"
	     start="$(grep "Engine run resuming" "$f" | cut -d " " -f -2)"
	     # All experiments finihed in the same day they started.
	     # So, we can ignore their dates when computing the timings

	     if grep -q 16/16 $f; then
		 bs=1;
		 nexpbs1=$((nexpbs1 + 1))
		 nexp=$nexpbs1
	     else
		 bs=2;
		 nexpbs2=$((nexpbs2 + 1))
		 nexp=$nexpbs2
	     fi
	     
	     egrep "Epoch.*Iter:" "$f" | sed -e "s/\(.*\) - ignite.engine.engine.DynUNetTrainer - INFO - Epoch: \([^\/]*\)\/\([^,]*\), Iter: \([^\/]*\)\/\([^ ]*\) .*/${exp} ${bs} ${nexp} ${start} \1 \2 \3 \4 \5/g" -e "s/,/\./g"
	     
	 done
done >> "$outfile"

## cat "$outfile"
head "$outfile"
#+end_src

#+RESULTS:
#+begin_example
exp batch.size run start.date start.time iter.date iter.time epoch epoch.total iter iter.total
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:39.198 1 10 1 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:41.943 1 10 2 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:44.553 1 10 3 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:47.166 1 10 4 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:49.845 1 10 5 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:52.464 1 10 6 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:55.089 1 10 7 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:57.702 1 10 8 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:12:00.409 1 10 9 16
#+end_example

** Epoch times

#+begin_src shell :results output :exports both
outfile="epochtimes.csv"
echo exp batch.size run epoch epoch.duration > "$outfile"
for d in ../logs/*/;do
	 exp="$(basename $d)"

	 nexpbs1=0
	 nexpbs2=0

	 for f in ${d}/*.log; do
	     #echo "$exp","$nexp"
	     #echo "$f"

	     if grep -q 16/16 $f; then
		 bs=1;
		 nexpbs1=$((nexpbs1 + 1))
		 nexp=$nexpbs1
	     else
		 bs=2;
		 nexpbs2=$((nexpbs2 + 1))
		 nexp=$nexpbs2
	     fi
	     
	     egrep "Epoch.*Complete" "$f" | cut -d " " -f 8- | sed -e "s/Epoch\[\(.*\)\] Complete. Time taken: \(.*\)/${exp} ${bs} ${nexp} \1 \2/g"
	     
	 done
done >> "$outfile"

## cat "$outfile"
head "$outfile"
#+end_src

#+RESULTS:
#+begin_example
exp batch.size run epoch epoch.duration
IAAS-g3s.xlarge 1 1 1 00:03:50
IAAS-g3s.xlarge 1 1 2 00:00:44
IAAS-g3s.xlarge 1 1 3 00:00:44
IAAS-g3s.xlarge 1 1 4 00:00:44
IAAS-g3s.xlarge 1 1 5 00:00:44
IAAS-g3s.xlarge 1 1 6 00:00:44
IAAS-g3s.xlarge 1 1 7 00:00:44
IAAS-g3s.xlarge 1 1 8 00:00:44
IAAS-g3s.xlarge 1 1 9 00:00:45
#+end_example


** Total training times

#+begin_src shell :results output :exports both
outfile="trainingtimes.csv"
echo exp batch.size run duration > "$outfile"
for d in ../logs/*/; do
	 exp="$(basename $d)"

	 nexpbs1=0
	 nexpbs2=0

	 for f in ${d}/*.log; do


	     if grep -q 16/16 $f; then
		 bs=1;
		 nexpbs1=$((nexpbs1 + 1))
		 nexp=$nexpbs1
	     else
		 bs=2;
		 nexpbs2=$((nexpbs2 + 1))
		 nexp=$nexpbs2
	     fi
	     
	     egrep "Engine run complete.*" "$f" | cut -d " " -f 13 | sed -e "s/\(.*\)/${exp} ${bs} ${nexp} \1/g"
	     
	 done
done >> "$outfile"
cat "$outfile"
#+end_src

#+RESULTS:
#+begin_example
exp batch.size run duration
IAAS-g3s.xlarge 1 1 00:10:29
IAAS-g3s.xlarge 1 2 00:09:39
IAAS-g3s.xlarge 1 3 00:09:34
IAAS-g4dn.xlarge 1 1 00:07:49
IAAS-g4dn.xlarge 1 2 00:07:28
IAAS-g4dn.xlarge 1 3 00:07:24
IAAS-g5.xlarge 1 1 00:03:27
IAAS-g5.xlarge 1 2 00:03:29
IAAS-g5.xlarge 1 3 00:03:29
IAAS-p2.xlarge 1 1 00:19:14
IAAS-p2.xlarge 1 2 00:19:14
IAAS-p2.xlarge 1 3 00:18:37
IAAS-p3.2xlarge 1 1 00:04:43
IAAS-p3.2xlarge 1 2 00:04:09
IAAS-p3.2xlarge 1 3 00:04:06
SAGEMAKER-ml-g4dn-xlarge 2 1 00:04:25
SAGEMAKER-ml-g4dn-xlarge 2 2 00:04:29
SAGEMAKER-ml-g4dn-xlarge 2 3 00:04:27
SAGEMAKER-ml-g4dn-xlarge 1 1 00:05:22
SAGEMAKER-ml-g4dn-xlarge 1 2 00:05:27
SAGEMAKER-ml-g4dn-xlarge 1 3 00:05:30
SAGEMAKER-ml-p3-2xlarge 2 1 00:01:50
SAGEMAKER-ml-p3-2xlarge 2 2 00:01:55
SAGEMAKER-ml-p3-2xlarge 2 3 00:01:51
SAGEMAKER-ml-p3-2xlarge 1 1 00:01:59
SAGEMAKER-ml-p3-2xlarge 1 2 00:01:57
SAGEMAKER-ml-p3-2xlarge 1 3 00:01:56
#+end_example


* Loading R packages

#+name: load-r-packages
#+begin_src R :results output :exports both :noweb no-export
suppressMessages(library(data.table))
suppressMessages(library(tidyverse))
options(crayon.enabled = FALSE)
options(dplyr.sumarise.inform = FALSE)
options(tidyverse.quiet = TRUE)
options(dplyr.summarise.inform = FALSE)
#+end_src

#+RESULTS: load-r-packages


* Reading the data into R

#+name: do-init
#+begin_src R :results output :exports both :noweb no-export
func.init <- function()
{
  <<load-r-packages>>
}

if(!exists("do.init")){
  do.init = TRUE
}

if(do.init == TRUE){
  func.init()
  do.init = FALSE
}
#+end_src

#+RESULTS: do-init

#+name: read-csv-data
#+begin_src R :results output :exports both :noweb no-export
## do.init=TRUE
<<do-init>>

read.timings.csv <- function(fn)
{
  read.table(fn, sep=" ", header=TRUE, stringsAsFactors=TRUE)
}
iter.dt   <- read.timings.csv("plots/itertimes.csv"    )
epoch.dt  <- read.timings.csv("plots/epochtimes.csv"   )
train.dt  <- read.timings.csv("plots/trainingtimes.csv")

## cat("Iterations:\n")
## head(iter.dt)
## cat("\nEpochs:\n")
## head(epoch.dt)
## cat("\nTraining:\n")
## head(train.dt)
#+end_src

#+RESULTS: read-csv-data

* Helper functions

I'll need to subtract timings in the format HH:MM:SS.mmm. For this purpose, I'll
implement functions to convert these timings to seconds or miliseconds, as shown
in the code block below.

#+name: fun-conv-timings
#+begin_src R :results output :exports both :noweb no-export
## t = "1:01:01.500"
my.tsec <- function(t.str)
{
t.spstr = unlist(strsplit(t.str, ":"))
t.spn = as.numeric(t.spstr)
t.sec = (t.spn[1] * 60 + t.spn[2]) * 60 + t.spn[3]
t.sec
}
my.tmsec <- function(t.str)
{
  my.tsec(t.str) * 1000
}

## secs = my.tsec(t)
## msecs = my.tmsec(t)

## secs
## msecs

#+end_src


* Plots

** Iteration times
*** Computing the duration of each iteration

As all training sessions finished in the same day as they started, it is safe to
ignore the dates in the log files.

Next, we will create columns for the converted timings from hour format to seconds,
the elapsed time at the end of each iteration, and their duration.

#+name: calc-iter-timings
#+begin_src R :results output :exports both :noweb no-export
<<fun-conv-timings>>

<<read-csv-data>>

exp.list <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

iter.dt %>%
  data.frame %>%
  filter(exp %in% exp.list) %>%
  mutate(start.sec = unlist(lapply(as.character(start.time), my.tsec)),
         iter.sec = unlist(lapply(as.character(iter.time), my.tsec)),
         iter.elapsed = iter.sec - start.sec) %>%
  group_by(exp, batch.size, run) %>%
  mutate(iter.dur = iter.elapsed - lag(iter.elapsed, default = 0)) %>%
  ungroup() %>% data.table -> iter.dt
  summary(iter.dt)
#+end_src

#+RESULTS: calc-iter-timings
#+begin_example
                       exp        batch.size         run         start.date  
 IAAS-g3s.xlarge         :  0   Min.   :1.000   Min.   :1   2022-07-26:  80  
 IAAS-g4dn.xlarge        :480   1st Qu.:1.000   1st Qu.:1   2022-07-27: 160  
 IAAS-g5.xlarge          :  0   Median :1.000   Median :2   2022-07-28: 240  
 IAAS-p2.xlarge          :480   Mean   :1.167   Mean   :2   2022-08-02:2400  
 IAAS-p3.2xlarge         :480   3rd Qu.:1.000   3rd Qu.:3                    
 SAGEMAKER-ml-g4dn-xlarge:720   Max.   :2.000   Max.   :3                    
 SAGEMAKER-ml-p3-2xlarge :720                                                
        start.time        iter.date           iter.time        epoch     
 10:47:41.187: 160   2022-07-26:  80   12:43:14.584:   2   Min.   : 1.0  
 10:47:41.204: 160   2022-07-27: 160   10:49:46.269:   1   1st Qu.: 3.0  
 10:47:41.206: 160   2022-07-28: 240   10:49:46.273:   1   Median : 5.5  
 11:25:52.599: 160   2022-08-02:2400   10:49:46.323:   1   Mean   : 5.5  
 11:30:12.898: 160                     10:49:48.091:   1   3rd Qu.: 8.0  
 12:01:57.830: 160                     10:49:48.200:   1   Max.   :10.0  
 (Other)     :1920                     (Other)     :2873                 
  epoch.total      iter          iter.total      start.sec        iter.sec    
 Min.   :10   Min.   : 1.000   Min.   : 8.00   Min.   :38861   Min.   :38986  
 1st Qu.:10   1st Qu.: 4.000   1st Qu.:16.00   1st Qu.:41413   1st Qu.:42183  
 Median :10   Median : 7.000   Median :16.00   Median :54135   Median :54263  
 Mean   :10   Mean   : 7.833   Mean   :14.67   Mean   :56119   Mean   :56365  
 3rd Qu.:10   3rd Qu.:12.000   3rd Qu.:16.00   3rd Qu.:70841   3rd Qu.:71088  
 Max.   :10   Max.   :16.000   Max.   :16.00   Max.   :75244   Max.   :75508  
                                                                              
  iter.elapsed         iter.dur      
 Min.   :   5.995   Min.   :  0.586  
 1st Qu.:  86.248   1st Qu.:  0.679  
 Median : 187.930   Median :  1.964  
 Mean   : 245.340   Mean   :  2.789  
 3rd Qu.: 286.957   3rd Qu.:  3.144  
 Max.   :1154.465   Max.   :188.090
#+end_example

#+begin_src R :results output :exports both :noweb no-export
write.csv(iter.dt, "iteration-times-processed.csv")
#+end_src

#+RESULTS:


*** Plots for BS=1

#+begin_src R :results output graphics file :file iteration-times.png :exports both :width 600 :height 600 :noweb no-export

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

plot.iter.times <- function(dt, scl="fixed")
{
  dt %>%
    ggplot(aes(x = iter, y = iter.dur, group = epoch, color=epoch)) +
    geom_line() +
    facet_grid(cols = vars(run), rows = vars(exp), scales=scl,
               labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Iteration number") +
    scale_y_continuous(name = "Iteration time (s)") +
    scale_color_discrete(name = "Epoch")
}

iter.dt %>%
  filter(batch.size == 1) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times() +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/iteration-times.png]]


Plot without the first iteration of the first epoch:

#+begin_src R :results output graphics file :file iteration-times-no-1st-iter.png :exports both :width 600 :height 600 :noweb no-export
iter.dt %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times() +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/iteration-times-no-1st-iter.png]]


Plot with free /y/ scale:

#+begin_src R :results output graphics file :file iteration-times-no-1st-iter-freescale.png :exports both :width 600 :height 600 :noweb no-export
iter.dt %>%
  filter(batch.size == 1) %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times(scl = "free_y") +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/iteration-times-no-1st-iter-freescale.png]]


Plotting only a few executions:
#+begin_src R :results output graphics file :file iteration-times-few-runs.png  :exports both :width 600 :height 400 :noweb no-export
plot.iter.times.v2 <- function(dt, scl = "fixed")
{
  dt %>%
    ggplot(aes(x = iter, y = iter.dur, group = epoch, color=epoch)) +
    geom_line() +
    facet_grid(cols = vars(exp), scales=scl,
               labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Iteration number") +
    scale_y_continuous(name = "Iteration time (s)") +
    scale_color_discrete(name = "Epoch")
}

# exps <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")
exps <- c("IAAS-g4dn.xlarge", "SAGEMAKER-ml-p3-2xlarge")

iter.dt %>%
  filter(batch.size == 1) %>%
  #filter(!(epoch == 1 & iter == 1) 1) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v2(scl = "free") +
  theme_bw() 
  
#+end_src

#+RESULTS:
[[file:./img/iteration-times-few-runs.png]]

Plotting only a few executions:
#+begin_src R :results output graphics file :file iteration-times-single-iaasg4dnxlarge.png  :exports both :width 600 :height 400 :noweb no-export
plot.iter.times.v3 <- function(dt, scl = "fixed")
{
  dt %>%
    ggplot(aes(x = iter, y = iter.dur, group = epoch, color=epoch)) +
    geom_line() +
    ## facet_grid(cols = vars(exp), scales=scl,
    ##            labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Iteration number") +
    scale_y_continuous(name = "Iteration time (s)") +
    scale_color_discrete(name = "Epoch")
}

# exps <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")
exps <- c("IAAS-g4dn.xlarge")

iter.dt %>%
  filter(batch.size == 1) %>%
  #filter(!(epoch == 1 & iter == 1) 1) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw() -> p1

iter.dt %>%
  filter(batch.size == 1) %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw() +
  theme(
    legend.position = "none"
    ) -> p2

p1 + annotation_custom(ggplotGrob(p2), xmin=3, xmax=16,
                       ymin = 10, ymax = 125)
#+end_src

#+RESULTS:
[[file:./img/iteration-times-single-iaasg4dnxlarge.png]]

#+begin_src R :results output graphics file :file iteration-times-single-sm-mlp3.2xlarge.png  :exports both :width 600 :height 400 :noweb no-export

# exps <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")
exps <- c("SAGEMAKER-ml-p3-2xlarge")

iter.dt %>%
  filter(batch.size == 1) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw() -> p1

iter.dt %>%
  filter(batch.size == 1) %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw() +
  theme(
    legend.position = "none"
    ) -> p2

p1 + annotation_custom(ggplotGrob(p2), xmin=3, xmax=16,
                       ymin = 1.5, ymax = 8.5)

#+end_src

#+RESULTS:
[[file:./img/iteration-times-single-sm-mlp3.2xlarge.png]]


*** Plots for BS=2

#+begin_src R :results output graphics file :file iteration-times-bs2.png :exports both :width 600 :height 400 :noweb no-export

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

plot.iter.times <- function(dt, scl="fixed")
{
  dt %>%
    ggplot(aes(x = iter, y = iter.dur, group = epoch, color=epoch)) +
    geom_line() +
    facet_grid(cols = vars(run), rows = vars(exp), scales=scl,
               labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Iteration number") +
    scale_y_continuous(name = "Iteration time (s)") +
    scale_color_discrete(name = "Epoch")
}

iter.dt %>%
  filter(batch.size == 2) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times() +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/iteration-times-bs2.png]]


Plot without the first iteration of the first epoch:

#+begin_src R :results output graphics file :file iteration-times-no-1st-iter-bs2.png :exports both :width 600 :height 400 :noweb no-export
iter.dt %>%
  filter(batch.size == 2) %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times() +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/iteration-times-no-1st-iter-bs2.png]]


Plot with free /y/ scale:

#+begin_src R :results output graphics file :file iteration-times-no-1st-iter-freescale-bs2.png :exports both :width 600 :height 400 :noweb no-export
iter.dt %>%
  filter(batch.size == 2) %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times(scl = "free_y") +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/iteration-times-no-1st-iter-freescale-bs2.png]]


Plotting only a few executions:
#+begin_src R :results output graphics file :file iteration-times-few-runs-bs2.png  :exports both :width 600 :height 400 :noweb no-export
plot.iter.times.v2 <- function(dt, scl = "fixed")
{
  dt %>%
    ggplot(aes(x = iter, y = iter.dur, group = epoch, color=epoch)) +
    geom_line() +
    facet_grid(cols = vars(exp), scales=scl,
               labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Iteration number") +
    scale_y_continuous(name = "Iteration time (s)") +
    scale_color_discrete(name = "Epoch")
}

# exps <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")
exps <- c("SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

iter.dt %>%
  filter(batch.size == 2) %>%
  #filter(!(epoch == 1 & iter == 1) 1) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v2(scl = "free") +
  theme_bw() 
  
#+end_src

#+RESULTS:
[[file:./img/iteration-times-few-runs-bs2.png]]

Plotting only a few executions:
#+begin_src R :results output graphics file :file iteration-times-single-sagemakermlg4dnxlarge-bs2.png  :exports both :width 600 :height 400 :noweb no-export
plot.iter.times.v3 <- function(dt, scl = "fixed")
{
  dt %>%
    ggplot(aes(x = iter, y = iter.dur, group = epoch, color=epoch)) +
    geom_line() +
    ## facet_grid(cols = vars(exp), scales=scl,
    ##            labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Iteration number") +
    scale_y_continuous(name = "Iteration time (s)") +
    scale_color_discrete(name = "Epoch")
}

# exps <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")
exps <- c("SAGEMAKER-ml-g4dn-xlarge")

iter.dt %>%
  filter(batch.size == 2) %>%
  #filter(!(epoch == 1 & iter == 1) 1) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw() -> p1

iter.dt %>%
  filter(batch.size == 2) %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw() +
  theme(
    legend.position = "none"
    ) -> p2

 p1 + annotation_custom(ggplotGrob(p2), xmin=2.5, xmax=8,
                       ymin = 4, ymax = 9.5)
#+end_src

#+RESULTS:
[[file:./img/iteration-times-single-sagemakermlg4dnxlarge-bs2.png]]

#+begin_src R :results output graphics file :file iteration-times-single-sagemager-mlp3.2xlarge-bs2.png  :exports both :width 600 :height 400 :noweb no-export

# exps <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")
exps <- c("SAGEMAKER-ml-p3-2xlarge")

iter.dt %>%
  filter(batch.size == 2) %>%
  #filter(!(epoch == 1 & iter == 1) 1) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw() -> p1

iter.dt %>%
  filter(batch.size == 2) %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw() +
  theme(
    legend.position = "none"
    ) -> p2

p1 + annotation_custom(ggplotGrob(p2), xmin=2.5, xmax=8,
                       ymin = 1.5, ymax = 6)

#+end_src

#+RESULTS:
[[file:./img/iteration-times-single-sagemager-mlp3.2xlarge-bs2.png]]



*** Plots for BS1 with all instances

#+name: calc-iter-timings-all
#+begin_src R :results output :exports both :noweb no-export
<<fun-conv-timings>>
<<read-csv-data>>

exp.list <- c("IAAS-g4dn.xlarge", "IAAS-g3s.xlarge", "IAAS-g5.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\ng3s.xlarge", "IaaS\ng5.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-g3s.xlarge", "IAAS-g5.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

lbl.exp.1l <- c("IaaS g4dn.xlarge", "IaaS g3s.xlarge", "IaaS g5.xlarge", "IaaS p2.xlarge", "IaaS p3.2xlarge", "SageMaker ml.g4dn.xlarge", "SageMaker ml.p3.2xlarge")
names(lbl.exp.1l) <- c("IAAS-g4dn.xlarge", "IAAS-g3s.xlarge", "IAAS-g5.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

lbl.exp.1l.short <- c("g4dn.xlarge", "g3s.xlarge", "g5.xlarge", "p2.xlarge", "p3.2xlarge", "ml.g4dn.xlarge", "ml.p3.2xlarge")
names(lbl.exp.1l.short) <- c("IAAS-g4dn.xlarge", "IAAS-g3s.xlarge", "IAAS-g5.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")


iter.dt %>%
  data.frame %>%
  filter((exp %in% exp.list) & (batch.size == 1)) %>%
    mutate(start.sec = unlist(lapply(as.character(start.time), my.tsec)),
         iter.sec = unlist(lapply(as.character(iter.time), my.tsec)),
         iter.elapsed = iter.sec - start.sec) %>%
  group_by(exp, batch.size, run) %>%
  mutate(iter.dur = iter.elapsed - lag(iter.elapsed, default = 0)) %>%
  ungroup() %>% data.table -> iter.dt
  summary(iter.dt)
#+end_src

#+RESULTS: calc-iter-timings-all
#+begin_example
                       exp        batch.size      run         start.date  
 IAAS-g3s.xlarge         :480   Min.   :1    Min.   :1   2022-07-26:   0  
 IAAS-g4dn.xlarge        :480   1st Qu.:1    1st Qu.:1   2022-07-27:   0  
 IAAS-g5.xlarge          :480   Median :1    Median :2   2022-07-28:   0  
 IAAS-p2.xlarge          :480   Mean   :1    Mean   :2   2022-08-02:3360  
 IAAS-p3.2xlarge         :480   3rd Qu.:1    3rd Qu.:3                    
 SAGEMAKER-ml-g4dn-xlarge:480   Max.   :1    Max.   :3                    
 SAGEMAKER-ml-p3-2xlarge :480                                             
        start.time        iter.date           iter.time        epoch     
 10:47:41.187: 160   2022-07-26:   0   12:43:14.584:   2   Min.   : 1.0  
 10:47:41.204: 160   2022-07-27:   0   18:36:31.149:   2   1st Qu.: 3.0  
 10:47:41.206: 160   2022-07-28:   0   18:36:31.951:   2   Median : 5.5  
 11:25:52.599: 160   2022-08-02:3360   18:36:56.912:   2   Mean   : 5.5  
 11:30:12.898: 160                     18:37:39.705:   2   3rd Qu.: 8.0  
 12:01:57.830: 160                     10:49:46.269:   1   Max.   :10.0  
 (Other)     :2400                     (Other)     :3349                 
  epoch.total      iter         iter.total   start.sec        iter.sec    
 Min.   :10   Min.   : 1.00   Min.   :16   Min.   :38861   Min.   :38986  
 1st Qu.:10   1st Qu.: 4.75   1st Qu.:16   1st Qu.:43318   1st Qu.:43738  
 Median :10   Median : 8.50   Median :16   Median :65580   Median :65864  
 Mean   :10   Mean   : 8.50   Mean   :16   Mean   :57476   Mean   :57750  
 3rd Qu.:10   3rd Qu.:12.25   3rd Qu.:16   3rd Qu.:69212   3rd Qu.:69455  
 Max.   :10   Max.   :16.00   Max.   :16   Max.   :73955   Max.   :74071  
                                                                          
  iter.elapsed         iter.dur      
 Min.   :   5.995   Min.   :  0.388  
 1st Qu.: 144.168   1st Qu.:  0.668  
 Median : 205.117   Median :  1.963  
 Mean   : 273.867   Mean   :  2.769  
 3rd Qu.: 338.182   3rd Qu.:  2.671  
 Max.   :1154.465   Max.   :189.910
#+end_example

#+name: plot-iter-time-all
#+begin_src R :results output graphics file :file iteration-times-all-instances.png :exports both :width 600 :height 800 :noweb no-export

plot.iter.times <- function(dt, scl="fixed")
{
  dt %>%
    ggplot(aes(x = iter, y = iter.dur, group = epoch, color=epoch)) +
    geom_line() +
    facet_grid(cols = vars(run), rows = vars(exp), scales=scl,
               labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Step number", limits = c(1, NA)) +
    scale_y_continuous(name = "Step time (s)",
                       ## limits = c(0, 10), # this also removes the data points that are outside the limit
                       breaks = seq(2, 10, 2)) +
    ## ylim(0, 10) + # same as setting the limits in scale_y_continuous()
    coord_cartesian(ylim = c(0, 10)) + # this limits the axis but stil includes datapoints inside the limit
    scale_color_discrete(name = "Epoch") +
    theme_bw() +
    theme(
      text = element_text(size = 14, family = "serif")
    )
}

iter.dt %>%
  filter(batch.size == 1) %>%
  ## filter(epoch == 1) %>%
  ## filter(!(epoch == 1 & iter == 1)) %>%
  mutate(epoch = factor(epoch)) %>%
  ## plot.iter.times(scl = "fixed") +
  plot.iter.times(scl = "fixed") 
#+end_src

#+RESULTS: plot-iter-time-all
[[file:./img/iteration-times-all-instances.png]]

PDF version:
#+name: plot-iter-time-all-pdf
#+begin_src R :results output graphics file :file iteration-times-all-instances.pdf :exports both :width 6 :height 8 :noweb no-export

<<plot-iter-time-all>>

#+end_src

#+RESULTS: plot-iter-time-all-pdf
[[file:./img/iteration-times-all-instances.pdf]]


Using ~coord_cartesian()~ to set the /y/ axis limits disables the free scales in the facets, and  I could not find a way to set different ~coord_cartesian()~ limits for each facet. So, instead of using facets, I will create multiple plots and assemble them using the ~patchwork~ library.

#+name: plot-iter-time-all-v2
#+begin_src R :results output graphics file :file iteration-times-all-instances-v2.png :exports both :width 600 :height 800 :noweb no-export

library(grid)
library(patchwork)

calc.ymax <- function(dt, e)
{
  dt%>%
    filter(exp == e) %>%
    filter(!(epoch == 1 & iter == 1)) %>%
    data.frame() -> dt.tmp
  ## ceiling(max(dt.tmp$iter.dur))
  max(dt.tmp$iter.dur)
}

plot.single.run <- function(dt, e, r, ymax)
{
  if(ymax < 2)
    brkspc = 0.5
  else if(ymax < 5)
    brkspc = 1
  else
    brkspc = 2
    
  dt %>%
    ggplot(aes(x = iter, y = iter.dur, group = epoch, color=epoch)) +
    geom_line() +
    scale_x_continuous(name = "Step number",
                       limits = c(1, NA)) +
    scale_y_continuous(name = "Step time (s)",
                       ## limits = c(0, 10), # this also removes the data points that are outside the limit
                       breaks = seq(0, 10, brkspc)) +
    ## ylim(0, 10) + # same as setting the limits in scale_y_continuous()
    coord_cartesian(ylim = c(0, ymax)) + # this limits the axis but stil includes datapoints inside the limit
    scale_color_discrete(name = "Epoch") +
    ggtitle(paste0(e,", Run #", r)) +
    theme_bw() +
    theme(text = element_text(size = 18, family = "serif"),
          title = element_text(size = 14),
          axis.title = element_blank()
          )
}

plot.iter.times.v2 <- function(dt)
{
  p = list()
  n = 1
  for(e in unique(iter.dt$exp)){
    ymax = calc.ymax(dt, e)
    for(r in unique(iter.dt$run)){
      dt %>%
        filter( run == r & exp == e) %>%
        plot.single.run(lbl.exp.1l.short[e], r, ymax) -> p[[n]]
      n = n + 1
    }
  }
  p
}

iter.dt %>%
  filter(batch.size == 1) %>%
  ## filter(epoch == 1) %>%
  ## filter(!(epoch == 1 & iter == 1)) %>%
  mutate(epoch = factor(epoch)) %>%
  ## plot.iter.times(scl = "fixed") +
  plot.iter.times.v2() -> p
yttl <- grid::textGrob('Step duration (s)', rot = 90,
                       gp = gpar(fontsize = 18, fontfamily = "serif"))
xttl <- grid::textGrob('Step number',
                       gp = gpar(fontsize = 18, fontfamily = "serif"))
pw <-
  ((wrap_elements(yttl) + 
   (p[[ 1]] + p[[ 2]] + p[[ 3]] +
    p[[ 4]] + p[[ 5]] + p[[ 6]] +
    p[[ 7]] + p[[ 8]] + p[[ 9]] +
    p[[10]] + p[[11]] + p[[12]] +
    p[[13]] + p[[14]] + p[[15]] +
    p[[16]] + p[[17]] + p[[18]] +
    p[[19]] + p[[20]] + p[[21]] +
    plot_layout(guides="collect", ncol = 3, nrow = 7) &
    theme(legend.title = element_text(size = 18),
          plot.margin = margin(1, 5, 1, 1, "pt"))) +
  plot_layout(ncol = 2 , nrow = 1, widths = c(0.125, 4))) /
  wrap_elements(xttl)) +
  plot_layout(nrow = 2, heights = c(7, 0.15)) ## &
  ## theme(plot.margin = margin(1, 1, 1, 1, "pt"))
  
  
## wrap_elements(grid::textGrob('Step duration (s)', rot = 90)) | pw / grid::textGrob('Step number')

pw
#+end_src

#+RESULTS: plot-iter-time-all-v2
[[file:./img/iteration-times-all-instances-v2.png]]

PDF version:
#+name: plot-iter-time-all-v2-pdf
#+begin_src R :results output graphics file :file iteration-times-all-instances-v2.pdf :exports both :width 9 :height 12 :noweb no-export
<<plot-iter-time-all-v2>>
#+end_src

#+RESULTS: plot-iter-time-all-v2-pdf
[[file:./img/iteration-times-all-instances-v2.pdf]]

#+begin_src shell :results output :exports both
pdfcrop ../img/iteration-times-all-instances-v2.pdf
#+end_src

#+RESULTS:
: PDFCROP 1.40, 2020/06/06 - Copyright (c) 2002-2020 by Heiko Oberdiek, Oberdiek Package Support Group.
: ==> 1 page written on `../img/iteration-times-all-instances-v2-crop.pdf'.


** Epoch times

*** Reading the data

#+name: read-epoch-times
#+begin_src R :results output :exports both :noweb no-export
<<fun-conv-timings>>

<<read-csv-data>>

exp.list <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

epoch.dt %>%
  data.frame %>%
  filter(exp %in% exp.list) %>%
  mutate(epoch.sec = unlist(lapply(as.character(epoch.duration), my.tsec))
           ) -> epoch.dt

glimpse(epoch.dt)
#+end_src

#+RESULTS: read-epoch-times
: Rows: 210
: Columns: 6
: $ exp            <fct> IAAS-g4dn.xlarge, IAAS-g4dn.xlarge, IAAS-g4dn.xlarge, I…
: $ batch.size     <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…
: $ run            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2…
: $ epoch          <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, …
: $ epoch.duration <fct> 00:02:34, 00:00:32, 00:00:34, 00:00:36, 00:00:36, 00:00…
: $ epoch.sec      <dbl> 154, 32, 34, 36, 36, 35, 36, 35, 36, 35, 153, 31, 32, 3…


*** Plots for BS=1

#+begin_src R :results output graphics file :file epoch-times.png :exports both :width 600 :height 400 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

plot.epoch.times <- function(dt, scl="fixed")
{
  dt %>%
    ggplot(aes(x = epoch, y = epoch.sec, group = run, color=run)) +
    geom_line() +
    ## facet_grid(cols = vars(exp), scales = scl,
    ##            labeller = labeller(exp = lbl.exp)) +
    facet_grid(rows = vars(exp), scales = scl,
               labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Epoch number", breaks = seq(0,10,1)) +
    scale_y_continuous(name = "Epoch time (s)", limits = c(0,NA)) +
    scale_color_discrete(name = "Run")
}

epoch.dt %>%
  filter(batch.size == 1) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times(scl = "fixed") +
  theme_bw()

#+end_src

#+RESULTS:
[[file:./img/epoch-times.png]]

#+begin_src R :results output graphics file :file epoch-times-free-scale.png :exports both :width 600 :height 400 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

epoch.dt %>%
  filter(batch.size == 1) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times(scl = "free") +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/epoch-times-free-scale.png]]

#+begin_src R :results output graphics file :file epoch-times-no-first-epoch.png :exports both :width 600 :height 400 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

epoch.dt %>%
  filter(batch.size == 1) %>%
  filter(epoch != 1) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times(scl = "fixed") +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/epoch-times-no-first-epoch.png]]

#+begin_src R :results output graphics file :file epoch-times-no-first-epoch-free-scale.png :exports both :width 600 :height 400 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")


epoch.dt %>%
  filter(batch.size == 1) %>%
  filter(epoch != 1) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times(scl = "free") +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/epoch-times-no-first-epoch-free-scale.png]]

**** With horizontal facets (one plot per column)

All epochs:

#+begin_src R :results output graphics file :file epoch-times-columns.png :exports both :width 600 :height 200 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

plot.epoch.times.cols <- function(dt, scl="fixed")
{
  dt %>%
    ggplot(aes(x = epoch, y = epoch.sec, group = run, color=run)) +
    geom_line() +
    facet_grid(cols = vars(exp), scales = scl,
                labeller = labeller(exp = lbl.exp)) +
    ## facet_grid(rows = vars(exp), scales = scl,
    ##            labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Epoch number", breaks = seq(0,10,1)) +
    scale_y_continuous(name = "Epoch time (s)", limits = c(0,NA)) +
    scale_color_discrete(name = "Run")
}

epoch.dt %>%
  filter(batch.size == 1) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times.cols(scl = "fixed") +
  theme_bw() +
  theme(legend.position = "top")

#+end_src

#+RESULTS:
[[file:./img/epoch-times-columns.png]]



Without the first epoch:

#+begin_src R :results output graphics file :file epoch-times-columns-no-first-epoch.png :exports both :width 600 :height 200 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

epoch.dt %>%
  filter(batch.size == 1) %>%
  filter(epoch != 1) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times.cols(scl = "fixed") +
  theme_bw() +
  theme(legend.position = "top")

#+end_src

#+RESULTS:
[[file:./img/epoch-times-columns-no-first-epoch.png]]


*** Plots for BS=2

#+begin_src R :results output graphics file :file epoch-times-bs2.png :exports both :width 600 :height 400 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

plot.epoch.times <- function(dt, scl="fixed")
{
  dt %>%
    ggplot(aes(x = epoch, y = epoch.sec, group = run, color=run)) +
    geom_line() +
    ## facet_grid(cols = vars(exp), scales = scl,
    ##            labeller = labeller(exp = lbl.exp)) +
    facet_grid(rows = vars(exp), scales = scl,
               labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Epoch number", breaks = seq(0,10,1)) +
    scale_y_continuous(name = "Epoch time (s)", limits = c(0,NA)) +
    scale_color_discrete(name = "Run")
}

epoch.dt %>%
  filter(batch.size == 2) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times(scl = "fixed") +
  theme_bw()

#+end_src

#+RESULTS:
[[file:./img/epoch-times-bs2.png]]

#+begin_src R :results output graphics file :file epoch-times-free-scale-bs2.png :exports both :width 600 :height 400 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

epoch.dt %>%
  filter(batch.size == 2) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times(scl = "free") +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/epoch-times-free-scale-bs2.png]]

#+begin_src R :results output graphics file :file epoch-times-no-first-epoch-bs2.png :exports both :width 600 :height 400 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

epoch.dt %>%
  filter(batch.size == 2) %>%
  filter(epoch != 1) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times(scl = "fixed") +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/epoch-times-no-first-epoch-bs2.png]]

#+begin_src R :results output graphics file :file epoch-times-no-first-epoch-free-scale-bs2.png :exports both :width 600 :height 400 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")


epoch.dt %>%
  filter(batch.size == 2) %>%
  filter(epoch != 1) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times(scl = "free") +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/epoch-times-no-first-epoch-free-scale-bs2.png]]

**** With horizontal facets (one plot per column)

All epochs:

#+begin_src R :results output graphics file :file epoch-times-columns-bs2.png :exports both :width 450 :height 300 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

plot.epoch.times.cols <- function(dt, scl="fixed")
{
  dt %>%
    ggplot(aes(x = epoch, y = epoch.sec, group = run, color=run)) +
    geom_line() +
    facet_grid(cols = vars(exp), scales = scl,
                labeller = labeller(exp = lbl.exp)) +
    ## facet_grid(rows = vars(exp), scales = scl,
    ##            labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Epoch number", breaks = seq(0,10,1)) +
    scale_y_continuous(name = "Epoch time (s)", limits = c(0,NA)) +
    scale_color_discrete(name = "Run")
}

epoch.dt %>%
  filter(batch.size == 2) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times.cols(scl = "fixed") +
  theme_bw() +
  theme(legend.position = "top")

#+end_src

#+RESULTS:
[[file:./img/epoch-times-columns-bs2.png]]



Without the first epoch:

#+begin_src R :results output graphics file :file epoch-times-columns-no-first-epoch-bs2.png :exports both :width 450 :height 300 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

epoch.dt %>%
  filter(batch.size == 2) %>%
  filter(epoch != 1) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times.cols(scl = "fixed") +
  theme_bw() +
  theme(legend.position = "top")

#+end_src

#+RESULTS:
[[file:./img/epoch-times-columns-no-first-epoch-bs2.png]]

** Total training times
*** Reading the data

#+name: read-training-times
#+begin_src R :results output :exports both :noweb no-export
<<fun-conv-timings>>

<<read-csv-data>>
exp.list <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

train.dt %>%
  data.frame %>%
  filter(exp %in% exp.list) %>%
  mutate(train.sec = unlist(lapply(as.character(duration), my.tsec))
         ) -> train.dt

train.dt
#+end_src

#+RESULTS: read-training-times
#+begin_example
                        exp batch.size run duration train.sec
1          IAAS-g4dn.xlarge          1   1 00:07:49       469
2          IAAS-g4dn.xlarge          1   2 00:07:28       448
3          IAAS-g4dn.xlarge          1   3 00:07:24       444
4            IAAS-p2.xlarge          1   1 00:19:14      1154
5            IAAS-p2.xlarge          1   2 00:19:14      1154
6            IAAS-p2.xlarge          1   3 00:18:37      1117
7           IAAS-p3.2xlarge          1   1 00:04:43       283
8           IAAS-p3.2xlarge          1   2 00:04:09       249
9           IAAS-p3.2xlarge          1   3 00:04:06       246
10 SAGEMAKER-ml-g4dn-xlarge          2   1 00:04:25       265
11 SAGEMAKER-ml-g4dn-xlarge          2   2 00:04:29       269
12 SAGEMAKER-ml-g4dn-xlarge          2   3 00:04:27       267
13 SAGEMAKER-ml-g4dn-xlarge          1   1 00:05:22       322
14 SAGEMAKER-ml-g4dn-xlarge          1   2 00:05:27       327
15 SAGEMAKER-ml-g4dn-xlarge          1   3 00:05:30       330
16  SAGEMAKER-ml-p3-2xlarge          2   1 00:01:50       110
17  SAGEMAKER-ml-p3-2xlarge          2   2 00:01:55       115
18  SAGEMAKER-ml-p3-2xlarge          2   3 00:01:51       111
19  SAGEMAKER-ml-p3-2xlarge          1   1 00:01:59       119
20  SAGEMAKER-ml-p3-2xlarge          1   2 00:01:57       117
21  SAGEMAKER-ml-p3-2xlarge          1   3 00:01:56       116
#+end_example

*** Plots for BS=1

#+name: plot-train-func
#+begin_src R :results output :exports both :noweb no-export
lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

lbl.exp.1l <- c("IaaS g4dn.xlarge", "IaaS p2.xlarge", "IaaS p3.2xlarge", "SageMaker ml.g4dn.xlarge", "SageMaker ml.p3.2xlarge")
names(lbl.exp.1l) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

plot.train.times <- function(dt, scl = "fixed")
{
  dt %>%
    ggplot(aes(x = run, y = train.sec, color = exp)) +
    geom_line() +
    scale_x_continuous(name = "Executions", breaks = seq(0,10,1)) +
    scale_y_continuous(name = "Training time (s)", limits = c(0,NA)) +
    scale_color_discrete(name = "Environment", labels = lbl.exp.1l)  +
    guides(color = guide_legend(nrow=3), byrow=FALSE) +
    theme_bw() +
    theme(legend.position = "top")
}

plot.train.times.col <- function(dt, scl = "fixed")
{
  dt %>%
    mutate(run = factor(run)) %>%
    ggplot(aes(x = exp, y = train.sec, fill = run)) +
    geom_col(position = position_dodge()) +
    scale_x_discrete(name = "Environment", labels = lbl.exp) +
    scale_y_continuous(name = "Training time (s)", limits = c(0,NA)) +
    scale_fill_discrete(name = "Executions") +
    theme_bw()
}

#+end_src

#+RESULTS: plot-train-func


#+begin_src R :results output graphics file :file training-times.png :exports both :width  450 :height 300 :noweb no-export

<<read-training-times>>

<<plot-train-func>>

train.dt %>%
  filter(batch.size == 1) %>%
  ## mutate(run = factor(run)) %>%
  plot.train.times(scl = "fixed") 

#+end_src

#+RESULTS:
[[file:./img/training-times.png]]


#+begin_src R :results output graphics file :file epoch-times-bars.png :exports both :width 450 :height 300 :noweb no-export

<<read-training-times>>

<<plot-train-func>>

train.dt %>%
  filter(batch.size == 1) %>%
  ## mutate(run = factor(run)) %>%
  plot.train.times.col(scl = "fixed") +
  theme(legend.position = c(0.9,0.8))

#+end_src

#+RESULTS:
[[file:./img/epoch-times-bars.png]]

*** Plots for BS=2

#+name: plot-train-func
#+begin_src R :results output :exports both :noweb no-export
lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

lbl.exp.1l <- c("IaaS g4dn.xlarge", "IaaS p2.xlarge", "IaaS p3.2xlarge", "SageMaker ml.g4dn.xlarge", "SageMaker ml.p3.2xlarge")
names(lbl.exp.1l) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

plot.train.times <- function(dt, scl = "fixed")
{
  dt %>%
    ggplot(aes(x = run, y = train.sec, color = exp)) +
    geom_line() +
    scale_x_continuous(name = "Executions", breaks = seq(0,10,1)) +
    scale_y_continuous(name = "Training time (s)", limits = c(0,NA)) +
    scale_color_discrete(name = "Environment", labels = lbl.exp.1l)  +
    guides(color = guide_legend(nrow=3), byrow=FALSE) +
    theme_bw() +
    theme(legend.position = "top")
}

plot.train.times.col <- function(dt, scl = "fixed")
{
  dt %>%
    mutate(run = factor(run)) %>%
    ggplot(aes(x = exp, y = train.sec, fill = run)) +
    geom_col(position = position_dodge()) +
    scale_x_discrete(name = "Environment", labels = lbl.exp) +
    scale_y_continuous(name = "Training time (s)", limits = c(0,NA)) +
    scale_fill_discrete(name = "Executions") +
    theme_bw()
}

#+end_src

#+RESULTS: plot-train-func


#+begin_src R :results output graphics file :file training-times-bs2.png :exports both :width  450 :height 300 :noweb no-export

<<read-training-times>>

<<plot-train-func>>

train.dt %>%
  filter(batch.size == 2) %>%
  ## mutate(run = factor(run)) %>%
  plot.train.times(scl = "fixed") 

#+end_src

#+RESULTS:
[[file:./img/training-times-bs2.png]]


#+begin_src R :results output graphics file :file epoch-times-bars-bs2.png :exports both :width 450 :height 300 :noweb no-export

<<read-training-times>>

<<plot-train-func>>

train.dt %>%
  filter(batch.size == 2) %>%
  ## mutate(run = factor(run)) %>%
  plot.train.times.col(scl = "fixed") +
  theme(legend.position = c(0.9,0.8))

#+end_src

#+RESULTS:
[[file:./img/epoch-times-bars-bs2.png]]

** Billed time and costs

*** Reading the data

#+name: read-billing-data
#+begin_src R :results output :exports both :noweb no-export
<<do-init>>

temp.dt <- read.table("logs/summary.csv", sep = ",", header = TRUE,
                         stringsAsFactors = TRUE)

temp.dt %>%
  rename(price = pricing,
         boot.t = boot.time.in.seconds,
         train.t = training.time.in.seconds,
         total.t = total.time.in.seconds) %>%
  group_by(instance, type, batch.size) %>%
  mutate(run = row_number()) %>% ungroup() %>%
mutate(cost = total.t / 60 * price          
         ) -> bill.dt
bill.dt
#+end_src

#+RESULTS: read-billing-data
#+begin_example
# A tibble: 21 × 10
   instance       type   region price batch…¹ boot.t train.t total.t   run  cost
   <fct>          <fct>  <fct>  <dbl>   <int>  <int>   <int>   <int> <int> <dbl>
 1 g4dn.xlarge    IaaS   us-ea… 0.526       1    474     469     943     1  8.27
 2 g4dn.xlarge    IaaS   us-ea… 0.526       1    474     448     922     2  8.08
 3 g4dn.xlarge    IaaS   us-ea… 0.526       1    474     444     918     3  8.05
 4 p3.2xlarge     IaaS   us-ea… 3.06        1    449     283     732     1 37.3 
 5 p3.2xlarge     IaaS   us-ea… 3.06        1    449     249     698     2 35.6 
 6 p3.2xlarge     IaaS   us-ea… 3.06        1    449     246     695     3 35.4 
 7 p2.xlarge      IaaS   us-ea… 0.9         1    608    1117    1725     1 25.9 
 8 p2.xlarge      IaaS   us-ea… 0.9         1    398    1154    1552     2 23.3 
 9 p2.xlarge      IaaS   us-ea… 0.9         1    436    1117    1553     3 23.3 
10 ml.g4dn.xlarge SageM… us-ea… 0.736       2    248     265     513     1  6.29
# … with 11 more rows, and abbreviated variable name ¹​batch.size
# ℹ Use `print(n = ...)` to see more rows
#+end_example


*** Plotting the billed times for both BS=1 and BS=2

#+begin_src R :results output graphics file :file billed-times.png :exports both :width 600 :height 300 :noweb no-export

<<read-billing-data>>

plot.bill.times <- function(dt)
{
  dt %>%
    mutate(run = factor(run),
           type.inst = paste0(type, "\nbatch size = ", batch.size, "\n", instance)) %>%
    ggplot(aes(x = type.inst)) +
    geom_col(aes(y = total.t, fill = run, group = run),
             position = position_dodge2(padding = 0.3)) +
    geom_col(aes(y = train.t, fill = run, group = run),
             position = position_dodge()) + 
    scale_fill_discrete(name = "Run") +
    scale_x_discrete(name = "Instance type") +
    scale_y_continuous(name = "Training time and Billable time (s)") +
    theme_bw()
}

bill.dt %>%
  plot.bill.times()

#+end_src

#+RESULTS:
[[file:./img/billed-times.png]]

*** Training time relative to the total billed time  for both BS=1 and BS=2

#+begin_src R :results output graphics file :file training-rel-billed-times.png :exports both :width 600 :height 300 :noweb no-export

<<read-billing-data>>

plot.rel.train.times <- function(dt)
{
  dt %>%
    mutate(run = factor(run),
           rel.train.t = train.t / total.t, 
           type.inst = paste0(type, "\nbatch size = ", batch.size, "\n", instance)) %>%
    ggplot(aes(x = type.inst)) +
    geom_col(aes(y = rel.train.t, fill = run, group = run),
             position = position_dodge()) +
        scale_fill_discrete(name = "Run") +
    scale_x_discrete(name = "Instance type") +
    scale_y_continuous(name = "Proportion of the billable time spent on training") +
    theme_bw()
}

bill.dt %>%
  plot.rel.train.times()

#+end_src

#+RESULTS:
[[file:./img/training-rel-billed-times.png]]


*** Plotting the total costs for both BS=1 and BS=2

#+begin_src R :results output graphics file :file total-costs.png :exports both :width 600 :height 300 :noweb no-export

<<read-billing-data>>

plot.costs <- function(dt)
{
  dt %>%
    mutate(run = factor(run),
           type.inst = paste0(type, "\nbatch size = ", batch.size, "\n", instance)) %>%
    ggplot(aes(x = type.inst, y = cost, fill = run)) +
    geom_col(position = position_dodge()) +
    scale_fill_discrete(name = "Run") +
    scale_x_discrete(name = "Instance type") +
    scale_y_continuous(name = "Total cost (USD)") +
    theme_bw()
}

bill.dt %>%
  plot.costs()

#+end_src

#+RESULTS:
[[file:./img/total-costs.png]]

*** Stacked bars with errorbars
**** Reading the data

#+name: read-billing-data-v2
#+begin_src R :results output :exports both :noweb no-export
<<do-init>>

bill.dt <- read.table("logs/summary.csv", sep = ",", header = TRUE,
                         stringsAsFactors = TRUE)
## head(bill.dt)
#+end_src

#+RESULTS: read-billing-data-v2

It seems that the total time is always the sum of the training time and the boot
time. But I'll take a look at the logs to make sure the data in the table is
correct.

#+name: prepare-billing-data
#+begin_src R :results output :exports both :noweb no-export
<<read-billing-data-v2>>


bill.dt %>%
  rename(price = pricing,
         boot.t = boot.time.in.seconds,
         train.t = training.time.in.seconds,
         total.t = total.time.in.seconds) %>%
  mutate(rem.t = total.t - boot.t - train.t,
         total.c = total.t * price / 3600,
         boot.c = boot.t * price / 3600,
         train.c = train.t * price / 3600,
         rem.c = rem.t * price / 3600) %>%
  data.frame() -> bill.dt


bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(total.c),
            min = min(total.c),
            max = max(total.c)) %>%
  ungroup() %>%
  mutate(metric = "Total cost") %>% data.frame -> total.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(boot.c),
            min = min(boot.c),
            max = max(boot.c)) %>%
  ungroup() %>%
  mutate(metric = "Initialization cost")  %>% data.frame -> boot.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(train.c),
            min = min(train.c),
            max = max(train.c)) %>%
  ungroup() %>%
  mutate(metric = "Training cost") %>% data.frame  -> train.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(rem.c),
            min = min(rem.c),
            max = max(rem.c)) %>%
  ungroup() %>%
  mutate(metric = "Remaining cost") %>% data.frame  -> rem.c


costs <- rbind(boot.c, train.c, rem.c, total.c)
costs$metric <- factor(costs$metric, levels = c("Initialization cost", "Training cost", "Remaining cost", "Total cost"))

glimpse(costs)
#+end_src

#+RESULTS: prepare-billing-data
: Rows: 48
: Columns: 7
: $ instance   <fct> g3.16xlarge, g3.8xlarge, g3s.xlarge, g4dn.12xlarge, g4dn.xl…
: $ type       <fct> IaaS, IaaS, IaaS, IaaS, IaaS, IaaS, SageMaker, SageMaker, S…
: $ batch.size <int> 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,…
: $ med        <dbl> 0.40533333, 0.18430000, 0.09533508, 0.29774667, 0.06925667,…
: $ min        <dbl> 0.40406667, 0.18176667, 0.09447508, 0.29774667, 0.06925667,…
: $ max        <dbl> 0.40660000, 0.18493333, 0.11992557, 0.33904000, 0.06925667,…
: $ metric     <fct> Initialization cost, Initialization cost, Initialization co…



**** Plotting

#+name: plot-costs-stacked
#+begin_src R :results output graphics file :file costs-stacked.png :exports both :width 800 :height 400 :noweb no-export

<<prepare-billing-data>>

plot.costs <- function(dt)
{
  dt %>%
    ## mutate(type.inst = paste0(type, "\nbatch size = ", batch.size, "\n", instance)) %>%
    mutate(type.inst = paste0(type, "\n", instance)) %>%
    ggplot(aes(x = type.inst, y = med, ymin = min, ymax = max, fill = metric)) +
    geom_col() +
    geom_errorbar(# aes(linetype = metric),
                  width = 0.25, show.legend = FALSE) +
    ## geom_point() +
    geom_point(aes(y = medsum), size = 1, show.legend = FALSE) +
    scale_fill_discrete(name = "") +
    scale_x_discrete(name = "Configuration") +
    scale_y_continuous(name = "Costs (USD)", breaks=seq(0, 1, 0.1)) +
    theme_bw() +
    theme(text = element_text(size = 16, family = "serif"),
          plot.margin = margin(1, 1, 1, 1, "pt"),
          axis.title.x = element_blank(),
          legend.position = c(0.9, 0.85),
          legend.title = element_blank(),
          legend.text = element_text(size = 14),
          legend.margin = margin(2, 2, 2, 2, "pt"),
          )
}

## As the error bars can't be stacked, I'll have to adjust the training
## cost to account for the stacking:
costs$min[costs$metric == "Initialization cost"] <-
  costs$min[costs$metric == "Training cost"] +
  costs$med[costs$metric == "Initialization cost"]

costs$max[costs$metric == "Initialization cost"] <-
  costs$max[costs$metric == "Training cost"] +
  costs$med[costs$metric == "Initialization cost"] 

costs$medsum[costs$metric == "Initialization cost"] <-
  costs$med[costs$metric == "Training cost"] +
  costs$med[costs$metric == "Initialization cost"]
costs$medsum[costs$metric == "Training cost"] <-
  costs$med[costs$metric == "Training cost"]

## Now we call the plot function.
costs %>%
  filter(batch.size == 1) %>%
  filter(metric %in% c("Initialization cost", "Training cost")) %>%
  plot.costs() +
  theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1))

#+end_src

#+RESULTS: plot-costs-stacked
[[file:./img/costs-stacked.png]]


#+name: plot-costs-stacked-pdf
#+begin_src R :results output graphics file :file costs-stacked.pdf :exports both :width 8 :height 4 :noweb no-export

costs %>%
  filter(batch.size == 1) %>%
  filter(metric %in% c("Initialization cost", "Training cost")) %>%
  plot.costs() -> p
p + theme(text = element_text(size = 16),
          axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
          ## legend.box.margin = margin(0, 0, 0, 0, "pt"),
          legend.margin = margin(2, 2, 2, 2, "pt"),
          legend.position = c(0.55, 0.85))

#+end_src

#+RESULTS: plot-costs-stacked-pdf
[[file:./img/costs-stacked.pdf]]

*** Estimate cost for 1000 epochs

#+name: prepare-billing-data-est
#+begin_src R :results output :exports both :noweb no-export
<<read-billing-data-v2>>

est.epochs <- 1000

bill.dt %>%
  rename(price = pricing,
         boot.t = boot.time.in.seconds,
         train.t = training.time.in.seconds,
         total.t = total.time.in.seconds,
         first.iter.t = first.iter.sec,
         fist.epoch.t = first.epoch.sec) %>%
  mutate(rem.t = total.t - boot.t - train.t,
         price.sec = price / 3600,
         total.c = total.t * price.sec,
         boot.c = boot.t * price.sec,
         train.c = train.t * price.sec,
         rem.c = rem.t * price.sec,
         total.iter = iter.per.task * epochs,
         est.iter = iter.per.task * est.epochs,
         est.iter.t = (train.t - first.iter.t) / (total.iter - 1),
         est.train.t = first.iter.t + est.iter.t * (est.iter - 1),
         est.train.c = est.train.t * price.sec) %>%
  data.frame() -> bill.dt


bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(total.c),
            min = min(total.c),
            max = max(total.c)) %>%
  ungroup() %>%
  mutate(metric = "Total cost") %>% data.frame -> total.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(boot.c),
            min = min(boot.c),
            max = max(boot.c)) %>%
  ungroup() %>%
  mutate(metric = "Initialization cost")  %>% data.frame -> boot.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(est.train.c),
            min = min(est.train.c),
            max = max(est.train.c)) %>%
  ungroup() %>%
  mutate(metric = "Estimated training cost") %>% data.frame  -> train.c

bill.dt %>%
  group_by(instance, type, batch.size) %>%
  summarize(med = median(rem.c),
            min = min(rem.c),
            max = max(rem.c)) %>%
  ungroup() %>%
  mutate(metric = "Remaining cost") %>% data.frame  -> rem.c


costs <- rbind(boot.c, train.c, rem.c, total.c)
costs$metric <- factor(costs$metric, levels = c("Initialization cost", "Estimated training cost", "Remaining cost", "Total cost"))

glimpse(bill.dt)
glimpse(costs)
#+end_src

#+RESULTS: prepare-billing-data-est
#+begin_example
Rows: 36
Columns: 24
$ instance      <fct> g4dn.xlarge, g4dn.xlarge, g4dn.xlarge, p3.2xlarge, p3.2x…
$ type          <fct> IaaS, IaaS, IaaS, IaaS, IaaS, IaaS, IaaS, IaaS, IaaS, Sa…
$ region        <fct> us-east-1, us-east-1, us-east-1, us-east-1, us-east-1, u…
$ price         <dbl> 0.526, 0.526, 0.526, 3.060, 3.060, 3.060, 0.900, 0.900, …
$ batch.size    <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1,…
$ boot.t        <dbl> 474.000, 474.000, 474.000, 449.000, 449.000, 449.000, 60…
$ train.t       <dbl> 469.000, 448.000, 444.000, 283.000, 249.000, 246.000, 11…
$ total.t       <dbl> 943.000, 922.000, 918.000, 732.000, 698.000, 695.000, 17…
$ tasks         <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…
$ iter.per.task <int> 16, 16, 16, 16, 16, 16, 16, 16, 16, 8, 8, 8, 16, 16, 16,…
$ epochs        <int> 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, …
$ fist.epoch.t  <int> 154, 153, 153, 184, 146, 146, 273, 239, 275, 32, 30, 31,…
$ first.iter.t  <dbl> 125.117, 125.065, 125.086, 173.926, 136.521, 136.409, 18…
$ rem.t         <dbl> 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, …
$ price.sec     <dbl> 0.0001461111, 0.0001461111, 0.0001461111, 0.0008500000, …
$ total.c       <dbl> 0.1377828, 0.1347144, 0.1341300, 0.6222000, 0.5933000, 0…
$ boot.c        <dbl> 0.06925667, 0.06925667, 0.06925667, 0.38165000, 0.381650…
$ train.c       <dbl> 0.06852611, 0.06545778, 0.06487333, 0.24055000, 0.211650…
$ rem.c         <dbl> 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, …
$ total.iter    <int> 160, 160, 160, 160, 160, 160, 160, 160, 160, 80, 80, 80,…
$ est.iter      <dbl> 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, …
$ est.iter.t    <dbl> 2.1627862, 2.0310377, 2.0057484, 0.6860000, 0.7074151, 0…
$ est.train.t   <dbl> 34727.533, 32619.638, 32215.055, 11149.240, 11454.455, 1…
$ est.train.c   <dbl> 5.074078, 4.766092, 4.706977, 9.476854, 9.736287, 9.4891…
Rows: 48
Columns: 7
$ instance   <fct> g3.16xlarge, g3.8xlarge, g3s.xlarge, g4dn.12xlarge, g4dn.xl…
$ type       <fct> IaaS, IaaS, IaaS, IaaS, IaaS, IaaS, SageMaker, SageMaker, S…
$ batch.size <int> 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,…
$ med        <dbl> 0.40533333, 0.18430000, 0.09533508, 0.29774667, 0.06925667,…
$ min        <dbl> 0.40406667, 0.18176667, 0.09447508, 0.29774667, 0.06925667,…
$ max        <dbl> 0.40660000, 0.18493333, 0.11992557, 0.33904000, 0.06925667,…
$ metric     <fct> Initialization cost, Initialization cost, Initialization co…
#+end_example

#+begin_src R :results output :exports both :noweb no-export
bill.dt %>%
   mutate(est.by.real = est.train.c / train.c,
     train.by.boot = train.c / boot.c,
     est.train.by.boot = est.train.c / boot.c) -> tmp
summary(tmp$est.by.real)
summary(tmp$train.by.boot)
summary(tmp$est.train.by.boot)
#+end_src

#+RESULTS:
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:   37.83   68.51   76.51   75.55   94.61   98.60
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:  0.3895  0.5121  0.7835  0.9611  1.1401  2.8995
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:   22.24   34.80   59.26   76.36  105.44  254.58


#+name: plot-estimated-costs-stacked
#+begin_src R :results output graphics file :file estimated-costs-stacked.png :exports both :width 800 :height 400 :noweb no-export

<<prepare-billing-data-est>>
plot.costs <- function(dt)
{
  dt %>%
    ## mutate(type.inst = paste0(type, "\nbatch size = ", batch.size, "\n", instance)) %>%
    mutate(type.inst = paste0(type, "\n", instance)) %>%
    ggplot(aes(x = type.inst, y = med, ymin = min, ymax = max, fill = metric)) +
    geom_col() +
    ## geom_errorbar(aes(linetype = metric),
    ##              width = 0.25, show.legend = FALSE) +
    ## geom_point(aes(y = medsum), size = 1, show.legend = FALSE) +
    scale_fill_discrete(name = "") +
    scale_x_discrete(name = "Configuration") +
    scale_y_continuous(name = "Costs (USD)", breaks = seq(0, 100, 5)
                       ) +
    theme_bw() +
    theme(text = element_text(size = 16, family = "serif"),
          plot.margin = margin(1, 1, 1, 1, "pt"),
          axis.title.x = element_blank(),
          legend.position = c(0.85, 0.85),
          legend.title = element_blank(),
          legend.text = element_text(size = 14),
          legend.margin = margin(2, 2, 2, 2, "pt"),
          )
}

## As the error bars can't be stacked, I'll have to adjust the training
## cost to account for the stacking:
costs$min[costs$metric == "Initialization cost"] <-
  costs$min[costs$metric == "Estimated training cost"] +
  costs$med[costs$metric == "Initialization cost"]

costs$max[costs$metric == "Initialization cost"] <-
  costs$max[costs$metric == "Estimated training cost"] +
  costs$med[costs$metric == "Initialization cost"] 

costs$medsum[costs$metric == "Initialization cost"] <-
  costs$med[costs$metric == "Estimated training cost"] +
  costs$med[costs$metric == "Initialization cost"]
costs$medsum[costs$metric == "Estimated training cost"] <-
  costs$med[costs$metric == "Estimated training cost"]

## Now we call the plot function.
costs %>%
  filter(batch.size == 1) %>%
  filter(metric %in% c("Initialization cost", "Estimated training cost")) %>%
  plot.costs() +
  theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1))

#+end_src

#+RESULTS: plot-estimated-costs-stacked
[[file:./img/estimated-costs-stacked.png]]

#+name: plot-estimated-costs-stacked-pdf
#+begin_src R :results output graphics file :file estimated-costs-stacked.pdf :exports both :width 8 :height 4 :noweb no-export

costs %>%
  filter(batch.size == 1) %>%
  filter(metric %in% c("Initialization cost", "Estimated training cost")) %>%
  plot.costs() -> p
p + theme(text = element_text(size = 16),
          axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
          ## legend.box.margin = margin(0, 0, 0, 0, "pt"),
          legend.margin = margin(2, 2, 2, 2, "pt"),
          legend.position = c(0.85, 0.85))

#+end_src

#+RESULTS: plot-estimated-costs-stacked-pdf
[[file:./img/estimated-costs-stacked.pdf]]



* Iteration and estimated times and costs

We will need to to the pre-processing again.since now we have executions with multiple tasks.

We will only use the data for the one-node executions with batch size 1.

To facilitate selecting the correct files we listed them in a file called ~bs1flist.txt~.

** Pre-processing

The following code extracts the iteration times.

#+begin_src shell :results output :exports both
outfile="itertimes-20220812.csv"

echo exp  batch.size run start.date start.time iter.date iter.time epoch epoch.total iter iter.total > "$outfile"

logdir=../logs
exp=""
nexp=""
bs="1"


for f in $(cat ../logs/bs1flist.txt); do

    expaux="$(echo "$f" | cut -d '/' -f 1)"

    if [ "$expaux" != "$exp" ] ; then
	    exp="$expaux"
	    nexp=1
	else
	    nexp=$((nexp + 1))
	fi

    ## echo "$exp $expaux $nexp"
    
    start="$(grep "Engine run resuming" "${logdir}/${f}" | cut -d " " -f -2)"

    ## echo "$f $exp $expaux $nexp $start" 
   
    egrep "Epoch.*Iter:" "${logdir}/${f}" | sed -e "s/\(.*\) - ignite.engine.engine.DynUNetTrainer - INFO - Epoch: \([^\/]*\)\/\([^,]*\), Iter: \([^\/]*\)\/\([^ ]*\) .*/${exp} ${bs} ${nexp} ${start} \1 \2 \3 \4 \5/g" -e "s/,/\./g"
    
done >> $outfile

head "$outfile"
#+end_src

#+RESULTS:
#+begin_example
exp batch.size run start.date start.time iter.date iter.time epoch epoch.total iter iter.total
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:39.198 1 10 1 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:41.943 1 10 2 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:44.553 1 10 3 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:47.166 1 10 4 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:49.845 1 10 5 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:52.464 1 10 6 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:55.089 1 10 7 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:57.702 1 10 8 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:12:00.409 1 10 9 16
#+end_example

** Reading the csv data into R

#+name: read-csv-data-v2
#+begin_src R :results output :exports both :noweb no-export
## do.init=TRUE
<<do-init>>

read.timings.csv <- function(fn)
{
  read.table(fn, sep=" ", header=TRUE, stringsAsFactors=TRUE)
}
iter.dt   <- read.timings.csv("plots/itertimes-20220812.csv"    )
#epoch.dt  <- read.timings.csv("plots/epochtimes.csv"   )
#train.dt  <- read.timings.csv("plots/trainingtimes.csv")

## cat("Iterations:\n")
## head(iter.dt)
## cat("\nEpochs:\n")
## head(epoch.dt)
## cat("\nTraining:\n")
## head(train.dt)
#+end_src

#+RESULTS: read-csv-data-v2
#+begin_example
              exp batch.size run start.date   start.time  iter.date
1 IAAS-g3s.xlarge          1   1 2022-08-02 18:08:29.288 2022-08-02
2 IAAS-g3s.xlarge          1   1 2022-08-02 18:08:29.288 2022-08-02
3 IAAS-g3s.xlarge          1   1 2022-08-02 18:08:29.288 2022-08-02
4 IAAS-g3s.xlarge          1   1 2022-08-02 18:08:29.288 2022-08-02
5 IAAS-g3s.xlarge          1   1 2022-08-02 18:08:29.288 2022-08-02
6 IAAS-g3s.xlarge          1   1 2022-08-02 18:08:29.288 2022-08-02
     iter.time epoch epoch.total iter iter.total
1 18:11:39.198     1          10    1         16
2 18:11:41.943     1          10    2         16
3 18:11:44.553     1          10    3         16
4 18:11:47.166     1          10    4         16
5 18:11:49.845     1          10    5         16
6 18:11:52.464     1          10    6         16
#+end_example

** Computing the iteratinon timings in seconds

#+name: calc-iter-timings-all-v2
#+begin_src R :results output :exports both :noweb no-export
<<fun-conv-timings>>
<<read-csv-data-v2>>

exp.list <- c("IAAS-g3.16xlarge", "IAAS-g3.8xlarge", "IAAS-g4dn.xlarge", "IAAS-g3s.xlarge", "IAAS-g4dn.12xlarge", "IAAS-g5.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

lbl.exp <- c("IaaS\ng3.16xlarge", "IaaS\ng3.8xlarge", "IaaS\ng4dn.xlarge", "IaaS\ng3s.xlarge", "IaaS\ng4dn.12xlarge", "IaaS\ng5.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- exp.list


iter.dt %>%
  data.frame %>%
  filter(exp %in% exp.list) %>%
    mutate(start.sec = unlist(lapply(as.character(start.time), my.tsec)),
         iter.sec = unlist(lapply(as.character(iter.time), my.tsec)),
         iter.elapsed = iter.sec - start.sec) %>%
  group_by(exp, batch.size, run) %>%
  mutate(iter.dur = iter.elapsed - lag(iter.elapsed, default = 0)) %>%
  ungroup() %>%
  select(!c(ends_with(c("date","time")), "batch.size")) %>%
  data.table -> iter.dt

write.csv(iter.dt, "plots/itersecondsbs1.csv")
summary(iter.dt)
#+end_src

#+RESULTS: calc-iter-timings-all-v2
#+begin_example
                       exp           run        epoch       epoch.total
 IAAS-g3s.xlarge         :480   Min.   :1   Min.   : 1.0   Min.   :10  
 IAAS-g4dn.xlarge        :480   1st Qu.:1   1st Qu.: 3.0   1st Qu.:10  
 IAAS-g5.xlarge          :480   Median :2   Median : 5.5   Median :10  
 IAAS-p2.xlarge          :480   Mean   :2   Mean   : 5.5   Mean   :10  
 IAAS-p3.2xlarge         :480   3rd Qu.:3   3rd Qu.: 8.0   3rd Qu.:10  
 SAGEMAKER-ml-g4dn-xlarge:480   Max.   :3   Max.   :10.0   Max.   :10  
 (Other)                 :960                                          
      iter          iter.total      start.sec        iter.sec    
 Min.   : 1.000   Min.   : 4.00   Min.   :38861   Min.   :38986  
 1st Qu.: 4.000   1st Qu.:16.00   1st Qu.:44621   1st Qu.:44954  
 Median : 7.500   Median :16.00   Median :56924   Median :57101  
 Mean   : 7.875   Mean   :14.75   Mean   :56200   Mean   :56458  
 3rd Qu.:12.000   3rd Qu.:16.00   3rd Qu.:67449   3rd Qu.:67606  
 Max.   :16.000   Max.   :16.00   Max.   :73955   Max.   :74071  
                                                                 
  iter.elapsed         iter.dur      
 Min.   :   5.995   Min.   :  0.388  
 1st Qu.: 132.899   1st Qu.:  0.672  
 Median : 196.381   Median :  1.989  
 Mean   : 257.753   Mean   :  2.894  
 3rd Qu.: 307.676   3rd Qu.:  2.728  
 Max.   :1154.465   Max.   :189.910
#+end_example

** Computing the real and estimated timings based on 10 iterations

*Do not forget to execute the code in the previous section before executing this
one!*

#+name: comp-total-t
#+begin_src R :results output :exports both :noweb no-export
n.PI = 10
est.epochs = 1000

iter.dt %>%
  group_by(exp, run) %>%
  arrange(epoch, iter) %>%
  mutate(iter.idx = row_number()) %>%
  summarize(
    epoch.total = first(epoch.total),
    iter.total = first(iter.total),
    real.t = max(iter.elapsed),
    first.t = min(iter.elapsed),
    PI.t = sum(iter.dur[2:(n.PI+1)])) %>%
  ungroup() %>%
  mutate(
    PI.mean.t = PI.t / n.PI,
    real.niter = epoch.total * iter.total,
    est.niter = est.epochs * iter.total,
    # Estimations based on 10 steps for 'est.epochs' epochs
    est.t = PI.mean.t * est.niter, 
    est2.t = first.t + PI.mean.t * (est.niter - 1),
    # Estimations based on 10 steps for the original # of epochs
    est.real.t = PI.mean.t * real.niter,
    est2.real.t = first.t + PI.mean.t * (real.niter - 1),
    # Estimations based on all remaining iterations (only the first step of the first step is excluded)
    r.t = (real.t - first.t),
    r.mean.t = r.t / (real.niter - 1),
    r.est.t = r.mean.t * est.niter,
    r.est2.t = first.t + r.mean.t * (est.niter - 1),
    r.est.real.t = r.mean.t * real.niter,
    r.est2.real.t = first.t + r.mean.t * (real.niter - 1)) %>%
  ## select(!c(epoch.total, iter.total, first.t, PI.mean.t, real.niter, est.niter, r.mean.t)) %>%
  data.frame() -> est.t

est.t
#+end_src

#+RESULTS: comp-total-t
#+begin_example
                        exp run epoch.total iter.total   real.t first.t   PI.t
1          IAAS-g3.16xlarge   1          10          4  160.628  49.490 28.495
2          IAAS-g3.16xlarge   2          10          4  163.251  50.287 28.954
3          IAAS-g3.16xlarge   3          10          4  164.390  50.412 29.002
4           IAAS-g3.8xlarge   1          10          8  296.799  72.717 28.291
5           IAAS-g3.8xlarge   2          10          8  297.947  74.109 27.959
6           IAAS-g3.8xlarge   3          10          8  297.949  74.296 28.248
7           IAAS-g3s.xlarge   1          10         16  628.902 189.910 26.623
8           IAAS-g3s.xlarge   2          10         16  578.594 138.381 27.204
9           IAAS-g3s.xlarge   3          10         16  574.484 136.930 26.580
10       IAAS-g4dn.12xlarge   1          10          4  153.005  72.269 20.460
11       IAAS-g4dn.12xlarge   2          10          4  140.002  55.309 23.668
12       IAAS-g4dn.12xlarge   3          10          4  135.709  55.376 20.548
13         IAAS-g4dn.xlarge   1          10         16  468.840 125.117 19.301
14         IAAS-g4dn.xlarge   2          10         16  447.736 125.065 18.611
15         IAAS-g4dn.xlarge   3          10         16  443.714 125.086 18.710
16           IAAS-g5.xlarge   1          10         16  206.713 130.217  4.204
17           IAAS-g5.xlarge   2          10         16  208.850 131.642  4.680
18           IAAS-g5.xlarge   3          10         16  209.130 131.645  4.235
19           IAAS-p2.xlarge   1          10         16 1154.030 181.529 60.601
20           IAAS-p2.xlarge   2          10         16 1154.465 148.514 60.341
21           IAAS-p2.xlarge   3          10         16 1116.779 188.090 57.664
22          IAAS-p3.2xlarge   1          10         16  283.359 173.926  6.481
23          IAAS-p3.2xlarge   2          10         16  249.475 136.521  6.659
24          IAAS-p3.2xlarge   3          10         16  246.010 136.409  6.188
25 SAGEMAKER-ml-g4dn-xlarge   1          10         16  322.417   7.358 18.883
26 SAGEMAKER-ml-g4dn-xlarge   2          10         16  327.084   6.639 18.704
27 SAGEMAKER-ml-g4dn-xlarge   3          10         16  330.277   7.326 18.719
28  SAGEMAKER-ml-p3-2xlarge   1          10         16  118.892   8.573  6.675
29  SAGEMAKER-ml-p3-2xlarge   2          10         16  116.800   5.995  6.668
30  SAGEMAKER-ml-p3-2xlarge   3          10         16  116.067   6.534  6.685
   PI.mean.t real.niter est.niter   est.t    est2.t est.real.t est2.real.t
1     2.8495         40      4000 11398.0 11444.641    113.980    160.6205
2     2.8954         40      4000 11581.6 11628.992    115.816    163.2076
3     2.9002         40      4000 11600.8 11648.312    116.008    163.5198
4     2.8291         80      8000 22632.8 22702.688    226.328    296.2159
5     2.7959         80      8000 22367.2 22438.513    223.672    294.9851
6     2.8248         80      8000 22598.4 22669.871    225.984    297.4552
7     2.6623        160     16000 42596.8 42784.048    425.968    613.2157
8     2.7204        160     16000 43526.4 43662.061    435.264    570.9246
9     2.6580        160     16000 42528.0 42662.272    425.280    559.5520
10    2.0460         40      4000  8184.0  8254.223     81.840    152.0630
11    2.3668         40      4000  9467.2  9520.142     94.672    147.6142
12    2.0548         40      4000  8219.2  8272.521     82.192    135.5132
13    1.9301        160     16000 30881.6 31004.787    308.816    432.0029
14    1.8611        160     16000 29777.6 29900.804    297.776    420.9799
15    1.8710        160     16000 29936.0 30059.215    299.360    422.5750
16    0.4204        160     16000  6726.4  6856.197     67.264    197.0606
17    0.4680        160     16000  7488.0  7619.174     74.880    206.0540
18    0.4235        160     16000  6776.0  6907.222     67.760    198.9815
19    6.0601        160     16000 96961.6 97137.069    969.616   1145.0849
20    6.0341        160     16000 96545.6 96688.080    965.456   1107.9359
21    5.7664        160     16000 92262.4 92444.724    922.624   1104.9476
22    0.6481        160     16000 10369.6 10542.878    103.696    276.9739
23    0.6659        160     16000 10654.4 10790.255    106.544    242.3991
24    0.6188        160     16000  9900.8 10036.590     99.008    234.7982
25    1.8883        160     16000 30212.8 30218.270    302.128    307.5977
26    1.8704        160     16000 29926.4 29931.169    299.264    304.0326
27    1.8719        160     16000 29950.4 29955.854    299.504    304.9581
28    0.6675        160     16000 10680.0 10687.906    106.800    114.7055
29    0.6668        160     16000 10668.8 10674.128    106.688    112.0162
30    0.6685        160     16000 10696.0 10701.865    106.960    112.8255
        r.t  r.mean.t    r.est.t   r.est2.t r.est.real.t r.est2.real.t
1   111.138 2.8496923  11398.769  11445.410    113.98769       160.628
2   112.964 2.8965128  11586.051  11633.442    115.86051       163.251
3   113.978 2.9225128  11690.051  11737.541    116.90051       164.390
4   224.082 2.8364810  22691.848  22761.729    226.91848       296.799
5   223.838 2.8333924  22667.139  22738.415    226.67139       297.947
6   223.653 2.8310506  22648.405  22719.870    226.48405       297.949
7   438.992 2.7609560  44175.296  44362.445    441.75296       628.902
8   440.213 2.7686352  44298.164  44433.776    442.98164       578.594
9   437.554 2.7519119  44030.591  44164.769    440.30591       574.484
10   80.736 2.0701538   8280.615   8350.814     82.80615       153.005
11   84.693 2.1716154   8686.462   8739.599     86.86462       140.002
12   80.333 2.0598205   8239.282   8292.598     82.39282       135.709
13  343.723 2.1617799  34588.478  34711.433    345.88478       468.840
14  322.671 2.0293774  32470.038  32593.073    324.70038       447.736
15  318.628 2.0039497  32063.195  32186.277    320.63195       443.714
16   76.496 0.4811069   7697.711   7827.447     76.97711       206.713
17   77.208 0.4855849   7769.358   7900.515     77.69358       208.850
18   77.485 0.4873270   7797.233   7928.390     77.97233       209.130
19  972.501 6.1163585  97861.736  98037.148    978.61736      1154.030
20 1005.951 6.3267358 101227.774 101369.961   1012.27774      1154.465
21  928.689 5.8408113  93452.981  93635.230    934.52981      1116.779
22  109.433 0.6882579  11012.126  11185.364    110.12126       283.359
23  112.954 0.7104025  11366.440  11502.251    113.66440       249.475
24  109.601 0.6893145  11029.031  11164.751    110.29031       246.010
25  315.059 1.9815031  31704.050  31709.427    317.04050       322.417
26  320.445 2.0153774  32246.038  32250.661    322.46038       327.084
27  322.951 2.0311384  32498.214  32503.509    324.98214       330.277
28  110.319 0.6938302  11101.283  11109.162    111.01283       118.892
29  110.805 0.6968868  11150.189  11155.487    111.50189       116.800
30  109.533 0.6888868  11022.189  11028.034    110.22189       116.067
#+end_example


* Scratchpad


#+begin_src R :results output :exports both :noweb no-export
iter.dt %>% filter(epoch==1 & iter==1) %>% select(exp, run, epoch, iter, iter.elapsed, iter.dur)
#+end_src

#+RESULTS:
#+begin_example
                     exp run epoch iter iter.elapsed  iter.dur
1       IAAS-g4dn.xlarge   1     1    1      125.117   125.117
2       IAAS-g4dn.xlarge   2     1    1      125.065  -343.775
3       IAAS-g4dn.xlarge   3     1    1      125.086  -322.650
4         IAAS-p2.xlarge   1     1    1      181.529  -262.185
5         IAAS-p2.xlarge   2     1    1      148.514 -1005.516
6         IAAS-p2.xlarge   3     1    1      188.090  -966.375
7  SAGEMAKER-g4dn-xlarge   1     1    1        9.497 -1107.282
8  SAGEMAKER-g4dn-xlarge   2     1    1        8.680  -255.928
9  SAGEMAKER-g4dn-xlarge   3     1    1        8.850  -259.802
10  SAGEMAKER-p3-2xlarge   1     1    1        6.290  -260.866
11  SAGEMAKER-p3-2xlarge   2     1    1       10.952   -99.409
12  SAGEMAKER-p3-2xlarge   3     1    1        7.507  -107.943
#+end_example

#+begin_src R :results output :exports both :noweb no-export
iter.dt %>% filter(epoch==1 & iter==1) %>% select(exp, run, epoch, iter, iter.elapsed, iter.dur)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 15 × 6
   exp                        run epoch  iter iter.elapsed iter.dur
   <fct>                    <int> <int> <int>        <dbl>    <dbl>
 1 IAAS-g4dn.xlarge             1     1     1       125.     125.  
 2 IAAS-g4dn.xlarge             2     1     1       125.     125.  
 3 IAAS-g4dn.xlarge             3     1     1       125.     125.  
 4 IAAS-p2.xlarge               1     1     1       182.     182.  
 5 IAAS-p2.xlarge               2     1     1       149.     149.  
 6 IAAS-p2.xlarge               3     1     1       188.     188.  
 7 IAAS-p3.2xlarge              1     1     1       174.     174.  
 8 IAAS-p3.2xlarge              2     1     1       137.     137.  
 9 IAAS-p3.2xlarge              3     1     1       136.     136.  
10 SAGEMAKER-ml-g4dn-xlarge     1     1     1         9.50     9.50
11 SAGEMAKER-ml-g4dn-xlarge     2     1     1         8.68     8.68
12 SAGEMAKER-ml-g4dn-xlarge     3     1     1         8.85     8.85
13 SAGEMAKER-ml-p3-2xlarge      1     1     1         6.29     6.29
14 SAGEMAKER-ml-p3-2xlarge      2     1     1        11.0     11.0 
15 SAGEMAKER-ml-p3-2xlarge      3     1     1         7.51     7.51
#+end_example

#+begin_src R :results output :exports both :noweb no-export
lbl.exp
#+end_src

#+RESULTS:
:           IaaS g4dn.xlarge             IaaS p2.xlarge 
:         "IAAS-g4dn.xlarge"           "IAAS-p2.xlarge" 
:            IaaS p3.2xlarge   SageMaker ml.g4dn.xlarge 
:          "IAAS-p3.2xlarge" "SAGEMAKER-ml-g4dn-xlarge" 
:    SageMaker ml.p3.2xlarge 
:  "SAGEMAKER-ml-p3-2xlarge"


#+begin_src R :results output :exports both :noweb no-export
p = data.frame()
n = 1
for(i in unique(iter.dt$exp)){
  for(r in unique(iter.dt$run)){
    p[i,r] = n
    n = n + 1
    print(paste(i, r, p[i,r]))
  }
}

#+end_src

#+RESULTS:
#+begin_example
[1] "IAAS-g3s.xlarge 1 1"
[1] "IAAS-g3s.xlarge 2 2"
[1] "IAAS-g3s.xlarge 3 3"
[1] "IAAS-g4dn.xlarge 1 4"
[1] "IAAS-g4dn.xlarge 2 5"
[1] "IAAS-g4dn.xlarge 3 6"
[1] "IAAS-g5.xlarge 1 7"
[1] "IAAS-g5.xlarge 2 8"
[1] "IAAS-g5.xlarge 3 9"
[1] "IAAS-p2.xlarge 1 10"
[1] "IAAS-p2.xlarge 2 11"
[1] "IAAS-p2.xlarge 3 12"
[1] "IAAS-p3.2xlarge 1 13"
[1] "IAAS-p3.2xlarge 2 14"
[1] "IAAS-p3.2xlarge 3 15"
[1] "SAGEMAKER-ml-g4dn-xlarge 1 16"
[1] "SAGEMAKER-ml-g4dn-xlarge 2 17"
[1] "SAGEMAKER-ml-g4dn-xlarge 3 18"
[1] "SAGEMAKER-ml-p3-2xlarge 1 19"
[1] "SAGEMAKER-ml-p3-2xlarge 2 20"
[1] "SAGEMAKER-ml-p3-2xlarge 3 21"
#+end_example

#+begin_src R :results output :exports both :noweb no-export
iter.dt %>%
  filter(batch.size == 1) %>%
  mutate(epoch = factor(epoch)) %>%
  select(exp, run, epoch, iter, iter.dur) %>%
  filter( run == 2 & exp == "SAGEMAKER-ml-g4dn-xlarge") %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  data.frame() -> dt.tmp

max(dt.tmp$iter.dur)
#+end_src

#+RESULTS:
: [1] 2.473

#+begin_src R :results output :exports both :noweb no-export
lbl.exp["SAGEMAKER-ml-g4dn-xlarge"]
#+end_src

#+RESULTS:
:    SAGEMAKER-ml-g4dn-xlarge 
: "SageMaker\nml.g4dn.xlarge"
