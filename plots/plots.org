#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+date: 2019-09-27 sex
#+title: Graphics
#+author: Rafael Keller Tesser
#+email: rktesser@unicamp.br
#+language: en
#+tags: noexport(n) deprecated(d) ignore(i) RafaelTesser(R) EdsonBorin(E) OtatioNapoli(O) Daniel(D)
#+select_tags: export
#+exclude_tags: noexport
#+startup: overview indent
#+property: header-args:R :output-dir "./img" :session 202208-dl-cloud :datadir "./plots"
#+property: datadir "../logs"



* Pre-processing the data from the training logs

** Iteration times

The following code extracts the iteration times.

#+begin_src shell :results output :exports both
outfile="itertimes.csv"
echo exp run start.date start.time iter.date iter.time epoch epoch.total iter iter.total > "$outfile"
for d in ../logs/*/;do
	 exp="$(basename $d)"
	 nexp=1
	 for f in ${d}/*.log; do
	     #echo "$exp","$nexp"
	     #echo "$f"
	     start="$(grep "Engine run resuming" "$f" | cut -d " " -f -2)"
	     # All experiments finihed in the same day they started.
	     # So, we can ignore their dates when computing the timings
	
	     egrep "Epoch.*Iter:" "$f" | sed -e "s/\(.*\) - ignite.engine.engine.DynUNetTrainer - INFO - Epoch: \([^\/]*\)\/\([^,]*\), Iter: \([^\/]*\)\/\([^ ]*\) .*/${exp} ${nexp} ${start} \1 \2 \3 \4 \5/g" -e "s/,/\./g"
	     nexp=$((nexp + 1))
	 done
done >> "$outfile"

## cat "$outfile"
head "$outfile"
#+end_src

#+RESULTS:
#+begin_example
exp run start.date start.time iter.date iter.time epoch epoch.total iter iter.total
IAAS-g4dn.xlarge 1 2022-08-02 10:47:41.206 2022-08-02 10:49:46.323 1 10 1 16
IAAS-g4dn.xlarge 1 2022-08-02 10:47:41.206 2022-08-02 10:49:48.200 1 10 2 16
IAAS-g4dn.xlarge 1 2022-08-02 10:47:41.206 2022-08-02 10:49:50.078 1 10 3 16
IAAS-g4dn.xlarge 1 2022-08-02 10:47:41.206 2022-08-02 10:49:52.121 1 10 4 16
IAAS-g4dn.xlarge 1 2022-08-02 10:47:41.206 2022-08-02 10:49:54.010 1 10 5 16
IAAS-g4dn.xlarge 1 2022-08-02 10:47:41.206 2022-08-02 10:49:55.910 1 10 6 16
IAAS-g4dn.xlarge 1 2022-08-02 10:47:41.206 2022-08-02 10:49:57.816 1 10 7 16
IAAS-g4dn.xlarge 1 2022-08-02 10:47:41.206 2022-08-02 10:49:59.759 1 10 8 16
IAAS-g4dn.xlarge 1 2022-08-02 10:47:41.206 2022-08-02 10:50:01.708 1 10 9 16
#+end_example

** Epoch times

#+begin_src shell :results output :exports both
outfile="epochtimes.csv"
echo exp run epoch epoch.duration > "$outfile"
for d in ../logs/*/;do
	 exp="$(basename $d)"
	 nexp=1
	 for f in ${d}/*.log; do
	     #echo "$exp","$nexp"
	     #echo "$f"
	     
	     egrep "Epoch.*Complete" "$f" | cut -d " " -f 8- | sed -e "s/Epoch\[\(.*\)\] Complete. Time taken: \(.*\)/${exp} ${nexp} \1 \2/g"
	     
	     nexp=$((nexp + 1))
	 done
done >> "$outfile"

cat "$outfile"
## head "$outfile"
#+end_src

#+RESULTS:
#+begin_example
exp run epoch epoch.duration
IAAS-g4dn.xlarge 1 1 00:02:34
IAAS-g4dn.xlarge 1 2 00:00:32
IAAS-g4dn.xlarge 1 3 00:00:34
IAAS-g4dn.xlarge 1 4 00:00:36
IAAS-g4dn.xlarge 1 5 00:00:36
IAAS-g4dn.xlarge 1 6 00:00:35
IAAS-g4dn.xlarge 1 7 00:00:36
IAAS-g4dn.xlarge 1 8 00:00:35
IAAS-g4dn.xlarge 1 9 00:00:36
IAAS-g4dn.xlarge 1 10 00:00:35
IAAS-g4dn.xlarge 2 1 00:02:33
IAAS-g4dn.xlarge 2 2 00:00:31
IAAS-g4dn.xlarge 2 3 00:00:32
IAAS-g4dn.xlarge 2 4 00:00:33
IAAS-g4dn.xlarge 2 5 00:00:33
IAAS-g4dn.xlarge 2 6 00:00:33
IAAS-g4dn.xlarge 2 7 00:00:34
IAAS-g4dn.xlarge 2 8 00:00:33
IAAS-g4dn.xlarge 2 9 00:00:33
IAAS-g4dn.xlarge 2 10 00:00:33
IAAS-g4dn.xlarge 3 1 00:02:33
IAAS-g4dn.xlarge 3 2 00:00:31
IAAS-g4dn.xlarge 3 3 00:00:32
IAAS-g4dn.xlarge 3 4 00:00:32
IAAS-g4dn.xlarge 3 5 00:00:33
IAAS-g4dn.xlarge 3 6 00:00:33
IAAS-g4dn.xlarge 3 7 00:00:33
IAAS-g4dn.xlarge 3 8 00:00:32
IAAS-g4dn.xlarge 3 9 00:00:32
IAAS-g4dn.xlarge 3 10 00:00:33
IAAS-p2.xlarge 1 1 00:04:33
IAAS-p2.xlarge 1 2 00:01:38
IAAS-p2.xlarge 1 3 00:01:38
IAAS-p2.xlarge 1 4 00:01:38
IAAS-p2.xlarge 1 5 00:01:38
IAAS-p2.xlarge 1 6 00:01:38
IAAS-p2.xlarge 1 7 00:01:38
IAAS-p2.xlarge 1 8 00:01:38
IAAS-p2.xlarge 1 9 00:01:38
IAAS-p2.xlarge 1 10 00:01:38
IAAS-p2.xlarge 2 1 00:03:59
IAAS-p2.xlarge 2 2 00:01:38
IAAS-p2.xlarge 2 3 00:01:38
IAAS-p2.xlarge 2 4 00:01:39
IAAS-p2.xlarge 2 5 00:01:39
IAAS-p2.xlarge 2 6 00:01:39
IAAS-p2.xlarge 2 7 00:02:06
IAAS-p2.xlarge 2 8 00:01:41
IAAS-p2.xlarge 2 9 00:01:38
IAAS-p2.xlarge 2 10 00:01:38
IAAS-p2.xlarge 3 1 00:04:35
IAAS-p2.xlarge 3 2 00:01:34
IAAS-p2.xlarge 3 3 00:01:34
IAAS-p2.xlarge 3 4 00:01:34
IAAS-p2.xlarge 3 5 00:01:33
IAAS-p2.xlarge 3 6 00:01:34
IAAS-p2.xlarge 3 7 00:01:33
IAAS-p2.xlarge 3 8 00:01:34
IAAS-p2.xlarge 3 9 00:01:33
IAAS-p2.xlarge 3 10 00:01:33
SAGEMAKER-g4dn-xlarge 1 1 00:00:32
SAGEMAKER-g4dn-xlarge 1 2 00:00:26
SAGEMAKER-g4dn-xlarge 1 3 00:00:26
SAGEMAKER-g4dn-xlarge 1 4 00:00:26
SAGEMAKER-g4dn-xlarge 1 5 00:00:26
SAGEMAKER-g4dn-xlarge 1 6 00:00:26
SAGEMAKER-g4dn-xlarge 1 7 00:00:26
SAGEMAKER-g4dn-xlarge 1 8 00:00:26
SAGEMAKER-g4dn-xlarge 1 9 00:00:26
SAGEMAKER-g4dn-xlarge 1 10 00:00:27
SAGEMAKER-g4dn-xlarge 2 1 00:00:30
SAGEMAKER-g4dn-xlarge 2 2 00:00:26
SAGEMAKER-g4dn-xlarge 2 3 00:00:26
SAGEMAKER-g4dn-xlarge 2 4 00:00:26
SAGEMAKER-g4dn-xlarge 2 5 00:00:26
SAGEMAKER-g4dn-xlarge 2 6 00:00:26
SAGEMAKER-g4dn-xlarge 2 7 00:00:27
SAGEMAKER-g4dn-xlarge 2 8 00:00:27
SAGEMAKER-g4dn-xlarge 2 9 00:00:27
SAGEMAKER-g4dn-xlarge 2 10 00:00:27
SAGEMAKER-g4dn-xlarge 3 1 00:00:31
SAGEMAKER-g4dn-xlarge 3 2 00:00:26
SAGEMAKER-g4dn-xlarge 3 3 00:00:27
SAGEMAKER-g4dn-xlarge 3 4 00:00:26
SAGEMAKER-g4dn-xlarge 3 5 00:00:26
SAGEMAKER-g4dn-xlarge 3 6 00:00:26
SAGEMAKER-g4dn-xlarge 3 7 00:00:26
SAGEMAKER-g4dn-xlarge 3 8 00:00:26
SAGEMAKER-g4dn-xlarge 3 9 00:00:26
SAGEMAKER-g4dn-xlarge 3 10 00:00:27
SAGEMAKER-p3-2xlarge 1 1 00:00:15
SAGEMAKER-p3-2xlarge 1 2 00:00:10
SAGEMAKER-p3-2xlarge 1 3 00:00:11
SAGEMAKER-p3-2xlarge 1 4 00:00:11
SAGEMAKER-p3-2xlarge 1 5 00:00:10
SAGEMAKER-p3-2xlarge 1 6 00:00:11
SAGEMAKER-p3-2xlarge 1 7 00:00:11
SAGEMAKER-p3-2xlarge 1 8 00:00:11
SAGEMAKER-p3-2xlarge 1 9 00:00:11
SAGEMAKER-p3-2xlarge 1 10 00:00:11
SAGEMAKER-p3-2xlarge 2 1 00:00:20
SAGEMAKER-p3-2xlarge 2 2 00:00:11
SAGEMAKER-p3-2xlarge 2 3 00:00:11
SAGEMAKER-p3-2xlarge 2 4 00:00:11
SAGEMAKER-p3-2xlarge 2 5 00:00:11
SAGEMAKER-p3-2xlarge 2 6 00:00:11
SAGEMAKER-p3-2xlarge 2 7 00:00:11
SAGEMAKER-p3-2xlarge 2 8 00:00:10
SAGEMAKER-p3-2xlarge 2 9 00:00:11
SAGEMAKER-p3-2xlarge 2 10 00:00:11
SAGEMAKER-p3-2xlarge 3 1 00:00:16
SAGEMAKER-p3-2xlarge 3 2 00:00:11
SAGEMAKER-p3-2xlarge 3 3 00:00:10
SAGEMAKER-p3-2xlarge 3 4 00:00:10
SAGEMAKER-p3-2xlarge 3 5 00:00:11
SAGEMAKER-p3-2xlarge 3 6 00:00:11
SAGEMAKER-p3-2xlarge 3 7 00:00:10
SAGEMAKER-p3-2xlarge 3 8 00:00:10
SAGEMAKER-p3-2xlarge 3 9 00:00:11
SAGEMAKER-p3-2xlarge 3 10 00:00:11
#+end_example

** Total training times

#+begin_src shell :results output :exports both
outfile="trainingtimes.csv"
echo exp run duration > "$outfile"
for d in ../logs/*/;do
	 exp="$(basename $d)"
	 nexp=1
	 for f in ${d}/*.log; do
	     
	     egrep "Engine run complete.*" "$f" | cut -d " " -f 13 | sed -e "s/\(.*\)/${exp} ${nexp} \1/g"
	     
	     nexp=$((nexp + 1))
	 done
done >> "$outfile"
cat "$outfile"
#+end_src

#+RESULTS:
#+begin_example
exp run duration
IAAS-g4dn.xlarge 1 00:07:49
IAAS-g4dn.xlarge 2 00:07:28
IAAS-g4dn.xlarge 3 00:07:24
IAAS-p2.xlarge 1 00:19:14
IAAS-p2.xlarge 2 00:19:14
IAAS-p2.xlarge 3 00:18:37
SAGEMAKER-g4dn-xlarge 1 00:04:25
SAGEMAKER-g4dn-xlarge 2 00:04:29
SAGEMAKER-g4dn-xlarge 3 00:04:27
SAGEMAKER-p3-2xlarge 1 00:01:50
SAGEMAKER-p3-2xlarge 2 00:01:55
SAGEMAKER-p3-2xlarge 3 00:01:51
#+end_example


* Loading R packages

#+name: load-r-packages
#+begin_src R :results output :exports both :noweb no-export
suppressMessages(library(data.table))
suppressMessages(library(tidyverse))
options(crayon.enabled = FALSE)
options(dplyr.sumarise.inform = FALSE)
options(tidyverse.quiet = TRUE)
options(dplyr.summarise.inform = FALSE)
#+end_src

#+RESULTS: load-r-packages


* Reading the data into R

#+name: do_init
#+begin_src R :results output :exports both :noweb no-export
func.init <- function()
{
  <<load-r-packages>>
}

if((!exists("do.init")) | do.init == TRUE){
  func.init()
  do.init=FALSE
}
#+end_src

#+RESULTS: do_init

#+begin_src R :results output :exports both :noweb no-export
getwd()
#+end_src

#+RESULTS:
: [1] "/home/rktesser/work/pos-doutorado/repositories/MONAI-DDP"


#+name: read-csv-data
#+begin_src R :results output :exports both :noweb no-export
## do.init=TRUE
<<do.init>>

read.timings.csv <- function(fn)
{
  read.table(fn, sep=" ", header=TRUE, stringsAsFactors=TRUE)
}
iter.dt   <- read.timings.csv("plots/itertimes.csv"    )
epoch.dt  <- read.timings.csv("plots/epochtimes.csv"   )
train.dt  <- read.timings.csv("plots/trainingtimes.csv")

# glimpse(iter.dt)
# glimpse(epoch.dt)
# glimpse(train.dt)
#+end_src

#+RESULTS: read-csv-data

#+RESULTS:


* Helper functions

I'll need to subtract timings in the format HH:MM:SS.mmm. For this purpose, I'll
implement functions to convert these timings to seconds or miliseconds, as shown
in the code block below.

#+name: fun-conv-timings
#+begin_src R :results output :exports both :noweb no-export
## t = "1:01:01.500"
my.tsec <- function(t.str)
{
t.spstr = unlist(strsplit(t.str, ":"))
t.spn = as.numeric(t.spstr)
t.sec = (t.spn[1] * 60 + t.spn[2]) * 60 + t.spn[3]
t.sec
}
my.tmsec <- function(t.str)
{
  my.tsec(t.str) * 1000
}

## secs = my.tsec(t)
## msecs = my.tmsec(t)

## secs
## msecs

#+end_src


* Plots

** Iteration times
*** Computing the duration of each iteration

As all training sessions finished in the same day as they started, it is safe to
ignore the dates in the log files.

Next, we will create columns for the converted timings from hour format to seconds,
the elapsed time at the end of each iteration, and their duration.

#+name: calc-iter-timings
#+begin_src R :results output :exports both :noweb no-export
<<fun-conv-timings>>

<<read-csv-data>>

iter.dt %>%
  data.frame %>%
  mutate(start.sec = unlist(lapply(as.character(start.time), my.tsec)),
         iter.sec = unlist(lapply(as.character(iter.time), my.tsec)),
         iter.elapsed = iter.sec - start.sec,
         iter.dur = iter.elapsed - lag(iter.elapsed, default = 0)) -> iter.dt
  head(iter.dt)
#+end_src

#+RESULTS: calc-iter-timings
#+begin_example
             exp run start.date   start.time  iter.date    iter.time epoch
1 IAAS-p2.xlarge   1 2022-07-19 14:20:40.703 2022-07-19 14:20:48.325     1
2 IAAS-p2.xlarge   1 2022-07-19 14:20:40.703 2022-07-19 14:20:54.136     1
3 IAAS-p2.xlarge   1 2022-07-19 14:20:40.703 2022-07-19 14:20:59.778     1
4 IAAS-p2.xlarge   1 2022-07-19 14:20:40.703 2022-07-19 14:21:05.636     1
5 IAAS-p2.xlarge   1 2022-07-19 14:20:40.703 2022-07-19 14:21:11.394     1
6 IAAS-p2.xlarge   1 2022-07-19 14:20:40.703 2022-07-19 14:21:17.306     1
  epoch.total iter iter.total start.sec iter.sec iter.elapsed iter.dur
1          10    1         16   51640.7 51648.32        7.622    7.622
2          10    2         16   51640.7 51654.14       13.433    5.811
3          10    3         16   51640.7 51659.78       19.075    5.642
4          10    4         16   51640.7 51665.64       24.933    5.858
5          10    5         16   51640.7 51671.39       30.691    5.758
6          10    6         16   51640.7 51677.31       36.603    5.912
#+end_example

*** Plotting

** Epoch times

** Training times


