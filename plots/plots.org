#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+date: 2019-09-27 sex
#+title: Graphics
#+author: Rafael Keller Tesser
#+email: rktesser@unicamp.br
#+language: en
#+tags: noexport(n) deprecated(d) ignore(i) RafaelTesser(R) EdsonBorin(E) OtatioNapoli(O) Daniel(D)
#+select_tags: export
#+exclude_tags: noexport
#+startup: overview indent
#+property: header-args:R :output-dir "./img" :session 202208-dl-cloud :datadir "./plots"
#+property: datadir "../logs"

* Pre-processing the data from the training logs

** Iteration times

The following code extracts the iteration times.

#+begin_src shell :results output :exports both
outfile="itertimes.csv"
echo exp  batch.size run start.date start.time iter.date iter.time epoch epoch.total iter iter.total > "$outfile"
for d in ../logs/*/;do
	 exp="$(basename $d)"

	 nexpbs1=0
	 nexpbs2=0
	 
	 for f in ${d}/*.log; do
	     #echo "$exp","$nexp"
	     #echo "$f"
	     start="$(grep "Engine run resuming" "$f" | cut -d " " -f -2)"
	     # All experiments finihed in the same day they started.
	     # So, we can ignore their dates when computing the timings

	     if grep -q 16/16 $f; then
		 bs=1;
		 nexpbs1=$((nexpbs1 + 1))
		 nexp=$nexpbs1
	     else
		 bs=2;
		 nexpbs2=$((nexpbs2 + 1))
		 nexp=$nexpbs2
	     fi
	     
	     egrep "Epoch.*Iter:" "$f" | sed -e "s/\(.*\) - ignite.engine.engine.DynUNetTrainer - INFO - Epoch: \([^\/]*\)\/\([^,]*\), Iter: \([^\/]*\)\/\([^ ]*\) .*/${exp} ${bs} ${nexp} ${start} \1 \2 \3 \4 \5/g" -e "s/,/\./g"
	     
	 done
done >> "$outfile"

## cat "$outfile"
head "$outfile"
#+end_src

#+RESULTS:
#+begin_example
exp batch.size run start.date start.time iter.date iter.time epoch epoch.total iter iter.total
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:39.198 1 10 1 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:41.943 1 10 2 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:44.553 1 10 3 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:47.166 1 10 4 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:49.845 1 10 5 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:52.464 1 10 6 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:55.089 1 10 7 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:11:57.702 1 10 8 16
IAAS-g3s.xlarge 1 1 2022-08-02 18:08:29.288 2022-08-02 18:12:00.409 1 10 9 16
#+end_example

** Epoch times

#+begin_src shell :results output :exports both
outfile="epochtimes.csv"
echo exp batch.size run epoch epoch.duration > "$outfile"
for d in ../logs/*/;do
	 exp="$(basename $d)"

	 nexpbs1=0
	 nexpbs2=0

	 for f in ${d}/*.log; do
	     #echo "$exp","$nexp"
	     #echo "$f"

	     if grep -q 16/16 $f; then
		 bs=1;
		 nexpbs1=$((nexpbs1 + 1))
		 nexp=$nexpbs1
	     else
		 bs=2;
		 nexpbs2=$((nexpbs2 + 1))
		 nexp=$nexpbs2
	     fi
	     
	     egrep "Epoch.*Complete" "$f" | cut -d " " -f 8- | sed -e "s/Epoch\[\(.*\)\] Complete. Time taken: \(.*\)/${exp} ${bs} ${nexp} \1 \2/g"
	     
	 done
done >> "$outfile"

## cat "$outfile"
head "$outfile"
#+end_src

#+RESULTS:
#+begin_example
exp batch.size run epoch epoch.duration
IAAS-g3s.xlarge 1 1 1 00:03:50
IAAS-g3s.xlarge 1 1 2 00:00:44
IAAS-g3s.xlarge 1 1 3 00:00:44
IAAS-g3s.xlarge 1 1 4 00:00:44
IAAS-g3s.xlarge 1 1 5 00:00:44
IAAS-g3s.xlarge 1 1 6 00:00:44
IAAS-g3s.xlarge 1 1 7 00:00:44
IAAS-g3s.xlarge 1 1 8 00:00:44
IAAS-g3s.xlarge 1 1 9 00:00:45
#+end_example


** Total training times

#+begin_src shell :results output :exports both
outfile="trainingtimes.csv"
echo exp batch.size run duration > "$outfile"
for d in ../logs/*/; do
	 exp="$(basename $d)"

	 nexpbs1=0
	 nexpbs2=0

	 for f in ${d}/*.log; do


	     if grep -q 16/16 $f; then
		 bs=1;
		 nexpbs1=$((nexpbs1 + 1))
		 nexp=$nexpbs1
	     else
		 bs=2;
		 nexpbs2=$((nexpbs2 + 1))
		 nexp=$nexpbs2
	     fi
	     
	     egrep "Engine run complete.*" "$f" | cut -d " " -f 13 | sed -e "s/\(.*\)/${exp} ${bs} ${nexp} \1/g"
	     
	 done
done >> "$outfile"
cat "$outfile"
#+end_src

#+RESULTS:
#+begin_example
exp batch.size run duration
IAAS-g3s.xlarge 1 1 00:10:29
IAAS-g3s.xlarge 1 2 00:09:39
IAAS-g3s.xlarge 1 3 00:09:34
IAAS-g4dn.xlarge 1 1 00:07:49
IAAS-g4dn.xlarge 1 2 00:07:28
IAAS-g4dn.xlarge 1 3 00:07:24
IAAS-g5.xlarge 1 1 00:03:27
IAAS-g5.xlarge 1 2 00:03:29
IAAS-g5.xlarge 1 3 00:03:29
IAAS-p2.xlarge 1 1 00:19:14
IAAS-p2.xlarge 1 2 00:19:14
IAAS-p2.xlarge 1 3 00:18:37
IAAS-p3.2xlarge 1 1 00:04:43
IAAS-p3.2xlarge 1 2 00:04:09
IAAS-p3.2xlarge 1 3 00:04:06
SAGEMAKER-ml-g4dn-xlarge 2 1 00:04:25
SAGEMAKER-ml-g4dn-xlarge 2 2 00:04:29
SAGEMAKER-ml-g4dn-xlarge 2 3 00:04:27
SAGEMAKER-ml-g4dn-xlarge 1 1 00:05:22
SAGEMAKER-ml-g4dn-xlarge 1 2 00:05:27
SAGEMAKER-ml-g4dn-xlarge 1 3 00:05:30
SAGEMAKER-ml-p3-2xlarge 2 1 00:01:50
SAGEMAKER-ml-p3-2xlarge 2 2 00:01:55
SAGEMAKER-ml-p3-2xlarge 2 3 00:01:51
SAGEMAKER-ml-p3-2xlarge 1 1 00:01:59
SAGEMAKER-ml-p3-2xlarge 1 2 00:01:57
SAGEMAKER-ml-p3-2xlarge 1 3 00:01:56
#+end_example


* Loading R packages

#+name: load-r-packages
#+begin_src R :results output :exports both :noweb no-export
suppressMessages(library(data.table))
suppressMessages(library(tidyverse))
options(crayon.enabled = FALSE)
options(dplyr.sumarise.inform = FALSE)
options(tidyverse.quiet = TRUE)
options(dplyr.summarise.inform = FALSE)
#+end_src

#+RESULTS: load-r-packages


* Reading the data into R

#+name: do-init
#+begin_src R :results output :exports both :noweb no-export
func.init <- function()
{
  <<load-r-packages>>
}

if(!exists("do.init")){
  do.init = TRUE
}

if(do.init == TRUE){
  func.init()
  do.init = FALSE
}
#+end_src

#+RESULTS: do-init

#+name: read-csv-data
#+begin_src R :results output :exports both :noweb no-export
## do.init=TRUE
<<do-init>>

read.timings.csv <- function(fn)
{
  read.table(fn, sep=" ", header=TRUE, stringsAsFactors=TRUE)
}
iter.dt   <- read.timings.csv("plots/itertimes.csv"    )
epoch.dt  <- read.timings.csv("plots/epochtimes.csv"   )
train.dt  <- read.timings.csv("plots/trainingtimes.csv")

## cat("Iterations:\n")
## head(iter.dt)
## cat("\nEpochs:\n")
## head(epoch.dt)
## cat("\nTraining:\n")
## head(train.dt)
#+end_src

#+RESULTS: read-csv-data
#+begin_example
Iterations:
              exp batch.size run start.date   start.time  iter.date
1 IAAS-g3s.xlarge          1   1 2022-08-02 18:08:29.288 2022-08-02
2 IAAS-g3s.xlarge          1   1 2022-08-02 18:08:29.288 2022-08-02
3 IAAS-g3s.xlarge          1   1 2022-08-02 18:08:29.288 2022-08-02
4 IAAS-g3s.xlarge          1   1 2022-08-02 18:08:29.288 2022-08-02
5 IAAS-g3s.xlarge          1   1 2022-08-02 18:08:29.288 2022-08-02
6 IAAS-g3s.xlarge          1   1 2022-08-02 18:08:29.288 2022-08-02
     iter.time epoch epoch.total iter iter.total
1 18:11:39.198     1          10    1         16
2 18:11:41.943     1          10    2         16
3 18:11:44.553     1          10    3         16
4 18:11:47.166     1          10    4         16
5 18:11:49.845     1          10    5         16
6 18:11:52.464     1          10    6         16

Epochs:
              exp batch.size run epoch epoch.duration
1 IAAS-g3s.xlarge          1   1     1       00:03:50
2 IAAS-g3s.xlarge          1   1     2       00:00:44
3 IAAS-g3s.xlarge          1   1     3       00:00:44
4 IAAS-g3s.xlarge          1   1     4       00:00:44
5 IAAS-g3s.xlarge          1   1     5       00:00:44
6 IAAS-g3s.xlarge          1   1     6       00:00:44

Training:
               exp batch.size run duration
1  IAAS-g3s.xlarge          1   1 00:10:29
2  IAAS-g3s.xlarge          1   2 00:09:39
3  IAAS-g3s.xlarge          1   3 00:09:34
4 IAAS-g4dn.xlarge          1   1 00:07:49
5 IAAS-g4dn.xlarge          1   2 00:07:28
6 IAAS-g4dn.xlarge          1   3 00:07:24
#+end_example

* Helper functions

I'll need to subtract timings in the format HH:MM:SS.mmm. For this purpose, I'll
implement functions to convert these timings to seconds or miliseconds, as shown
in the code block below.

#+name: fun-conv-timings
#+begin_src R :results output :exports both :noweb no-export
## t = "1:01:01.500"
my.tsec <- function(t.str)
{
t.spstr = unlist(strsplit(t.str, ":"))
t.spn = as.numeric(t.spstr)
t.sec = (t.spn[1] * 60 + t.spn[2]) * 60 + t.spn[3]
t.sec
}
my.tmsec <- function(t.str)
{
  my.tsec(t.str) * 1000
}

## secs = my.tsec(t)
## msecs = my.tmsec(t)

## secs
## msecs

#+end_src


* Plots

** Iteration times
*** Computing the duration of each iteration

As all training sessions finished in the same day as they started, it is safe to
ignore the dates in the log files.

Next, we will create columns for the converted timings from hour format to seconds,
the elapsed time at the end of each iteration, and their duration.

#+name: calc-iter-timings
#+begin_src R :results output :exports both :noweb no-export
<<fun-conv-timings>>

<<read-csv-data>>

iter.dt %>%
  data.frame %>%
  mutate(start.sec = unlist(lapply(as.character(start.time), my.tsec)),
         iter.sec = unlist(lapply(as.character(iter.time), my.tsec)),
         iter.elapsed = iter.sec - start.sec) %>%
  group_by(exp, run) %>%
  mutate(iter.dur = iter.elapsed - lag(iter.elapsed, default = 0)) %>%
  ungroup() -> iter.dt
  head(iter.dt)
#+end_src

#+RESULTS: calc-iter-timings
#+begin_example
# A tibble: 6 × 14
  exp            run start…¹ start…² iter.…³ iter.…⁴ epoch epoch…⁵  iter iter.…⁶
  <fct>        <int> <fct>   <fct>   <fct>   <fct>   <int>   <int> <int>   <int>
1 IAAS-g4dn.x…     1 2022-0… 10:47:… 2022-0… 10:49:…     1      10     1      16
2 IAAS-g4dn.x…     1 2022-0… 10:47:… 2022-0… 10:49:…     1      10     2      16
3 IAAS-g4dn.x…     1 2022-0… 10:47:… 2022-0… 10:49:…     1      10     3      16
4 IAAS-g4dn.x…     1 2022-0… 10:47:… 2022-0… 10:49:…     1      10     4      16
5 IAAS-g4dn.x…     1 2022-0… 10:47:… 2022-0… 10:49:…     1      10     5      16
6 IAAS-g4dn.x…     1 2022-0… 10:47:… 2022-0… 10:49:…     1      10     6      16
# … with 4 more variables: start.sec <dbl>, iter.sec <dbl>, iter.elapsed <dbl>,
#   iter.dur <dbl>, and abbreviated variable names ¹​start.date, ²​start.time,
#   ³​iter.date, ⁴​iter.time, ⁵​epoch.total, ⁶​iter.total
# ℹ Use `colnames()` to see all variable names
#+end_example

#+begin_src R :results output :exports both :noweb no-export
write.csv(iter.dt, "iteration-times-processed.csv")
#+end_src

#+RESULTS:



*** Plotting

Before running this code, you should run the code in

#+begin_src R :results output graphics file :file iteration-times.png :exports both :width 600 :height 600 :noweb no-export

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

plot.iter.times <- function(dt, scl="fixed")
{
  dt %>%
    ggplot(aes(x = iter, y = iter.dur, group = epoch, color=epoch)) +
    geom_line() +
    facet_grid(cols = vars(run), rows = vars(exp), scales=scl,
               labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Iteration number") +
    scale_y_continuous(name = "Iteration time (s)") +
    scale_color_discrete(name = "Epoch")
}

iter.dt %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times() +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/iteration-times.png]]


Plot without the first iteration of the first epoch:

#+begin_src R :results output graphics file :file iteration-times-no-1st-iter.png :exports both :width 600 :height 600 :noweb no-export
iter.dt %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times() +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/iteration-times-no-1st-iter.png]]


Plot with free /y/ scale:

#+begin_src R :results output graphics file :file iteration-times-no-1st-iter-freescale.png :exports both :width 600 :height 600 :noweb no-export
iter.dt %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times(scl = "free_y") +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/iteration-times-no-1st-iter-freescale.png]]


Plotting only a few executions:
#+begin_src R :results output graphics file :file iteration-times-few-runs.png  :exports both :width 600 :height 400 :noweb no-export
plot.iter.times.v2 <- function(dt, scl = "fixed")
{
  dt %>%
    ggplot(aes(x = iter, y = iter.dur, group = epoch, color=epoch)) +
    geom_line() +
    facet_grid(cols = vars(exp), scales=scl,
               labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Iteration number") +
    scale_y_continuous(name = "Iteration time (s)") +
    scale_color_discrete(name = "Epoch")
}

# exps <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")
exps <- c("IAAS-g4dn.xlarge", "SAGEMAKER-ml-p3-2xlarge")

iter.dt %>%
  #filter(!(epoch == 1 & iter == 1) 1) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v2(scl = "free") +
  theme_bw() 
  
#+end_src

#+RESULTS:
[[file:./img/iteration-times-few-runs.png]]

Plotting only a few executions:
#+begin_src R :results output graphics file :file iteration-times-single-iaasg4dnxlarge.png  :exports both :width 600 :height 400 :noweb no-export
plot.iter.times.v3 <- function(dt, scl = "fixed")
{
  dt %>%
    ggplot(aes(x = iter, y = iter.dur, group = epoch, color=epoch)) +
    geom_line() +
    ## facet_grid(cols = vars(exp), scales=scl,
    ##            labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Iteration number") +
    scale_y_continuous(name = "Iteration time (s)") +
    scale_color_discrete(name = "Epoch")
}

# exps <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")
exps <- c("IAAS-g4dn.xlarge")

iter.dt %>%
  #filter(!(epoch == 1 & iter == 1) 1) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw() -> p1

iter.dt %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw() +
  theme(
    legend.position = "none"
    ) -> p2

p1 + annotation_custom(ggplotGrob(p2), xmin=3, xmax=16,
                       ymin = 10, ymax = 125)
#+end_src

#+RESULTS:
[[file:./img/iteration-times-single-iaasg4dnxlarge.png]]

#+begin_src R :results output graphics file :file iteration-times-single-sm-mlp3.2xlarge.png  :exports both :width 600 :height 400 :noweb no-export

# exps <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")
exps <- c("SAGEMAKER-ml-p3-2xlarge")

iter.dt %>%
  #filter(!(epoch == 1 & iter == 1) 1) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw()

iter.dt %>%
  filter(!(epoch == 1 & iter == 1)) %>%
  filter(run == 1 & exp %in% exps) %>%
  mutate(epoch = factor(epoch)) %>%
  plot.iter.times.v3(scl = "free") +
  theme_bw() +
  theme(
    legend.position = "none"
    ) -> p2

p1 + annotation_custom(ggplotGrob(p2), xmin=3, xmax=16,
                       ymin = 10, ymax = 125)

#+end_src

#+RESULTS:
[[file:./img/iteration-times-single-sm-mlp3.2xlarge.png]]


** Epoch times

*** Reading the data

#+name: read-epoch-times
#+begin_src R :results output :exports both :noweb no-export
<<fun-conv-timings>>

<<read-csv-data>>

epoch.dt %>%
  data.frame %>%
  mutate(epoch.sec = unlist(lapply(as.character(epoch.duration), my.tsec))
           ) -> epoch.dt

glimpse(epoch.dt)
#+end_src

#+RESULTS: read-epoch-times
: Rows: 150
: Columns: 5
: $ exp            <fct> IAAS-g4dn.xlarge, IAAS-g4dn.xlarge, IAAS-g4dn.xlarge, I…
: $ run            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2…
: $ epoch          <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, …
: $ epoch.duration <fct> 00:02:34, 00:00:32, 00:00:34, 00:00:36, 00:00:36, 00:00…
: $ epoch.sec      <dbl> 154, 32, 34, 36, 36, 35, 36, 35, 36, 35, 153, 31, 32, 3…


*** Plotting

#+begin_src R :results output graphics file :file epoch-times.png :exports both :width 600 :height 400 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

plot.epoch.times <- function(dt, scl="fixed")
{
  dt %>%
    ggplot(aes(x = epoch, y = epoch.sec, group = run, color=run)) +
    geom_line() +
    ## facet_grid(cols = vars(exp), scales = scl,
    ##            labeller = labeller(exp = lbl.exp)) +
    facet_grid(rows = vars(exp), scales = scl,
               labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Epoch number", breaks = seq(0,10,1)) +
    scale_y_continuous(name = "Epoch time (s)", limits = c(0,NA)) +
    scale_color_discrete(name = "Run")
}

epoch.dt %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times(scl = "fixed") +
  theme_bw()

#+end_src

#+RESULTS:
[[file:./img/epoch-times.png]]

#+begin_src R :results output graphics file :file epoch-times-free-scale.png :exports both :width 600 :height 400 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

epoch.dt %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times(scl = "free") +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/epoch-times-free-scale.png]]

#+begin_src R :results output graphics file :file epoch-times-no-first-epoch.png :exports both :width 600 :height 400 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

epoch.dt %>%
  filter(epoch != 1) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times(scl = "fixed") +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/epoch-times-no-first-epoch.png]]

#+begin_src R :results output graphics file :file epoch-times-no-first-epoch-free-scale.png :exports both :width 600 :height 400 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")


epoch.dt %>%
  filter(epoch != 1) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times(scl = "free") +
  theme_bw()
#+end_src

#+RESULTS:
[[file:./img/epoch-times-no-first-epoch-free-scale.png]]

**** With horizontal facets (one plot per column)

All epochs:

#+begin_src R :results output graphics file :file epoch-times-columns.png :exports both :width 600 :height 200 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

plot.epoch.times.cols <- function(dt, scl="fixed")
{
  dt %>%
    ggplot(aes(x = epoch, y = epoch.sec, group = run, color=run)) +
    geom_line() +
    facet_grid(cols = vars(exp), scales = scl,
                labeller = labeller(exp = lbl.exp)) +
    ## facet_grid(rows = vars(exp), scales = scl,
    ##            labeller = labeller(exp = lbl.exp)) +
    scale_x_continuous(name = "Epoch number", breaks = seq(0,10,1)) +
    scale_y_continuous(name = "Epoch time (s)", limits = c(0,NA)) +
    scale_color_discrete(name = "Run")
}

epoch.dt %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times.cols(scl = "fixed") +
  theme_bw() +
  theme(legend.position = "top")

#+end_src

#+RESULTS:
[[file:./img/epoch-times-columns.png]]



Without the first epoch:

#+begin_src R :results output graphics file :file epoch-times-columns-no-first-epoch.png :exports both :width 600 :height 200 :noweb no-export

<<read-epoch-times>>

lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

epoch.dt %>%
  filter(epoch != 1) %>%
  mutate(run = factor(run)) %>%
  plot.epoch.times.cols(scl = "fixed") +
  theme_bw() +
  theme(legend.position = "top")

#+end_src

#+RESULTS:
[[file:./img/epoch-times-columns-no-first-epoch.png]]

** Total training times

*** Reading the data

#+name: read-training-times
#+begin_src R :results output :exports both :noweb no-export
<<fun-conv-timings>>

<<read-csv-data>>

train.dt %>%
  data.frame %>%
  mutate(train.sec = unlist(lapply(as.character(duration), my.tsec))
           ) -> train.dt

train.dt
#+end_src

#+RESULTS: read-training-times
#+begin_example
                        exp run duration train.sec
1          IAAS-g4dn.xlarge   1 00:07:49       469
2          IAAS-g4dn.xlarge   2 00:07:28       448
3          IAAS-g4dn.xlarge   3 00:07:24       444
4            IAAS-p2.xlarge   1 00:19:14      1154
5            IAAS-p2.xlarge   2 00:19:14      1154
6            IAAS-p2.xlarge   3 00:18:37      1117
7           IAAS-p3.2xlarge   1 00:04:43       283
8           IAAS-p3.2xlarge   2 00:04:09       249
9           IAAS-p3.2xlarge   3 00:04:06       246
10 SAGEMAKER-ml-g4dn-xlarge   1 00:04:25       265
11 SAGEMAKER-ml-g4dn-xlarge   2 00:04:29       269
12 SAGEMAKER-ml-g4dn-xlarge   3 00:04:27       267
13  SAGEMAKER-ml-p3-2xlarge   1 00:01:50       110
14  SAGEMAKER-ml-p3-2xlarge   2 00:01:55       115
15  SAGEMAKER-ml-p3-2xlarge   3 00:01:51       111
#+end_example

*** Plotting

#+name: plot-train-func
#+begin_src R :results output :exports both :noweb no-export
lbl.exp <- c("IaaS\ng4dn.xlarge", "IaaS\np2.xlarge", "IaaS\np3.2xlarge", "SageMaker\nml.g4dn.xlarge", "SageMaker\nml.p3.2xlarge")
names(lbl.exp) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

lbl.exp.1l <- c("IaaS g4dn.xlarge", "IaaS p2.xlarge", "IaaS p3.2xlarge", "SageMaker ml.g4dn.xlarge", "SageMaker ml.p3.2xlarge")
names(lbl.exp.1l) <- c("IAAS-g4dn.xlarge", "IAAS-p2.xlarge", "IAAS-p3.2xlarge", "SAGEMAKER-ml-g4dn-xlarge", "SAGEMAKER-ml-p3-2xlarge")

plot.train.times <- function(dt, scl = "fixed")
{
  dt %>%
    ggplot(aes(x = run, y = train.sec, color = exp)) +
    geom_line() +
    scale_x_continuous(name = "Executions", breaks = seq(0,10,1)) +
    scale_y_continuous(name = "Training time (s)", limits = c(0,NA)) +
    scale_color_discrete(name = "Environment", labels = lbl.exp.1l)  +
    guides(color = guide_legend(nrow=3), byrow=FALSE) +
    theme_bw() +
    theme(legend.position = "top")
}

plot.train.times.col <- function(dt, scl = "fixed")
{
  dt %>%
    mutate(run = factor(run)) %>%
    ggplot(aes(x = exp, y = train.sec, fill = run)) +
    geom_col(position = position_dodge()) +
    scale_x_discrete(name = "Environment", labels = lbl.exp) +
    scale_y_continuous(name = "Training time (s)", limits = c(0,NA)) +
    scale_fill_discrete(name = "Executions") +
    theme_bw()
}

#+end_src

#+RESULTS: plot-train-func


#+begin_src R :results output graphics file :file training-times.png :exports both :width  450 :height 300 :noweb no-export

<<read-training-times>>

<<plot-train-func>>

train.dt %>%
  ## mutate(run = factor(run)) %>%
  plot.train.times(scl = "fixed") 

#+end_src

#+RESULTS:
[[file:./img/training-times.png]]


#+begin_src R :results output graphics file :file epoch-times-bars.png :exports both :width 450 :height 300 :noweb no-export

<<read-training-times>>

<<plot-train-func>>

train.dt %>%
  ## mutate(run = factor(run)) %>%
  plot.train.times.col(scl = "fixed") +
  theme(legend.position = c(0.9,0.8))

#+end_src

#+RESULTS:
[[file:./img/epoch-times-bars.png]]


** Billed time and costs

*** Reading the data

#+name: read-billing-data
#+begin_src R :results output :exports both :noweb no-export
<<do-init>>
  
temp.dt <- read.table("logs/summary.csv", sep = ",", header = TRUE,
                         stringsAsFactors = TRUE)

temp.dt %>%
  rename(price=pricing,
         batch.sz=batch.size,
         boot.t=boot.time.in.seconds,
         train.t=training.time.in.seconds,
         total.t=total.time.in.seconds) %>%
  mutate(cost = total.t / 60 * price
         ) -> bill.dt
bill.dt
#+end_src

#+RESULTS: read-billing-data
#+begin_example
         instance      type    region price batch.sz run boot.t train.t total.t
1     g4dn.xlarge      IaaS us-east-1 0.526        1   1    474     469     943
2     g4dn.xlarge      IaaS us-east-1 0.526        1   2    474     448     922
3     g4dn.xlarge      IaaS us-east-1 0.526        1   3    474     444     918
4      p3.2xlarge      IaaS us-east-1 3.060        1   1    449     283     732
5      p3.2xlarge      IaaS us-east-1 3.060        1   2    449     249     698
6      p3.2xlarge      IaaS us-east-1 3.060        1   3    449     246     695
7       p2.xlarge      IaaS us-east-1 0.900        1   1    608    1117    1725
8       p2.xlarge      IaaS us-east-1 0.900        1   2    398    1154    1552
9       p2.xlarge      IaaS us-east-1 0.900        1   3    436    1117    1553
10 ml.g4dn.xlarge SageMaker us-east-1 0.736        2   1    248     265     513
11 ml.g4dn.xlarge SageMaker us-east-1 0.736        2   2    250     269     519
12 ml.g4dn.xlarge SageMaker us-east-1 0.736        2   3    248     267     515
13  ml.p3.2xlarge SageMaker us-east-1 3.825        2   1    228     110     338
14  ml.p3.2xlarge SageMaker us-east-1 3.825        2   2    238     115     353
15  ml.p3.2xlarge SageMaker us-east-1 3.825        2   3    285     111     396
        cost
1   8.266967
2   8.082867
3   8.047800
4  37.332000
5  35.598000
6  35.445000
7  25.875000
8  23.280000
9  23.295000
10  6.292800
11  6.366400
12  6.317333
13 21.547500
14 22.503750
15 25.245000
#+end_example



*** Plotting the billed times

#+begin_src R :results output graphics file :file billed-times.png :exports both :width 450 :height 300 :noweb no-export

<<read-billing-data>>

plot.bill.times <- function(dt)
{
  dt %>%
    mutate(run = factor(run),
           type.inst = paste(type, instance, sep="\n")) %>%
    ggplot(aes(x = type.inst)) +
    geom_col(aes(y = total.t, fill = run, group = run),
             position=position_dodge()) +
    geom_col(aes(y = train.t, fill = run, group = run), color = "white",
             size = 1, position = position_dodge2(padding = 0.25)) + 
    scale_fill_discrete(name = "Run") +
    scale_x_discrete(name = "Instance type") +
    scale_y_continuous(name = "Training time and Billable time (s)") +
    theme_bw()
}

bill.dt %>%
  plot.bill.times()

#+end_src

#+RESULTS:
[[file:./img/billed-times.png]]

*** Training time relative to the total billed time

*** Plotting the total costs

#+begin_src R :results output graphics file :file total-costs.png :exports both :width 450 :height 300 :noweb no-export

<<read-billing-data>>

plot.costs <- function(dt)
{
  dt %>%
    mutate(run = factor(run),
           type.inst = paste(type, instance, sep="\n")) %>%
    ggplot(aes(x = type.inst, y = cost, fill = run)) +
    geom_col(position = position_dodge()) +
    scale_fill_discrete(name = "Run") +
    scale_x_discrete(name = "Instance type") +
    scale_y_continuous(name = "Total cost (USD)") +
    theme_bw()
}

bill.dt %>%
  plot.costs()

#+end_src

#+RESULTS:
[[file:./img/total-costs.png]]

* Scratchpad


#+begin_src R :results output :exports both :noweb no-export
iter.dt %>% filter(epoch==1 & iter==1) %>% select(exp, run, epoch, iter, iter.elapsed, iter.dur)
#+end_src

#+RESULTS:
#+begin_example
                     exp run epoch iter iter.elapsed  iter.dur
1       IAAS-g4dn.xlarge   1     1    1      125.117   125.117
2       IAAS-g4dn.xlarge   2     1    1      125.065  -343.775
3       IAAS-g4dn.xlarge   3     1    1      125.086  -322.650
4         IAAS-p2.xlarge   1     1    1      181.529  -262.185
5         IAAS-p2.xlarge   2     1    1      148.514 -1005.516
6         IAAS-p2.xlarge   3     1    1      188.090  -966.375
7  SAGEMAKER-g4dn-xlarge   1     1    1        9.497 -1107.282
8  SAGEMAKER-g4dn-xlarge   2     1    1        8.680  -255.928
9  SAGEMAKER-g4dn-xlarge   3     1    1        8.850  -259.802
10  SAGEMAKER-p3-2xlarge   1     1    1        6.290  -260.866
11  SAGEMAKER-p3-2xlarge   2     1    1       10.952   -99.409
12  SAGEMAKER-p3-2xlarge   3     1    1        7.507  -107.943
#+end_example

#+begin_src R :results output :exports both :noweb no-export
iter.dt %>% filter(epoch==1 & iter==1) %>% select(exp, run, epoch, iter, iter.elapsed, iter.dur)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 15 × 6
   exp                        run epoch  iter iter.elapsed iter.dur
   <fct>                    <int> <int> <int>        <dbl>    <dbl>
 1 IAAS-g4dn.xlarge             1     1     1       125.     125.  
 2 IAAS-g4dn.xlarge             2     1     1       125.     125.  
 3 IAAS-g4dn.xlarge             3     1     1       125.     125.  
 4 IAAS-p2.xlarge               1     1     1       182.     182.  
 5 IAAS-p2.xlarge               2     1     1       149.     149.  
 6 IAAS-p2.xlarge               3     1     1       188.     188.  
 7 IAAS-p3.2xlarge              1     1     1       174.     174.  
 8 IAAS-p3.2xlarge              2     1     1       137.     137.  
 9 IAAS-p3.2xlarge              3     1     1       136.     136.  
10 SAGEMAKER-ml-g4dn-xlarge     1     1     1         9.50     9.50
11 SAGEMAKER-ml-g4dn-xlarge     2     1     1         8.68     8.68
12 SAGEMAKER-ml-g4dn-xlarge     3     1     1         8.85     8.85
13 SAGEMAKER-ml-p3-2xlarge      1     1     1         6.29     6.29
14 SAGEMAKER-ml-p3-2xlarge      2     1     1        11.0     11.0 
15 SAGEMAKER-ml-p3-2xlarge      3     1     1         7.51     7.51
#+end_example

#+begin_src R :results output :exports both :noweb no-export
lbl.exp
#+end_src

#+RESULTS:
:           IaaS g4dn.xlarge             IaaS p2.xlarge 
:         "IAAS-g4dn.xlarge"           "IAAS-p2.xlarge" 
:            IaaS p3.2xlarge   SageMaker ml.g4dn.xlarge 
:          "IAAS-p3.2xlarge" "SAGEMAKER-ml-g4dn-xlarge" 
:    SageMaker ml.p3.2xlarge 
:  "SAGEMAKER-ml-p3-2xlarge"
